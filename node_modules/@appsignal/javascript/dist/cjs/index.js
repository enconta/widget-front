"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var version_1 = require("./version");
var api_1 = require("./api");
var environment_1 = require("./environment");
var span_1 = require("./span");
var queue_1 = require("./queue");
var dispatcher_1 = require("./dispatcher");
var hashmap_1 = require("./utils/hashmap");
var functional_1 = require("./utils/functional");
var Appsignal = (function () {
    function Appsignal(options) {
        this.VERSION = version_1.VERSION;
        this._hooks = {
            decorators: Array(),
            overrides: Array()
        };
        this._env = environment_1.Environment.serialize();
        this._queue = new queue_1.Queue(window.__APPSIGNAL_QUEUE__ || []);
        var key = options.key, uri = options.uri, revision = options.revision;
        if (revision && typeof revision !== "string") {
            options.revision = String(revision);
        }
        this._api = new api_1.PushApi({
            key: key,
            uri: uri,
            version: this.VERSION
        });
        this._breadcrumbs = [];
        this._dispatcher = new dispatcher_1.Dispatcher(this._queue, this._api);
        this._options = options;
    }
    Appsignal.prototype.send = function (data, tags, namespace) {
        var _this = this;
        if (tags === void 0) { tags = {}; }
        if (!(data instanceof Error) && !(data instanceof span_1.Span)) {
            console.error("[APPSIGNAL]: Can't send error, given error is not a valid type");
            return;
        }
        var span = data instanceof span_1.Span ? data : this._createSpanFromError(data);
        if (this._hooks.decorators.length > 0) {
            functional_1.compose.apply(void 0, tslib_1.__spread(this._hooks.decorators))(span);
        }
        if (tags)
            span.setTags(tags);
        if (namespace)
            span.setNamespace(namespace);
        if (this._breadcrumbs.length > 0)
            span.setBreadcrumbs(this._breadcrumbs);
        if (this._hooks.overrides.length > 0) {
            functional_1.compose.apply(void 0, tslib_1.__spread(this._hooks.overrides))(span);
        }
        if (environment_1.Environment.supportsPromises()) {
            this._breadcrumbs = [];
            return this._api.push(span).catch(function () {
                _this._queue.push(span);
                setTimeout(function () { return _this._dispatcher.schedule(); }, 0);
            });
        }
        else {
            console.error("[APPSIGNAL]: Error not sent. A Promise polyfill is required.");
            return;
        }
    };
    Appsignal.prototype.sendError = function (error, tags, namespace) {
        return this.send(error, tags, namespace);
    };
    Appsignal.prototype.use = function (plugin) {
        plugin.call(this);
    };
    Appsignal.prototype.createSpan = function (fn) {
        var _a = this._options, _b = _a.revision, revision = _b === void 0 ? "" : _b, namespace = _a.namespace;
        var span = new span_1.Span({
            environment: this._env,
            revision: revision
        });
        if (namespace)
            span.setNamespace(namespace);
        if (fn && typeof fn === "function")
            fn(span);
        return span;
    };
    Appsignal.prototype.wrap = function (fn) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 1, , 3]);
                        return [2, Promise.resolve(fn())];
                    case 1:
                        e_1 = _a.sent();
                        return [4, this.sendError(e_1)];
                    case 2:
                        _a.sent();
                        return [2, Promise.reject(e_1)];
                    case 3: return [2];
                }
            });
        });
    };
    Appsignal.prototype.addDecorator = function (decorator) {
        this._hooks.decorators.push(decorator);
    };
    Appsignal.prototype.addOverride = function (override) {
        this._hooks.overrides.push(override);
    };
    Appsignal.prototype.demo = function () {
        var span = this._createSpanFromError(new Error("Hello world! This is an error used for demonstration purposes."));
        span
            .setAction("TestAction")
            .setParams({
            path: "/hello",
            method: "GET"
        })
            .setTags({
            demo_sample: "true"
        });
        this.send(span);
    };
    Appsignal.prototype.addBreadcrumb = function (breadcrumb) {
        var crumb = tslib_1.__assign(tslib_1.__assign({ timestamp: Math.round(new Date().getTime() / 1000) }, breadcrumb), { metadata: hashmap_1.toHashMap(breadcrumb.metadata) });
        if (!crumb.category) {
            console.warn("[APPSIGNAL]: Breadcrumb not added. `category` is missing.");
            return;
        }
        if (!crumb.action) {
            console.warn("[APPSIGNAL]: Breadcrumb not added. `action` is missing.");
            return;
        }
        if (this._breadcrumbs.length === 20) {
            this._breadcrumbs.pop();
        }
        this._breadcrumbs.unshift(crumb);
    };
    Appsignal.prototype._createSpanFromError = function (error) {
        var event = this.createSpan();
        event.setError(error);
        return event;
    };
    return Appsignal;
}());
exports.default = Appsignal;
//# sourceMappingURL=index.js.map