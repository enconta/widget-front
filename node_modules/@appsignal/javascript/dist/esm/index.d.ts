import { Breadcrumb } from "@appsignal/types";
import { Span } from "./span";
import { IHook } from "./interfaces/IHook";
import { AppsignalOptions } from "./types/options";
export default class Appsignal {
    VERSION: string;
    private _dispatcher;
    private _options;
    private _api;
    private _breadcrumbs;
    private _hooks;
    private _env;
    private _queue;
    constructor(options: AppsignalOptions);
    send(error: Error, tags?: object, namespace?: string): Promise<Span> | void;
    send(span: Span): Promise<Span> | void;
    sendError(error: Error, tags?: object, namespace?: string): Promise<Span> | void;
    use(plugin: Function): void;
    createSpan(fn?: Function): Span;
    wrap(fn: Function): Promise<any>;
    addDecorator<T extends IHook>(decorator: T): void;
    addOverride<T extends IHook>(override: T): void;
    demo(): void;
    addBreadcrumb(breadcrumb: Omit<Breadcrumb, "timestamp">): void;
    private _createSpanFromError;
}
//# sourceMappingURL=index.d.ts.map