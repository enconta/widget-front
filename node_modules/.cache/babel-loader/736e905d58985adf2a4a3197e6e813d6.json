{"ast":null,"code":"import _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n  API Wrapper\n  The intent of this module is to have a single place in the app where all API calls are located\n  The syntax for a new API call can be inferred from the existing exported clases, it supports the http methods GET, POST, PUT and DELETE\n  All four methods call the request function that parses and prepares the data before making the actual request, the url params are converted to a query string and headers / auth are added in this step\n  The response is a promise that must be resolved from the place it was called\n*/\nimport { browserHistory } from 'react-router';\nimport moment from 'moment';\nimport store from 'store';\nimport axios from 'axios';\nimport AppStorage from './appStorage';\nimport SessionActions from 'actions/session';\nimport NotificationsActions from 'actions/notifications';\nimport { stringifyQuery } from 'utils';\nvar initialized = false; // Sepomex API data\n\nvar SEPOMEX_CONFIG = {\n  baseURL: process.env.CORE_API_URL,\n  headers: {\n    Authorization: process.env.CORE_API_TOKEN\n  }\n};\n\nvar handleServerErrors = function handleServerErrors(response) {\n  if (response.ok) return response;\n\n  switch (response.status) {\n    case 404:\n      throw Object.create({\n        error: 'No se encontró el elemento solicitado'\n      });\n\n    case 401:\n      AppStorage.clearAll();\n      browserHistory.push('/ingresar');\n      break;\n\n    case 500:\n      browserHistory.push('/500');\n      break;\n  }\n\n  return response.json().then(function (err) {\n    throw err;\n  });\n}; // Make the actual request\n\n/**\n *\n * @param {string} method\n * @param {string} endpoint\n * @param {object} queryArray\n * @param {object} body\n * @param {boolean} hasCustomResponse\n * @returns {Promise}\n */\n\n\nfunction request(method, endpoint, queryArray, body) {\n  var hasCustomResponse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (typeof endpoint === 'undefined') {\n    console.error('FATAL ERROR: endpoint not defined');\n    return Promise.reject(new Error('FATAL ERROR: endpoint not defined'));\n  } // Add the query params\n\n\n  var query = stringifyQuery(queryArray);\n  var url = \"\".concat(process.env.API_SERVER).concat(process.env.API_PREFIX).concat(endpoint).concat(query);\n  var fetchParams = {\n    method: method,\n    headers: {\n      'content-type': 'application/json',\n      Authorization: AppStorage.getAuthToken()\n    }\n  };\n  if (body) Object.assign(fetchParams, {\n    body: JSON.stringify(body)\n  });\n  if (process.env.DEBUG) console.log('myRequest', url, fetchParams); // Call the API and return a json response\n\n  return window.fetch(url, fetchParams).then(handleServerErrors).then(function (response) {\n    if (response.status === 204) return;\n\n    if (hasCustomResponse) {\n      return response;\n    }\n\n    return response.json().then(function (r) {\n      if (process.env.DEBUG) {\n        console.info(\"\".concat(method, \": \").concat(endpoint).concat(query));\n        console.info('resolvedRes', r);\n      }\n\n      return r;\n    });\n  }).catch(function (e) {\n    console.error('CONNECTION ERROR', e);\n    storeErrorLog(e);\n\n    if (e.error) {\n      throw e.error;\n    } else {\n      // If error doesn't have an 'error' attribute, it can be inferred as a conection error. Then a null will be thrown\n      throw NotificationsActions.error('Error de red. No hay conexión con el servidor.');\n    }\n  });\n} // Store a small log of 50 errors in storage\n// RyC\n\n\nfunction storeErrorLog(e) {\n  var errors = store.get('errors') || [];\n  var newError = {\n    kind: 'API comms error',\n    date: moment().format(),\n    details: JSON.stringify(e)\n  };\n  var currentErrors = errors.length >= 50 ? errors.slice(1) : errors;\n  store.set('errors', [].concat(_toConsumableArray(currentErrors), [newError]));\n} // HTTP GET\n\n/**\n *\n * @param {string} route\n * @param {object} [params]\n * @param {boolean} [hasCustomResponse]\n * @returns {Promise}\n */\n\n\nexport function Get(route) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var hasCustomResponse = arguments.length > 2 ? arguments[2] : undefined;\n  return request('GET', route, params, null, hasCustomResponse);\n} // HTTP POST\n\nexport function Post(route) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var hasCustomResponse = arguments.length > 2 ? arguments[2] : undefined;\n  return request('POST', route, {}, data, hasCustomResponse);\n} // HTTP PUT\n\nexport function Put(route) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var hasCustomResponse = arguments.length > 2 ? arguments[2] : undefined;\n  return request('PUT', route, {}, data, hasCustomResponse);\n} // HTTP DELETE\n\nfunction _Delete(route) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var hasCustomResponse = arguments.length > 2 ? arguments[2] : undefined;\n  return request('DELETE', route, params, null, hasCustomResponse);\n}\n/**\n * @typedef {{\n *  items: number;\n *  total_items: number;\n *  limit_value: number;\n *  total_pages: number;\n *  current_page: number;\n * }} Pagination\n * @typedef {{\n *  id: number;\n *  term_type: string;\n *  month: number;\n *  year: number;\n *  actual_step: string;\n * }} AccountingPeriod\n * @typedef {{\n *  id: number;\n *  name: string;\n *  alias: string;\n *  bank_name: string;\n *  account_number: string;\n *  active: boolean;\n *  taxable_entity_id: number;\n *  account_type?: any;\n * }} PaymentAccount\n * @typedef {{\n *  id: number;\n *  payment_account: Pick<PaymentAccount, 'id' | 'alias' | 'bank_name'>;\n *  month: number;\n *  upload_status: null | 'no_movements' | 'uploaded' | 'filled';\n *  bank_statement: BankStatement | null;\n *  approved: boolean | null;\n *  rejection_reason: null | 'modified_document' | 'different_period' | 'other';\n *  customer_service_comment: string | null;\n *  original_filename: string;\n *  original_filename_extra: string;\n *  extra_file_approved: boolean;\n *  addedFirstFile: boolean;\n *  addedSecondFile: boolean;\n *  deleteExtraZone: any;\n *  deleteZone: any;\n * }} Assignment\n * @typedef {{\n *  assignment_id: number;\n *  name: string;\n *  attached_file: string;\n *  content_type: string;\n *  original_filename: string;\n * }} AssigmentDocument\n * @typedef {{\n *  id: number;\n *  filename: string;\n *  url: string;\n *  created_at: Date;\n * }} BankStatement\n */\n// Exported functions\n\n\nexport { _Delete as Delete };\n\nvar User =\n/*#__PURE__*/\nfunction () {\n  function User() {\n    _classCallCheck(this, User);\n  }\n\n  _createClass(User, null, [{\n    key: \"ApplyForCredit\",\n    // Update apply for credit status\n    value: function ApplyForCredit() {\n      return Put('/dashboard/');\n    } // Attemps to log in the user with the provided credentials\n\n  }, {\n    key: \"Login\",\n    value: function Login(data) {\n      return Post('/login', data);\n    } // Attemps to log out the user with the provided credentials\n\n  }, {\n    key: \"Logout\",\n    value: function Logout() {\n      return _Delete('/logout');\n    } // Creates a new self_service client for Enconta\n\n  }, {\n    key: \"New\",\n    value: function New(data) {\n      return Post(\"/self_service/\", data);\n    } // Set current Taxable Entity\n\n  }, {\n    key: \"ChangeCurrentEntity\",\n    value: function ChangeCurrentEntity(data) {\n      return Post('/change_current_taxable_entity/', data);\n    } // Request a password reset for the specified client (or demo)\n\n  }, {\n    key: \"ResetPassword\",\n    value: function ResetPassword(data) {\n      return Post(\"/reset_password\", data);\n    } // Send a new password for user after requesting reset\n\n  }, {\n    key: \"ChangePassword\",\n    value: function ChangePassword(data) {\n      return Post(\"/change_password\", data);\n    } // Set first time password\n\n  }, {\n    key: \"FirstPassword\",\n    value: function FirstPassword(data) {\n      return Post(\"/new_password\", data);\n    } // Notifications\n\n  }, {\n    key: \"GetNotifications\",\n    value: function GetNotifications() {\n      return Get(\"/app_notifications\");\n    } // Create a Cancellation Request\n\n  }, {\n    key: \"CreateCancelRequest\",\n    value: function CreateCancelRequest(data) {\n      return Post('/cancellation_request', data);\n    }\n  }, {\n    key: \"CancellationReasons\",\n    value: function CancellationReasons() {\n      return Get('/cancellation_reasons');\n    }\n  }, {\n    key: \"GetFeatures\",\n    value: function GetFeatures() {\n      return Get('/features');\n    }\n  }]);\n\n  return User;\n}();\n\nvar Documents =\n/*#__PURE__*/\nfunction () {\n  function Documents() {\n    _classCallCheck(this, Documents);\n  }\n\n  _createClass(Documents, null, [{\n    key: \"List\",\n    // Get documents\n    value: function List(params) {\n      return Get('/regular_documents/', params);\n    } // Get document\n\n  }, {\n    key: \"GetDocument\",\n    value: function GetDocument(id) {\n      return Get('/regular_documents/' + id);\n    } // Create document\n\n  }, {\n    key: \"CreateDocument\",\n    value: function CreateDocument(data) {\n      return Post('/regular_documents/', data);\n    } // Create document\n\n  }, {\n    key: \"UpdateDocument\",\n    value: function UpdateDocument(id, data) {\n      return Put('/regular_documents/' + id, data);\n    } // Delete document by id\n\n  }, {\n    key: \"DeleteDocument\",\n    value: function DeleteDocument(id) {\n      return _Delete('/regular_documents/' + id);\n    }\n  }]);\n\n  return Documents;\n}();\n\nvar Downloads =\n/*#__PURE__*/\nfunction () {\n  function Downloads() {\n    _classCallCheck(this, Downloads);\n  }\n\n  _createClass(Downloads, null, [{\n    key: \"List\",\n    // Get List\n    value: function List(params) {\n      return Get('/downloads/', params);\n    } // Delete one file\n\n  }, {\n    key: \"DeleteFile\",\n    value: function DeleteFile(id) {\n      return _Delete('/downloads/' + id);\n    }\n  }]);\n\n  return Downloads;\n}();\n\nvar TaxableEntities =\n/*#__PURE__*/\nfunction () {\n  function TaxableEntities() {\n    _classCallCheck(this, TaxableEntities);\n  }\n\n  _createClass(TaxableEntities, null, [{\n    key: \"GetTaxableEntities\",\n    // Get Taxable Entities list\n    value: function GetTaxableEntities(params) {\n      return Get('/admin/taxable_entities/', params);\n    }\n  }]);\n\n  return TaxableEntities;\n}();\n\nvar EditUser =\n/*#__PURE__*/\nfunction () {\n  function EditUser() {\n    _classCallCheck(this, EditUser);\n  }\n\n  _createClass(EditUser, null, [{\n    key: \"GetUserData\",\n    // Get current User data\n    value: function GetUserData() {\n      return Get('/profile/');\n    } // Get User notifications settings\n\n  }, {\n    key: \"GetUserNotifications\",\n    value: function GetUserNotifications() {\n      return Get('/notifications/');\n    } // Set updated User data\n\n  }, {\n    key: \"SetUserData\",\n    value: function SetUserData(data) {\n      return Put('/profile/', data);\n    } // Set updated User notifications\n\n  }, {\n    key: \"SetUserNotifications\",\n    value: function SetUserNotifications(data) {\n      return Put('/notifications/', data);\n    }\n  }]);\n\n  return EditUser;\n}();\n\nvar Suscriptions =\n/*#__PURE__*/\nfunction () {\n  function Suscriptions() {\n    _classCallCheck(this, Suscriptions);\n  }\n\n  _createClass(Suscriptions, null, [{\n    key: \"GetServices\",\n    // Gets client's acquired services list\n    value: function GetServices() {\n      return Get('/client/services');\n    } // Gets payments log for a given client\n\n  }, {\n    key: \"GetPaymentsLog\",\n    value: function GetPaymentsLog() {\n      return Get('/client/payment_orders');\n    } // Gets the pending payments details for a blocked client, so the client can pay the minimum\n\n  }, {\n    key: \"GetPendingPayments\",\n    value: function GetPendingPayments() {\n      return Get('/client/payment_orders/pending_payments');\n    } // Gets client's payment sources list\n\n  }, {\n    key: \"GetPaymentSources\",\n    value: function GetPaymentSources() {\n      return Get('/client/payment_sources');\n    } // Deletes a given payment source\n\n  }, {\n    key: \"DeletePaymentSource\",\n    value: function DeletePaymentSource(idCard) {\n      return _Delete('/client/payment_sources/' + idCard);\n    } // Makes a card the principal one for paying services\n\n  }, {\n    key: \"MakePrincipalPaymentCard\",\n    value: function MakePrincipalPaymentCard(idCard) {\n      return Put('/client/payment_sources/' + idCard);\n    } // Adds a payment source\n\n  }, {\n    key: \"CreatePaymentSource\",\n    value: function CreatePaymentSource(cardInfo) {\n      return Post('/client/payment_sources', cardInfo);\n    } // Pay services for a given client\n\n  }, {\n    key: \"PayService\",\n    value: function PayService(orderIds) {\n      return Post('/client/payment_orders', orderIds);\n    }\n  }]);\n\n  return Suscriptions;\n}();\n\nvar EditClient =\n/*#__PURE__*/\nfunction () {\n  function EditClient() {\n    _classCallCheck(this, EditClient);\n  }\n\n  _createClass(EditClient, null, [{\n    key: \"GetEntityData\",\n    // Get Clients list\n    value: function GetEntityData(id) {\n      return Get('/user_taxable_entities/' + id);\n    } // Get Clients list\n\n  }, {\n    key: \"GetClientsList\",\n    value: function GetClientsList(params) {\n      return Get('/clients/', params);\n    } // Get Employees list\n\n  }, {\n    key: \"GetEmployeesList\",\n    value: function GetEmployeesList(params) {\n      return Get('/employees/', params);\n    } // Get Employees list\n\n  }, {\n    key: \"GetBranchesList\",\n    value: function GetBranchesList(params) {\n      return Get('/branches/', params);\n    } // Get selected Client data\n\n  }, {\n    key: \"GetClientData\",\n    value: function GetClientData(id) {\n      return Get('/clients/' + id);\n    } // Get selected Employee data\n\n  }, {\n    key: \"GetEmployeeData\",\n    value: function GetEmployeeData(id) {\n      return Get('/employees/' + id);\n    } // Get selected Branch data\n\n  }, {\n    key: \"GetBranchData\",\n    value: function GetBranchData(id) {\n      return Get(\"/branches/\".concat(id));\n    } // Update entity data\n\n  }, {\n    key: \"SetEntitytData\",\n    value: function SetEntitytData(id, data) {\n      return Put('/user_taxable_entities/' + id, data);\n    } // Set current Employee data\n\n  }, {\n    key: \"SetClientData\",\n    value: function SetClientData(id, data) {\n      return Put('/clients/' + id, data);\n    } // Set current Employee data\n\n  }, {\n    key: \"SetEmployeeData\",\n    value: function SetEmployeeData(id, data) {\n      return Put('/employees/' + id, data);\n    } // Set current Branch data\n\n  }, {\n    key: \"SetBranchData\",\n    value: function SetBranchData(id, data) {\n      return Put(\"/branches/\".concat(id), data);\n    } // Create new Employee\n\n  }, {\n    key: \"CreateClient\",\n    value: function CreateClient(data) {\n      return Post('/clients/', data);\n    } // Create new Employee\n\n  }, {\n    key: \"CreateEmployee\",\n    value: function CreateEmployee(data) {\n      return Post('/employees/', data);\n    } // Create new Branch\n\n  }, {\n    key: \"CreateBranch\",\n    value: function CreateBranch(data) {\n      return Post('/branches/', data);\n    } // Change Employee Status (active: true/false)\n\n  }, {\n    key: \"ChangeEmployeeStatus\",\n    value: function ChangeEmployeeStatus(id, request) {\n      return Put(\"/employees/\".concat(id, \"/\").concat(request));\n    } // Change Client Status (active: true/false)\n\n  }, {\n    key: \"ChangeClientStatus\",\n    value: function ChangeClientStatus(id, request) {\n      return Put(\"/clients/\".concat(id, \"/\").concat(request));\n    } // Deletes a branch\n\n  }, {\n    key: \"DeleteBranch\",\n    value: function DeleteBranch(id) {\n      return _Delete(\"/branches/\".concat(id));\n    } // Deletes a client\n\n  }, {\n    key: \"DeleteClient\",\n    value: function DeleteClient(id) {\n      return _Delete(\"/clients/\".concat(id));\n    } // Deletes an employee\n\n  }, {\n    key: \"DeleteEmployee\",\n    value: function DeleteEmployee(id) {\n      return _Delete(\"/employees/\".concat(id));\n    } // Edit data for taxable entity\n\n  }, {\n    key: \"EditEntity\",\n    value: function EditEntity(data) {\n      return Put('/taxable_entity', data);\n    } // Get URLS for SAT credentials or booleans if permissions don't allow it\n\n  }, {\n    key: \"SatCredentials\",\n    value: function SatCredentials() {\n      return Get(\"/sat_credentials\");\n    } // Gets client summary data\n\n  }, {\n    key: \"Summary\",\n    value: function Summary() {\n      return Get('/taxable_entity/summary');\n    }\n  }]);\n\n  return EditClient;\n}();\n\nvar PaymentAccounts =\n/*#__PURE__*/\nfunction () {\n  function PaymentAccounts() {\n    _classCallCheck(this, PaymentAccounts);\n  }\n\n  _createClass(PaymentAccounts, null, [{\n    key: \"Create\",\n    // Create new payment account\n    value: function Create(data) {\n      return Post('/payment_accounts/', data);\n    } // Update payment account\n\n  }, {\n    key: \"Update\",\n    value: function Update(id, data) {\n      return Put(\"/payment_accounts/\".concat(id), data);\n    } // List payment accounts\n\n  }, {\n    key: \"List\",\n    value: function List(params) {\n      return Get('/payment_accounts/', params);\n    } // Toggles active/inactive a payment account\n\n  }, {\n    key: \"ToggleStatus\",\n    value: function ToggleStatus(id) {\n      return Put(\"/payment_accounts/\".concat(id, \"/toggle_payment_account\"));\n    } // Gets the data for a single requested payment account\n\n  }, {\n    key: \"GetPaymentAccount\",\n    value: function GetPaymentAccount(id) {\n      return Get(\"/payment_accounts/\".concat(id));\n    } // Deletes a single payment account\n\n  }, {\n    key: \"Delete\",\n    value: function Delete(id) {\n      return _Delete(\"/payment_accounts/\".concat(id));\n    } // Banks list\n\n  }, {\n    key: \"GetBanksList\",\n    value: function GetBanksList() {\n      return Get(\"/banks\");\n    } // List payment accounts with cash accounts\n\n  }, {\n    key: \"ListWithCashAccounts\",\n    value: function ListWithCashAccounts(params) {\n      return Get('/cash_payment_accounts/', params);\n    }\n  }]);\n\n  return PaymentAccounts;\n}();\n\nvar AccountingPeriods =\n/*#__PURE__*/\nfunction () {\n  function AccountingPeriods() {\n    _classCallCheck(this, AccountingPeriods);\n  }\n\n  _createClass(AccountingPeriods, null, [{\n    key: \"GetAccoutingPeriods\",\n\n    /**\n     * Get list all the periods with pagination\n     */\n    value: function GetAccoutingPeriods(params) {\n      return Get('/accounting_periods', params);\n    }\n    /**\n     * Get list all the periods of an taxable entity\n     * @returns {Promise<{pagination: Pagination, accounting_periods: AccountingPeriod[]}>}\n     */\n\n  }, {\n    key: \"List\",\n    value: function List() {\n      return Get('/accounting_periods');\n    }\n    /**\n     * Get details specific period\n     * @param {number | string} period\n     * @returns {Promise<{accounting_period: AccountingPeriod>}\n     */\n\n  }, {\n    key: \"Details\",\n    value: function Details(period) {\n      return Get(\"/accounting_periods/\".concat(period));\n    }\n    /**\n     * @param {number} periodId\n     * @returns {Promise<{assignments: Assignment[]}>}\n     */\n\n  }, {\n    key: \"GetAssigments\",\n    value: function GetAssigments(periodId) {\n      return Get(\"/client/accounting_periods/\".concat(periodId, \"/assignments/\"));\n    }\n    /**\n     * @param {number} assigmentId\n     * @returns {Promise<{assigment: Assignment}>}\n     */\n\n  }, {\n    key: \"UpdateAssigment\",\n    value: function UpdateAssigment(assigmentId) {\n      return Put(\"/client/assignments/\".concat(assigmentId, \"/no_movements/\"));\n    }\n    /**\n     * @param {number} assignmentId\n     * @param {AssigmentDocument} data\n     * @returns {Promise<{assignments: assignment}>}\n     */\n\n  }, {\n    key: \"CreateBankStatement\",\n    value: function CreateBankStatement(assignmentId, data) {\n      return Put(\"/client/assignments/\".concat(assignmentId), {\n        assignment: data\n      });\n    }\n  }]);\n\n  return AccountingPeriods;\n}();\n\nvar Conciliation =\n/*#__PURE__*/\nfunction () {\n  function Conciliation() {\n    _classCallCheck(this, Conciliation);\n  }\n\n  _createClass(Conciliation, null, [{\n    key: \"GetCalculations\",\n    // Get calculation period\n    value: function GetCalculations(period) {\n      return Get(\"/accounting_periods/\".concat(period, \"/calculations\"));\n    } // Send Conciliation acepted or rejected\n\n  }, {\n    key: \"SendCalculation\",\n    value: function SendCalculation(periodId, calculationId, params) {\n      return Put(\"/accounting_periods/\".concat(periodId, \"/calculations/\").concat(calculationId), params);\n    }\n  }]);\n\n  return Conciliation;\n}(); // Get deductible invoices in a calculation\n\n\nvar InvoicesConsiderated =\n/*#__PURE__*/\nfunction () {\n  function InvoicesConsiderated() {\n    _classCallCheck(this, InvoicesConsiderated);\n  }\n\n  _createClass(InvoicesConsiderated, null, [{\n    key: \"List\",\n    value: function List(params) {\n      return Get('/invoices', params);\n    }\n  }]);\n\n  return InvoicesConsiderated;\n}();\n\nvar Messages =\n/*#__PURE__*/\nfunction () {\n  function Messages() {\n    _classCallCheck(this, Messages);\n  }\n\n  _createClass(Messages, null, [{\n    key: \"ListMessages\",\n    // List messages in view accounting periods\n    value: function ListMessages(period, params) {\n      return Get(\"/accounting_periods/\".concat(period, \"/messages\"), params);\n    } // Create message from accounting periods\n\n  }, {\n    key: \"CreateMessages\",\n    value: function CreateMessages(period, data) {\n      return Post(\"/accounting_periods/\".concat(period, \"/messages\"), data);\n    }\n  }]);\n\n  return Messages;\n}();\n\nvar SentEmails =\n/*#__PURE__*/\nfunction () {\n  function SentEmails() {\n    _classCallCheck(this, SentEmails);\n  }\n\n  _createClass(SentEmails, null, [{\n    key: \"List\",\n    // Get Emails List\n    value: function List(params) {\n      return Get('/sent_emails/', params);\n    } // Get email with id\n\n  }, {\n    key: \"Show\",\n    value: function Show(id) {\n      return Get(\"/sent_emails/\".concat(id));\n    }\n  }]);\n\n  return SentEmails;\n}();\n\nvar TaxStatements =\n/*#__PURE__*/\nfunction () {\n  function TaxStatements() {\n    _classCallCheck(this, TaxStatements);\n  }\n\n  _createClass(TaxStatements, null, [{\n    key: \"List\",\n    // Get tax statements list\n    value: function List(periodId) {\n      return Get(\"/accounting_periods/\".concat(periodId, \"/tax_statements\"));\n    } // Get details from statements\n\n  }, {\n    key: \"GetDetails\",\n    value: function GetDetails(periodId, statementId) {\n      return Get(\"/accounting_periods/\".concat(periodId, \"/tax_statements/\").concat(statementId));\n    }\n  }]);\n\n  return TaxStatements;\n}();\n\nvar Invoice =\n/*#__PURE__*/\nfunction () {\n  function Invoice() {\n    _classCallCheck(this, Invoice);\n  }\n\n  _createClass(Invoice, null, [{\n    key: \"GetSerieAndFolio\",\n    // Serie and folio\n    value: function GetSerieAndFolio() {\n      return Get('/invoices/new');\n    } // Cancel invoice\n\n  }, {\n    key: \"Cancel\",\n    value: function Cancel(id) {\n      return Get(\"/invoices/\".concat(id, \"/cancel\"));\n    }\n  }, {\n    key: \"AskStatus\",\n    value: function AskStatus(id) {\n      return Get(\"/invoices/\".concat(id, \"/cancelation_status\"));\n    } // List invoices\n\n  }, {\n    key: \"List\",\n    value: function List(params) {\n      return Get('/invoices', params);\n    } // Return an invoice\n\n  }, {\n    key: \"Show\",\n    value: function Show(id) {\n      return Get(\"/invoices/\".concat(id));\n    } // Create new invoice\n\n  }, {\n    key: \"Create\",\n    value: function Create(data) {\n      return Post('/invoices', data);\n    } // Create new regular invoice\n\n  }, {\n    key: \"CreateRegular\",\n    value: function CreateRegular(data, isPreview) {\n      return Post('/create_invoice/regular', data, isPreview);\n    } // Create new payroll invoice\n\n  }, {\n    key: \"CreatePayroll\",\n    value: function CreatePayroll(data, isPreview) {\n      return Post('/create_invoice/payroll', data, isPreview);\n    } // Create new invoice with ine complement\n\n  }, {\n    key: \"CreateIne\",\n    value: function CreateIne(data, isPreview) {\n      return Post('/create_invoice/ine', data, isPreview);\n    } // Create new invoice with local tax complement\n\n  }, {\n    key: \"CreateLocalTax\",\n    value: function CreateLocalTax(data, isPreview) {\n      return Post('/create_invoice/local_tax', data, isPreview);\n    } // Create new invoice with foreign trade (type i) complement\n\n  }, {\n    key: \"CreateForeignTrade\",\n    value: function CreateForeignTrade(data, isPreview) {\n      return Post('/create_invoice/foreign_trade', data, isPreview);\n    } // Download XML\n\n  }, {\n    key: \"Xml\",\n    value: function Xml(id) {\n      return Get(\"/invoices/\".concat(id, \"/xml\"));\n    } // Download PDF\n\n  }, {\n    key: \"Pdf\",\n    value: function Pdf(id) {\n      return Get(\"/invoices/\".concat(id, \"/pdf\"));\n    } // Triggers the Excel creation delayed job\n\n  }, {\n    key: \"ExportInvoiceToExcel\",\n    value: function ExportInvoiceToExcel(params) {\n      return Get('/export_to_excel/regular', params);\n    }\n  }, {\n    key: \"ExportPayrollToExcel\",\n    value: function ExportPayrollToExcel(params) {\n      return Get('/export_to_excel/payroll', params);\n    }\n  }, {\n    key: \"ExportPaymentToExcel\",\n    value: function ExportPaymentToExcel(params) {\n      return Get('/export_to_excel/payment', params);\n    } // Triggers the XML creation delayed job\n\n  }, {\n    key: \"ExportToXml\",\n    value: function ExportToXml(params) {\n      return Get('/export_to_xml', params);\n    }\n  }, {\n    key: \"GetUnits\",\n    value: function GetUnits(params) {\n      return Get('/cfdi_units', params);\n    }\n  }, {\n    key: \"GetProducts\",\n    value: function GetProducts(params) {\n      return Get('/cfdi_products', params);\n    } // Get frequently used data\n\n  }, {\n    key: \"GetUsedData\",\n    value: function GetUsedData() {\n      return Get('/frequent_products');\n    }\n  }, {\n    key: \"SendByEmail\",\n    value: function SendByEmail(invoiceId, data) {\n      return Post(\"/invoices/\".concat(invoiceId, \"/send_email\"), data);\n    } // Get custom categories (currenty named sat_categories)\n\n  }, {\n    key: \"SetCategory\",\n    value: function SetCategory(id, data) {\n      return Put(\"/invoices/\".concat(id, \"/category\"), data);\n    }\n  }]);\n\n  return Invoice;\n}();\n\nvar MultipleInvoicing =\n/*#__PURE__*/\nfunction () {\n  function MultipleInvoicing() {\n    _classCallCheck(this, MultipleInvoicing);\n  }\n\n  _createClass(MultipleInvoicing, null, [{\n    key: \"List\",\n    // Get list with invoice processes\n    value: function List(params) {\n      return Get('/invoice_imports', params);\n    } // Get detail for process with id\n\n  }, {\n    key: \"Show\",\n    value: function Show(id) {\n      return Get(\"/invoice_imports/\".concat(id));\n    } // Upload file for process\n\n  }, {\n    key: \"Create\",\n    value: function Create(data) {\n      return Post('/invoice_imports', data);\n    } // Upload file for process\n\n  }, {\n    key: \"CreateThirdParty\",\n    value: function CreateThirdParty(data) {\n      return Post('/invoice_imports/create_third_party', data);\n    } // Trigger stamping for regular invoices in process\n\n  }, {\n    key: \"StampRegular\",\n    value: function StampRegular(id) {\n      return Post(\"/invoice_imports/\".concat(id, \"/stamp_regular\"));\n    } // Trigger stamping for third party invoices\n\n  }, {\n    key: \"StampThirdParty\",\n    value: function StampThirdParty(id) {\n      return Post(\"/invoice_imports/\".concat(id, \"/stamp_third_party\"));\n    }\n  }]);\n\n  return MultipleInvoicing;\n}();\n\nvar CustomCategories =\n/*#__PURE__*/\nfunction () {\n  function CustomCategories() {\n    _classCallCheck(this, CustomCategories);\n  }\n\n  _createClass(CustomCategories, null, [{\n    key: \"List\",\n    // Get custom categories (currenty named sat_categories)\n    value: function List() {\n      return Get('/invoice_categories');\n    } // Get custom categories (currenty named sat_categories)\n\n  }, {\n    key: \"Create\",\n    value: function Create(data) {\n      return Post('/invoice_categories', data);\n    }\n  }]);\n\n  return CustomCategories;\n}();\n\nvar Reports =\n/*#__PURE__*/\nfunction () {\n  function Reports() {\n    _classCallCheck(this, Reports);\n  }\n\n  _createClass(Reports, null, [{\n    key: \"Categories\",\n    // Invoice stats by category\n    value: function Categories(params) {\n      return Get('/reports/invoicing_by_category', params);\n    }\n  }, {\n    key: \"Rankings\",\n    value: function Rankings(params) {\n      return Get('/reports/client_rankings', params);\n    }\n  }, {\n    key: \"Behaviors\",\n    value: function Behaviors(params) {\n      return Get('/reports/behavior_by_items', params);\n    }\n  }, {\n    key: \"History\",\n    value: function History(params) {\n      return Get('/reports/historical_behavior', params);\n    }\n  }]);\n\n  return Reports;\n}();\n\nvar Dashboard =\n/*#__PURE__*/\nfunction () {\n  function Dashboard() {\n    _classCallCheck(this, Dashboard);\n  }\n\n  _createClass(Dashboard, null, [{\n    key: \"GetChartData\",\n    value: function GetChartData(params) {\n      return Get('/dashboard', params);\n    }\n  }]);\n\n  return Dashboard;\n}();\n\nvar Payments =\n/*#__PURE__*/\nfunction () {\n  function Payments() {\n    _classCallCheck(this, Payments);\n  }\n\n  _createClass(Payments, null, [{\n    key: \"Create\",\n    value: function Create(invoiceId, data) {\n      return Post(\"/invoices/\".concat(invoiceId, \"/payments\"), data);\n    }\n  }, {\n    key: \"Update\",\n    value: function Update(id, data) {\n      return Put(\"/payments/\".concat(id), data);\n    }\n  }, {\n    key: \"Delete\",\n    value: function Delete(id) {\n      return _Delete(\"/payments/\".concat(id));\n    }\n  }]);\n\n  return Payments;\n}();\n\nvar Services =\n/*#__PURE__*/\nfunction () {\n  function Services() {\n    _classCallCheck(this, Services);\n  }\n\n  _createClass(Services, null, [{\n    key: \"PostalCode\",\n    // Send a postal code, receive address info\n    value: function PostalCode() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return axios.get('sepomex', Object.assign({}, _objectSpread({}, SEPOMEX_CONFIG), {\n        params: params\n      }));\n    }\n  }]);\n\n  return Services;\n}();\n\nvar BanksSynchronization =\n/*#__PURE__*/\nfunction () {\n  function BanksSynchronization() {\n    _classCallCheck(this, BanksSynchronization);\n  }\n\n  _createClass(BanksSynchronization, null, [{\n    key: \"AddBank\",\n    value: function AddBank(data) {\n      return Post(\"/client/smart_sync/account_connections\", data);\n    }\n  }, {\n    key: \"SaveSelectedAccount\",\n    value: function SaveSelectedAccount(data) {\n      return Post(\"/client/smart_sync/bank_accounts\", data);\n    }\n  }, {\n    key: \"AskStatus\",\n    value: function AskStatus(institution) {\n      return Get(\"/client/smart_sync/account_connections/status/\".concat(institution));\n    }\n  }, {\n    key: \"GetResponse\",\n    value: function GetResponse(bank) {\n      return Get(\"/client/smart_sync/account_connections/\".concat(bank));\n    }\n  }, {\n    key: \"BankAccounts\",\n    value: function BankAccounts(bank) {\n      return Get(\"/client/smart_sync/bank_accounts?bank_name=\".concat(bank));\n    }\n  }, {\n    key: \"GetBankList\",\n    value: function GetBankList() {\n      return Get(\"/client/smart_sync/account_connections\");\n    }\n  }, {\n    key: \"WidgetToken\",\n    value: function WidgetToken() {\n      return Get('/client/smart_sync/tokens');\n    }\n  }]);\n\n  return BanksSynchronization;\n}();\n\nvar Inventories =\n/*#__PURE__*/\nfunction () {\n  function Inventories() {\n    _classCallCheck(this, Inventories);\n  }\n\n  _createClass(Inventories, null, [{\n    key: \"GetProducts\",\n    value: function GetProducts(params) {\n      return Get('/products/', params);\n    }\n  }, {\n    key: \"MassivelyInsertProducts\",\n    value: function MassivelyInsertProducts(productsImport) {\n      return Post('/product_import', productsImport);\n    }\n  }, {\n    key: \"CreateProduct\",\n    value: function CreateProduct(product) {\n      return Post('/products', product);\n    }\n  }, {\n    key: \"DeleteProduct\",\n    value: function DeleteProduct(id) {\n      return _Delete(\"/products/\".concat(id));\n    }\n  }, {\n    key: \"UpdateProduct\",\n    value: function UpdateProduct(id, data) {\n      return Put(\"/products/\".concat(id), data);\n    }\n  }, {\n    key: \"GetRecords\",\n    value: function GetRecords(params) {\n      return Get(\"/inventory_records\", params);\n    }\n  }]);\n\n  return Inventories;\n}();\n\nvar Restrictions =\n/*#__PURE__*/\nfunction () {\n  function Restrictions() {\n    _classCallCheck(this, Restrictions);\n  }\n\n  _createClass(Restrictions, null, [{\n    key: \"GetRestrictions\",\n    value: function GetRestrictions() {\n      return Get('/client/restrictions');\n    }\n  }]);\n\n  return Restrictions;\n}();\n\nvar Premium =\n/*#__PURE__*/\nfunction () {\n  function Premium() {\n    _classCallCheck(this, Premium);\n  }\n\n  _createClass(Premium, null, [{\n    key: \"CreatePremium\",\n    value: function CreatePremium(cardInfo) {\n      return Post('/client/subscriptions', cardInfo);\n    }\n  }]);\n\n  return Premium;\n}();\n\nexport default {\n  init: init,\n  User: User,\n  Documents: Documents,\n  Downloads: Downloads,\n  PaymentAccounts: PaymentAccounts,\n  TaxableEntities: TaxableEntities,\n  EditUser: EditUser,\n  Suscriptions: Suscriptions,\n  EditClient: EditClient,\n  SentEmails: SentEmails,\n  TaxStatements: TaxStatements,\n  Invoice: Invoice,\n  MultipleInvoicing: MultipleInvoicing,\n  CustomCategories: CustomCategories,\n  Reports: Reports,\n  Dashboard: Dashboard,\n  Payments: Payments,\n  Services: Services,\n  AccountingPeriods: AccountingPeriods,\n  Messages: Messages,\n  Conciliation: Conciliation,\n  InvoicesConsiderated: InvoicesConsiderated,\n  BanksSynchronization: BanksSynchronization,\n  Inventories: Inventories,\n  Restrictions: Restrictions,\n  Premium: Premium\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/api/index.js"],"names":["browserHistory","moment","store","axios","AppStorage","SessionActions","NotificationsActions","stringifyQuery","initialized","SEPOMEX_CONFIG","baseURL","process","env","CORE_API_URL","headers","Authorization","CORE_API_TOKEN","handleServerErrors","response","ok","status","Object","create","error","clearAll","push","json","then","err","request","method","endpoint","queryArray","body","hasCustomResponse","console","Promise","reject","Error","query","url","API_SERVER","API_PREFIX","fetchParams","getAuthToken","assign","JSON","stringify","DEBUG","log","window","fetch","r","info","catch","e","storeErrorLog","errors","get","newError","kind","date","format","details","currentErrors","length","slice","set","Get","route","params","Post","data","Put","Delete","User","Documents","id","Downloads","TaxableEntities","EditUser","Suscriptions","idCard","cardInfo","orderIds","EditClient","PaymentAccounts","AccountingPeriods","period","periodId","assigmentId","assignmentId","assignment","Conciliation","calculationId","InvoicesConsiderated","Messages","SentEmails","TaxStatements","statementId","Invoice","isPreview","invoiceId","MultipleInvoicing","CustomCategories","Reports","Dashboard","Payments","Services","BanksSynchronization","institution","bank","Inventories","productsImport","product","Restrictions","Premium","init"],"mappings":"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","sourcesContent":["/*\n  API Wrapper\n  The intent of this module is to have a single place in the app where all API calls are located\n  The syntax for a new API call can be inferred from the existing exported clases, it supports the http methods GET, POST, PUT and DELETE\n  All four methods call the request function that parses and prepares the data before making the actual request, the url params are converted to a query string and headers / auth are added in this step\n  The response is a promise that must be resolved from the place it was called\n*/\nimport { browserHistory } from 'react-router'\nimport moment from 'moment'\nimport store from 'store'\nimport axios from 'axios'\n\nimport AppStorage from './appStorage'\nimport SessionActions from 'actions/session'\nimport NotificationsActions from 'actions/notifications'\nimport { stringifyQuery } from 'utils'\n\nlet initialized = false\n\n// Sepomex API data\nconst SEPOMEX_CONFIG = {\n  baseURL: process.env.CORE_API_URL,\n  headers: { Authorization: process.env.CORE_API_TOKEN }\n}\n\nconst handleServerErrors = response => {\n  if (response.ok) return response\n  switch (response.status) {\n    case 404:\n      throw Object.create({ error: 'No se encontró el elemento solicitado' })\n    case 401:\n      AppStorage.clearAll()\n      browserHistory.push('/ingresar')\n      break\n    case 500:\n      browserHistory.push('/500')\n      break\n  }\n  return response.json().then(err => {\n    throw err\n  })\n}\n\n// Make the actual request\n/**\n *\n * @param {string} method\n * @param {string} endpoint\n * @param {object} queryArray\n * @param {object} body\n * @param {boolean} hasCustomResponse\n * @returns {Promise}\n */\nfunction request (\n  method,\n  endpoint,\n  queryArray,\n  body,\n  hasCustomResponse = false\n) {\n  if (typeof endpoint === 'undefined') {\n    console.error('FATAL ERROR: endpoint not defined')\n    return Promise.reject(new Error('FATAL ERROR: endpoint not defined'))\n  }\n  // Add the query params\n  const query = stringifyQuery(queryArray)\n\n  const url = `${process.env.API_SERVER}${process.env.API_PREFIX}${endpoint}${query}`\n\n  const fetchParams = {\n    method: method,\n    headers: {\n      'content-type': 'application/json',\n      Authorization: AppStorage.getAuthToken()\n    }\n  }\n  if (body) Object.assign(fetchParams, { body: JSON.stringify(body) })\n  if (process.env.DEBUG) console.log('myRequest', url, fetchParams)\n\n  // Call the API and return a json response\n  return window\n    .fetch(url, fetchParams)\n    .then(handleServerErrors)\n    .then(response => {\n      if (response.status === 204) return\n      if (hasCustomResponse) {\n        return response\n      }\n      return response.json().then(r => {\n        if (process.env.DEBUG) {\n          console.info(`${method}: ${endpoint}${query}`)\n          console.info('resolvedRes', r)\n        }\n        return r\n      })\n    })\n    .catch(e => {\n      console.error('CONNECTION ERROR', e)\n      storeErrorLog(e)\n      if (e.error) {\n        throw e.error\n      } else {\n        // If error doesn't have an 'error' attribute, it can be inferred as a conection error. Then a null will be thrown\n        throw NotificationsActions.error(\n          'Error de red. No hay conexión con el servidor.'\n        )\n      }\n    })\n}\n\n// Store a small log of 50 errors in storage\n// RyC\nfunction storeErrorLog (e) {\n  const errors = store.get('errors') || []\n  const newError = {\n    kind: 'API comms error',\n    date: moment().format(),\n    details: JSON.stringify(e)\n  }\n  const currentErrors = errors.length >= 50 ? errors.slice(1) : errors\n  store.set('errors', [...currentErrors, newError])\n}\n\n// HTTP GET\n/**\n *\n * @param {string} route\n * @param {object} [params]\n * @param {boolean} [hasCustomResponse]\n * @returns {Promise}\n */\nexport function Get (route, params = {}, hasCustomResponse) {\n  return request('GET', route, params, null, hasCustomResponse)\n}\n// HTTP POST\nexport function Post (route, data = null, hasCustomResponse) {\n  return request('POST', route, {}, data, hasCustomResponse)\n}\n// HTTP PUT\nexport function Put (route, data = null, hasCustomResponse) {\n  return request('PUT', route, {}, data, hasCustomResponse)\n}\n// HTTP DELETE\nexport function Delete (route, params = {}, hasCustomResponse) {\n  return request('DELETE', route, params, null, hasCustomResponse)\n}\n\n/**\n * @typedef {{\n *  items: number;\n *  total_items: number;\n *  limit_value: number;\n *  total_pages: number;\n *  current_page: number;\n * }} Pagination\n * @typedef {{\n *  id: number;\n *  term_type: string;\n *  month: number;\n *  year: number;\n *  actual_step: string;\n * }} AccountingPeriod\n * @typedef {{\n *  id: number;\n *  name: string;\n *  alias: string;\n *  bank_name: string;\n *  account_number: string;\n *  active: boolean;\n *  taxable_entity_id: number;\n *  account_type?: any;\n * }} PaymentAccount\n * @typedef {{\n *  id: number;\n *  payment_account: Pick<PaymentAccount, 'id' | 'alias' | 'bank_name'>;\n *  month: number;\n *  upload_status: null | 'no_movements' | 'uploaded' | 'filled';\n *  bank_statement: BankStatement | null;\n *  approved: boolean | null;\n *  rejection_reason: null | 'modified_document' | 'different_period' | 'other';\n *  customer_service_comment: string | null;\n *  original_filename: string;\n *  original_filename_extra: string;\n *  extra_file_approved: boolean;\n *  addedFirstFile: boolean;\n *  addedSecondFile: boolean;\n *  deleteExtraZone: any;\n *  deleteZone: any;\n * }} Assignment\n * @typedef {{\n *  assignment_id: number;\n *  name: string;\n *  attached_file: string;\n *  content_type: string;\n *  original_filename: string;\n * }} AssigmentDocument\n * @typedef {{\n *  id: number;\n *  filename: string;\n *  url: string;\n *  created_at: Date;\n * }} BankStatement\n */\n\n// Exported functions\nclass User {\n  // Update apply for credit status\n  static ApplyForCredit () {\n    return Put('/dashboard/')\n  }\n  // Attemps to log in the user with the provided credentials\n  static Login (data) {\n    return Post('/login', data)\n  }\n  // Attemps to log out the user with the provided credentials\n  static Logout () {\n    return Delete('/logout')\n  }\n  // Creates a new self_service client for Enconta\n  static New (data) {\n    return Post(`/self_service/`, data)\n  }\n  // Set current Taxable Entity\n  static ChangeCurrentEntity (data) {\n    return Post('/change_current_taxable_entity/', data)\n  }\n  // Request a password reset for the specified client (or demo)\n  static ResetPassword (data) {\n    return Post(`/reset_password`, data)\n  }\n  // Send a new password for user after requesting reset\n  static ChangePassword (data) {\n    return Post(`/change_password`, data)\n  }\n  // Set first time password\n  static FirstPassword (data) {\n    return Post(`/new_password`, data)\n  }\n  // Notifications\n  static GetNotifications () {\n    return Get(`/app_notifications`)\n  }\n  // Create a Cancellation Request\n  static CreateCancelRequest (data) {\n    return Post('/cancellation_request', data)\n  }\n  static CancellationReasons () {\n    return Get('/cancellation_reasons')\n  }\n  static GetFeatures () {\n    return Get('/features')\n  }\n}\n\nclass Documents {\n  // Get documents\n  static List (params) {\n    return Get('/regular_documents/', params)\n  }\n  // Get document\n  static GetDocument (id) {\n    return Get('/regular_documents/' + id)\n  }\n  // Create document\n  static CreateDocument (data) {\n    return Post('/regular_documents/', data)\n  }\n  // Create document\n  static UpdateDocument (id, data) {\n    return Put('/regular_documents/' + id, data)\n  }\n  // Delete document by id\n  static DeleteDocument (id) {\n    return Delete('/regular_documents/' + id)\n  }\n}\n\nclass Downloads {\n  // Get List\n  static List (params) {\n    return Get('/downloads/', params)\n  }\n  // Delete one file\n  static DeleteFile (id) {\n    return Delete('/downloads/' + id)\n  }\n}\n\nclass TaxableEntities {\n  // Get Taxable Entities list\n  static GetTaxableEntities (params) {\n    return Get('/admin/taxable_entities/', params)\n  }\n}\n\nclass EditUser {\n  // Get current User data\n  static GetUserData () {\n    return Get('/profile/')\n  }\n  // Get User notifications settings\n  static GetUserNotifications () {\n    return Get('/notifications/')\n  }\n  // Set updated User data\n  static SetUserData (data) {\n    return Put('/profile/', data)\n  }\n  // Set updated User notifications\n  static SetUserNotifications (data) {\n    return Put('/notifications/', data)\n  }\n}\n\nclass Suscriptions {\n  // Gets client's acquired services list\n  static GetServices () {\n    return Get('/client/services')\n  }\n\n  // Gets payments log for a given client\n  static GetPaymentsLog () {\n    return Get('/client/payment_orders')\n  }\n\n  // Gets the pending payments details for a blocked client, so the client can pay the minimum\n  static GetPendingPayments () {\n    return Get('/client/payment_orders/pending_payments')\n  }\n\n  // Gets client's payment sources list\n  static GetPaymentSources () {\n    return Get('/client/payment_sources')\n  }\n\n  // Deletes a given payment source\n  static DeletePaymentSource (idCard) {\n    return Delete('/client/payment_sources/' + idCard)\n  }\n\n  // Makes a card the principal one for paying services\n  static MakePrincipalPaymentCard (idCard) {\n    return Put('/client/payment_sources/' + idCard)\n  }\n\n  // Adds a payment source\n  static CreatePaymentSource (cardInfo) {\n    return Post('/client/payment_sources', cardInfo)\n  }\n\n  // Pay services for a given client\n  static PayService (orderIds) {\n    return Post('/client/payment_orders', orderIds)\n  }\n}\n\nclass EditClient {\n  // Get Clients list\n  static GetEntityData (id) {\n    return Get('/user_taxable_entities/' + id)\n  }\n  // Get Clients list\n  static GetClientsList (params) {\n    return Get('/clients/', params)\n  }\n  // Get Employees list\n  static GetEmployeesList (params) {\n    return Get('/employees/', params)\n  }\n  // Get Employees list\n  static GetBranchesList (params) {\n    return Get('/branches/', params)\n  }\n  // Get selected Client data\n  static GetClientData (id) {\n    return Get('/clients/' + id)\n  }\n  // Get selected Employee data\n  static GetEmployeeData (id) {\n    return Get('/employees/' + id)\n  }\n  // Get selected Branch data\n  static GetBranchData (id) {\n    return Get(`/branches/${id}`)\n  }\n  // Update entity data\n  static SetEntitytData (id, data) {\n    return Put('/user_taxable_entities/' + id, data)\n  }\n  // Set current Employee data\n  static SetClientData (id, data) {\n    return Put('/clients/' + id, data)\n  }\n  // Set current Employee data\n  static SetEmployeeData (id, data) {\n    return Put('/employees/' + id, data)\n  }\n  // Set current Branch data\n  static SetBranchData (id, data) {\n    return Put(`/branches/${id}`, data)\n  }\n  // Create new Employee\n  static CreateClient (data) {\n    return Post('/clients/', data)\n  }\n  // Create new Employee\n  static CreateEmployee (data) {\n    return Post('/employees/', data)\n  }\n  // Create new Branch\n  static CreateBranch (data) {\n    return Post('/branches/', data)\n  }\n  // Change Employee Status (active: true/false)\n  static ChangeEmployeeStatus (id, request) {\n    return Put(`/employees/${id}/${request}`)\n  }\n  // Change Client Status (active: true/false)\n  static ChangeClientStatus (id, request) {\n    return Put(`/clients/${id}/${request}`)\n  }\n  // Deletes a branch\n  static DeleteBranch (id) {\n    return Delete(`/branches/${id}`)\n  }\n  // Deletes a client\n  static DeleteClient (id) {\n    return Delete(`/clients/${id}`)\n  }\n  // Deletes an employee\n  static DeleteEmployee (id) {\n    return Delete(`/employees/${id}`)\n  }\n  // Edit data for taxable entity\n  static EditEntity (data) {\n    return Put('/taxable_entity', data)\n  }\n  // Get URLS for SAT credentials or booleans if permissions don't allow it\n  static SatCredentials () {\n    return Get(`/sat_credentials`)\n  }\n  // Gets client summary data\n  static Summary () {\n    return Get('/taxable_entity/summary')\n  }\n}\n\nclass PaymentAccounts {\n  // Create new payment account\n  static Create (data) {\n    return Post('/payment_accounts/', data)\n  }\n  // Update payment account\n  static Update (id, data) {\n    return Put(`/payment_accounts/${id}`, data)\n  }\n  // List payment accounts\n  static List (params) {\n    return Get('/payment_accounts/', params)\n  }\n  // Toggles active/inactive a payment account\n  static ToggleStatus (id) {\n    return Put(`/payment_accounts/${id}/toggle_payment_account`)\n  }\n  // Gets the data for a single requested payment account\n  static GetPaymentAccount (id) {\n    return Get(`/payment_accounts/${id}`)\n  }\n  // Deletes a single payment account\n  static Delete (id) {\n    return Delete(`/payment_accounts/${id}`)\n  }\n  // Banks list\n  static GetBanksList () {\n    return Get(`/banks`)\n  }\n\n  // List payment accounts with cash accounts\n  static ListWithCashAccounts (params) {\n    return Get('/cash_payment_accounts/', params)\n  }\n}\n\nclass AccountingPeriods {\n  /**\n   * Get list all the periods with pagination\n   */\n  static GetAccoutingPeriods (params) {\n    return Get('/accounting_periods', params)\n  }\n\n  /**\n   * Get list all the periods of an taxable entity\n   * @returns {Promise<{pagination: Pagination, accounting_periods: AccountingPeriod[]}>}\n   */\n  static List () {\n    return Get('/accounting_periods')\n  }\n  /**\n   * Get details specific period\n   * @param {number | string} period\n   * @returns {Promise<{accounting_period: AccountingPeriod>}\n   */\n  static Details (period) {\n    return Get(`/accounting_periods/${period}`)\n  }\n\n  /**\n   * @param {number} periodId\n   * @returns {Promise<{assignments: Assignment[]}>}\n   */\n  static GetAssigments (periodId) {\n    return Get(`/client/accounting_periods/${periodId}/assignments/`)\n  }\n\n  /**\n   * @param {number} assigmentId\n   * @returns {Promise<{assigment: Assignment}>}\n   */\n  static UpdateAssigment (assigmentId) {\n    return Put(`/client/assignments/${assigmentId}/no_movements/`)\n  }\n\n  /**\n   * @param {number} assignmentId\n   * @param {AssigmentDocument} data\n   * @returns {Promise<{assignments: assignment}>}\n   */\n  static CreateBankStatement (assignmentId, data) {\n    return Put(`/client/assignments/${assignmentId}`, {\n      assignment: data\n    })\n  }\n}\n\nclass Conciliation {\n  // Get calculation period\n  static GetCalculations (period) {\n    return Get(`/accounting_periods/${period}/calculations`)\n  }\n  // Send Conciliation acepted or rejected\n  static SendCalculation (periodId, calculationId, params) {\n    return Put(\n      `/accounting_periods/${periodId}/calculations/${calculationId}`,\n      params\n    )\n  }\n}\n// Get deductible invoices in a calculation\nclass InvoicesConsiderated {\n  static List (params) {\n    return Get('/invoices', params)\n  }\n}\n\nclass Messages {\n  // List messages in view accounting periods\n  static ListMessages (period, params) {\n    return Get(`/accounting_periods/${period}/messages`, params)\n  }\n  // Create message from accounting periods\n  static CreateMessages (period, data) {\n    return Post(`/accounting_periods/${period}/messages`, data)\n  }\n}\n\nclass SentEmails {\n  // Get Emails List\n  static List (params) {\n    return Get('/sent_emails/', params)\n  }\n  // Get email with id\n  static Show (id) {\n    return Get(`/sent_emails/${id}`)\n  }\n}\n\nclass TaxStatements {\n  // Get tax statements list\n  static List (periodId) {\n    return Get(`/accounting_periods/${periodId}/tax_statements`)\n  }\n  // Get details from statements\n  static GetDetails (periodId, statementId) {\n    return Get(`/accounting_periods/${periodId}/tax_statements/${statementId}`)\n  }\n}\n\nclass Invoice {\n  // Serie and folio\n  static GetSerieAndFolio () {\n    return Get('/invoices/new')\n  }\n\n  // Cancel invoice\n  static Cancel (id) {\n    return Get(`/invoices/${id}/cancel`)\n  }\n\n  static AskStatus (id) {\n    return Get(`/invoices/${id}/cancelation_status`)\n  }\n\n  // List invoices\n  static List (params) {\n    return Get('/invoices', params)\n  }\n  // Return an invoice\n  static Show (id) {\n    return Get(`/invoices/${id}`)\n  }\n  // Create new invoice\n  static Create (data) {\n    return Post('/invoices', data)\n  }\n  // Create new regular invoice\n  static CreateRegular (data, isPreview) {\n    return Post('/create_invoice/regular', data, isPreview)\n  }\n  // Create new payroll invoice\n  static CreatePayroll (data, isPreview) {\n    return Post('/create_invoice/payroll', data, isPreview)\n  }\n  // Create new invoice with ine complement\n  static CreateIne (data, isPreview) {\n    return Post('/create_invoice/ine', data, isPreview)\n  }\n  // Create new invoice with local tax complement\n  static CreateLocalTax (data, isPreview) {\n    return Post('/create_invoice/local_tax', data, isPreview)\n  }\n  // Create new invoice with foreign trade (type i) complement\n  static CreateForeignTrade (data, isPreview) {\n    return Post('/create_invoice/foreign_trade', data, isPreview)\n  }\n  // Download XML\n  static Xml (id) {\n    return Get(`/invoices/${id}/xml`)\n  }\n  // Download PDF\n  static Pdf (id) {\n    return Get(`/invoices/${id}/pdf`)\n  }\n  // Triggers the Excel creation delayed job\n  static ExportInvoiceToExcel (params) {\n    return Get('/export_to_excel/regular', params)\n  }\n\n  static ExportPayrollToExcel (params) {\n    return Get('/export_to_excel/payroll', params)\n  }\n\n  static ExportPaymentToExcel (params) {\n    return Get('/export_to_excel/payment', params)\n  }\n  // Triggers the XML creation delayed job\n  static ExportToXml (params) {\n    return Get('/export_to_xml', params)\n  }\n  static GetUnits (params) {\n    return Get('/cfdi_units', params)\n  }\n  static GetProducts (params) {\n    return Get('/cfdi_products', params)\n  }\n  // Get frequently used data\n  static GetUsedData () {\n    return Get('/frequent_products')\n  }\n  static SendByEmail (invoiceId, data) {\n    return Post(`/invoices/${invoiceId}/send_email`, data)\n  }\n  // Get custom categories (currenty named sat_categories)\n  static SetCategory (id, data) {\n    return Put(`/invoices/${id}/category`, data)\n  }\n}\n\nclass MultipleInvoicing {\n  // Get list with invoice processes\n  static List (params) {\n    return Get('/invoice_imports', params)\n  }\n  // Get detail for process with id\n  static Show (id) {\n    return Get(`/invoice_imports/${id}`)\n  }\n  // Upload file for process\n  static Create (data) {\n    return Post('/invoice_imports', data)\n  }\n  // Upload file for process\n  static CreateThirdParty (data) {\n    return Post('/invoice_imports/create_third_party', data)\n  }\n  // Trigger stamping for regular invoices in process\n  static StampRegular (id) {\n    return Post(`/invoice_imports/${id}/stamp_regular`)\n  }\n  // Trigger stamping for third party invoices\n  static StampThirdParty (id) {\n    return Post(`/invoice_imports/${id}/stamp_third_party`)\n  }\n}\n\nclass CustomCategories {\n  // Get custom categories (currenty named sat_categories)\n  static List () {\n    return Get('/invoice_categories')\n  }\n  // Get custom categories (currenty named sat_categories)\n  static Create (data) {\n    return Post('/invoice_categories', data)\n  }\n}\n\nclass Reports {\n  // Invoice stats by category\n  static Categories (params) {\n    return Get('/reports/invoicing_by_category', params)\n  }\n\n  static Rankings (params) {\n    return Get('/reports/client_rankings', params)\n  }\n\n  static Behaviors (params) {\n    return Get('/reports/behavior_by_items', params)\n  }\n\n  static History (params) {\n    return Get('/reports/historical_behavior', params)\n  }\n}\n\nclass Dashboard {\n  static GetChartData (params) {\n    return Get('/dashboard', params)\n  }\n}\n\nclass Payments {\n  static Create (invoiceId, data) {\n    return Post(`/invoices/${invoiceId}/payments`, data)\n  }\n  static Update (id, data) {\n    return Put(`/payments/${id}`, data)\n  }\n  static Delete (id) {\n    return Delete(`/payments/${id}`)\n  }\n}\n\nclass Services {\n  // Send a postal code, receive address info\n  static PostalCode (params = {}) {\n    return axios.get(\n      'sepomex',\n      Object.assign({}, { ...SEPOMEX_CONFIG }, { params })\n    )\n  }\n}\n\nclass BanksSynchronization {\n  static AddBank (data) {\n    return Post(`/client/smart_sync/account_connections`, data)\n  }\n\n  static SaveSelectedAccount (data) {\n    return Post(`/client/smart_sync/bank_accounts`, data)\n  }\n\n  static AskStatus (institution) {\n    return Get(`/client/smart_sync/account_connections/status/${institution}`)\n  }\n\n  static GetResponse (bank) {\n    return Get(`/client/smart_sync/account_connections/${bank}`)\n  }\n\n  static BankAccounts (bank) {\n    return Get(`/client/smart_sync/bank_accounts?bank_name=${bank}`)\n  }\n  static GetBankList () {\n    return Get(`/client/smart_sync/account_connections`)\n  }\n\n  static WidgetToken () {\n    return Get('/client/smart_sync/tokens')\n  }\n}\nclass Inventories {\n  static GetProducts (params) {\n    return Get('/products/', params)\n  }\n\n  static MassivelyInsertProducts (productsImport) {\n    return Post('/product_import', productsImport)\n  }\n\n  static CreateProduct (product) {\n    return Post('/products', product)\n  }\n\n  static DeleteProduct (id) {\n    return Delete(`/products/${id}`)\n  }\n\n  static UpdateProduct (id, data) {\n    return Put(`/products/${id}`, data)\n  }\n\n  static GetRecords (params) {\n    return Get(`/inventory_records`, params)\n  }\n}\n\nclass Restrictions {\n  static GetRestrictions () {\n    return Get('/client/restrictions')\n  }\n}\n\nclass Premium {\n  static CreatePremium (cardInfo) {\n    return Post('/client/subscriptions', cardInfo)\n  }\n}\n\nexport default {\n  init,\n  User,\n  Documents,\n  Downloads,\n  PaymentAccounts,\n  TaxableEntities,\n  EditUser,\n  Suscriptions,\n  EditClient,\n  SentEmails,\n  TaxStatements,\n  Invoice,\n  MultipleInvoicing,\n  CustomCategories,\n  Reports,\n  Dashboard,\n  Payments,\n  Services,\n  AccountingPeriods,\n  Messages,\n  Conciliation,\n  InvoicesConsiderated,\n  BanksSynchronization,\n  Inventories,\n  Restrictions,\n  Premium\n}\n"]},"metadata":{},"sourceType":"module"}