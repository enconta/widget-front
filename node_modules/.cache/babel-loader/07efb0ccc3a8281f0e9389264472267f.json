{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/chart/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { BarChart, Bar, Legend, ResponsiveContainer, YAxis, XAxis, ReferenceLine, Tooltip } from 'recharts';\nimport accounting from 'accounting';\nimport _isEqual from 'lodash/isEqual'; // Chart component will render as many bar gropus as elements in the data prop array (required) are passed,\n// the maxValue prop is also required and sets a top value for the Y axis,\n// the bars prop is needed alongside the data prop to rander the bar groups,\n// it tells how many bars and the style for each bar in each group\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart() {\n    _classCallCheck(this, Chart);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Chart).apply(this, arguments));\n  }\n\n  _createClass(Chart, [{\n    key: \"areSameArrays\",\n    value: function areSameArrays(firstArray, secondArray) {\n      // First evaluates if the length are different, if so, arrays are not the same\n      if (firstArray.length !== secondArray.length) return false; // Evaluates every element from the first array and compares it\n      // with the element in the same position in the second array, return if all of them are the same or not\n\n      return firstArray.every(function (elem, i) {\n        return _isEqual(elem, secondArray[i]);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      // Evaluates if current arrays data is the same as nextState arrays data\n      // if some array is the different, trigger the render\n      return !this.areSameArrays(this.props.data, nextProps.data);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ResponsiveContainer, {\n        width: \"100%\",\n        height: 331,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(BarChart, {\n        width: 600,\n        height: 300,\n        data: this.props.data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(XAxis, {\n        type: \"category\",\n        dataKey: \"month\",\n        name: \"month\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        type: \"number\",\n        tickFormatter: function tickFormatter(val) {\n          return accounting.formatMoney(val, '$ ', 0);\n        },\n        domain: [0, 'auto'],\n        width: 110,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(ReferenceLine, {\n        y: 0,\n        stroke: \"#E70094\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        formatter: function formatter(val) {\n          return accounting.formatMoney(val, '$ ', 0);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(Legend, {\n        align: \"right\",\n        verticalAlign: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), this.props.bars.map(function (bar, i) {\n        return React.createElement(Bar, {\n          key: bar.dataKey + i,\n          dataKey: bar.dataKey,\n          name: bar.dataName,\n          fill: bar.fill || '#E70094',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nChart.propTypes = {\n  data: PropTypes.array.isRequired,\n  bars: PropTypes.array.isRequired\n};\nexport default Chart;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/chart/index.js"],"names":["React","Component","PropTypes","BarChart","Bar","Legend","ResponsiveContainer","YAxis","XAxis","ReferenceLine","Tooltip","accounting","_isEqual","Chart","firstArray","secondArray","length","every","elem","i","nextProps","areSameArrays","props","data","top","right","left","bottom","val","formatMoney","bars","map","bar","dataKey","dataName","fill","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n  YAxis,\n  XAxis,\n  ReferenceLine,\n  Tooltip\n} from 'recharts'\nimport accounting from 'accounting'\nimport _isEqual from 'lodash/isEqual'\n\n// Chart component will render as many bar gropus as elements in the data prop array (required) are passed,\n// the maxValue prop is also required and sets a top value for the Y axis,\n// the bars prop is needed alongside the data prop to rander the bar groups,\n// it tells how many bars and the style for each bar in each group\n\nclass Chart extends Component {\n  areSameArrays (firstArray, secondArray) {\n    // First evaluates if the length are different, if so, arrays are not the same\n    if (firstArray.length !== secondArray.length) return false\n    // Evaluates every element from the first array and compares it\n    // with the element in the same position in the second array, return if all of them are the same or not\n    return firstArray.every((elem, i) => _isEqual(elem, secondArray[i]))\n  }\n\n  shouldComponentUpdate (nextProps) {\n    // Evaluates if current arrays data is the same as nextState arrays data\n    // if some array is the different, trigger the render\n    return !this.areSameArrays(this.props.data, nextProps.data)\n  }\n  render () {\n    return (\n      <ResponsiveContainer width='100%' height={331}>\n        <BarChart\n          width={600}\n          height={300}\n          data={this.props.data}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <XAxis type='category' dataKey='month' name='month' />\n          <YAxis\n            type='number'\n            tickFormatter={val => accounting.formatMoney(val, '$ ', 0)}\n            domain={[0, 'auto']}\n            width={110}\n          />\n          <ReferenceLine y={0} stroke='#E70094' />\n\n          <Tooltip formatter={val => accounting.formatMoney(val, '$ ', 0)} />\n          <Legend align='right' verticalAlign='top' />\n          {this.props.bars.map((bar, i) => {\n            return (\n              <Bar\n                key={bar.dataKey + i}\n                dataKey={bar.dataKey}\n                name={bar.dataName}\n                fill={bar.fill || '#E70094'}\n              />\n            )\n          })}\n        </BarChart>\n      </ResponsiveContainer>\n    )\n  }\n}\n\nChart.propTypes = {\n  data: PropTypes.array.isRequired,\n  bars: PropTypes.array.isRequired\n}\n\nexport default Chart\n"]},"metadata":{},"sourceType":"module"}