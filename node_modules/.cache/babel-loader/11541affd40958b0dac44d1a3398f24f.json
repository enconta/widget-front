{"ast":null,"code":"import _regeneratorRuntime from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AppDispatcher from '../dispatcher';\nimport API from '../api';\nexport default {\n  listMessages: function () {\n    var _listMessages = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(_ref) {\n      var period, query, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              period = _ref.period, query = _ref.query;\n              _context.next = 3;\n              return API.Messages.ListMessages(period, query);\n\n            case 3:\n              response = _context.sent;\n              AppDispatcher.handleAction({\n                actionType: 'SET_MESSAGES',\n                data: response\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function listMessages(_x) {\n      return _listMessages.apply(this, arguments);\n    }\n\n    return listMessages;\n  }(),\n  createMessage: function () {\n    var _createMessage = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(_ref2) {\n      var period, messageData, _ref3, message;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              period = _ref2.period, messageData = _ref2.messageData;\n              _context2.next = 3;\n              return API.Messages.CreateMessages(period, messageData);\n\n            case 3:\n              _ref3 = _context2.sent;\n              message = _ref3.message;\n              AppDispatcher.handleAction({\n                actionType: 'ADD_MESSAGE',\n                data: message\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function createMessage(_x2) {\n      return _createMessage.apply(this, arguments);\n    }\n\n    return createMessage;\n  }(),\n  addMessage: function addMessage(message) {\n    AppDispatcher.handleAction({\n      actionType: 'ADD_MESSAGE',\n      data: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/messages.js"],"names":["AppDispatcher","API","listMessages","period","query","Messages","ListMessages","response","handleAction","actionType","data","createMessage","messageData","CreateMessages","message","addMessage"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,eAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,eAAe;AACPC,EAAAA,YADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACSC,cAAAA,MADT,QACSA,MADT,EACiBC,KADjB,QACiBA,KADjB;AAAA;AAAA,qBAEYH,GAAG,CAACI,QAAJ,CAAaC,YAAb,CAA0BH,MAA1B,EAAkCC,KAAlC,CAFZ;;AAAA;AAELG,cAAAA,QAFK;AAGXP,cAAAA,aAAa,CAACQ,YAAd,CAA2B;AACzBC,gBAAAA,UAAU,EAAE,cADa;AAEzBC,gBAAAA,IAAI,EAAEH;AAFmB,eAA3B;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AASPI,EAAAA,aATO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASUR,cAAAA,MATV,SASUA,MATV,EASkBS,WATlB,SASkBA,WATlB;AAAA;AAAA,qBAUeX,GAAG,CAACI,QAAJ,CAAaQ,cAAb,CAA4BV,MAA5B,EAAoCS,WAApC,CAVf;;AAAA;AAAA;AAUHE,cAAAA,OAVG,SAUHA,OAVG;AAWXd,cAAAA,aAAa,CAACQ,YAAd,CAA2B;AACzBC,gBAAAA,UAAU,EAAE,aADa;AAEzBC,gBAAAA,IAAI,EAAEI;AAFmB,eAA3B;;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiBbC,EAAAA,UAjBa,sBAiBDD,OAjBC,EAiBQ;AACnBd,IAAAA,aAAa,CAACQ,YAAd,CAA2B;AACzBC,MAAAA,UAAU,EAAE,aADa;AAEzBC,MAAAA,IAAI,EAAEI;AAFmB,KAA3B;AAID;AAtBY,CAAf","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\n\nexport default {\n  async listMessages ({ period, query }) {\n    const response = await API.Messages.ListMessages(period, query)\n    AppDispatcher.handleAction({\n      actionType: 'SET_MESSAGES',\n      data: response\n    })\n  },\n\n  async createMessage ({ period, messageData }) {\n    const { message } = await API.Messages.CreateMessages(period, messageData)\n    AppDispatcher.handleAction({\n      actionType: 'ADD_MESSAGE',\n      data: message\n    })\n  },\n\n  addMessage (message) {\n    AppDispatcher.handleAction({\n      actionType: 'ADD_MESSAGE',\n      data: message\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}