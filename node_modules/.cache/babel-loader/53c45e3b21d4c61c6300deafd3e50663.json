{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseStore from './baseStore';\n\nvar SessionStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(SessionStore, _BaseStore);\n\n  function SessionStore() {\n    var _this;\n\n    _classCallCheck(this, SessionStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SessionStore).call(this));\n    _this.preloginPage = '/dashboard';\n    _this.user = {\n      name: '',\n      email: '',\n      role: 'account_holder',\n      keys: false\n    };\n    _this.currentEntity = {\n      id: '',\n      rfc: '',\n      legal_name: '',\n      plaform_status: 'demo',\n      active: false\n    };\n    _this.taxableEntities = [];\n    _this.features = [];\n    _this.actions = {\n      PRELOGIN_PAGE_SET: function PRELOGIN_PAGE_SET(action) {\n        _this.setPreloginPage(action.data);\n      },\n      USER_SET: function USER_SET(action) {\n        _this.setUser(action.data);\n      },\n      USER_ENTITIES_RECEIVED: function USER_ENTITIES_RECEIVED(action) {\n        _this.setTaxableEntities(action.data);\n      },\n      CURRENT_ENTITY_SET: function CURRENT_ENTITY_SET(action) {\n        _this.setCurrentEntity(action.data);\n      },\n      CLEAR_SESSION: function CLEAR_SESSION() {\n        _this.clearAll();\n      },\n      FEATURES_RECEIVED: function FEATURES_RECEIVED(action) {\n        _this.setFeatures(action.data);\n      }\n    };\n    return _this;\n  } // Returns stored pre-logon page requested by the user\n\n\n  _createClass(SessionStore, [{\n    key: \"getPreloginPage\",\n    value: function getPreloginPage() {\n      return this.preloginPage;\n    } // Returns stored User, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      return this.user;\n    } // Returns stored Current Entity, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getCurrentEntity\",\n    value: function getCurrentEntity() {\n      return this.currentEntity;\n    } // Returns stored Taxable Entities, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getTaxableEntities\",\n    value: function getTaxableEntities() {\n      return this.taxableEntities;\n    } // Returns the type of legal entity, it can be individual or business\n\n  }, {\n    key: \"getLegalEntityKind\",\n    value: function getLegalEntityKind() {\n      return this.getCurrentEntity().legal_type;\n    } // Sets the pre-login page requested by the user\n\n  }, {\n    key: \"setPreloginPage\",\n    value: function setPreloginPage(page) {\n      this.preloginPage = page === '/' ? '/dashboard' : page;\n    } // Sets the user for the session when succesfully login\n\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this.user = {\n        id: user.id,\n        name: \"\".concat(user.first_name, \" \").concat(user.last_name),\n        email: user.email,\n        role: user.role,\n        keys: user.keys\n      };\n    } // Sets the available taxable entities for the session\n\n  }, {\n    key: \"setTaxableEntities\",\n    value: function setTaxableEntities(taxableEntities) {\n      this.taxableEntities = taxableEntities;\n    } // Sets the current taxable entity for the session\n\n  }, {\n    key: \"setCurrentEntity\",\n    value: function setCurrentEntity(currentEntity) {\n      this.currentEntity = currentEntity;\n    }\n  }, {\n    key: \"clearUser\",\n    value: function clearUser() {\n      this.user = {\n        name: '',\n        email: '',\n        role: 'account_holder',\n        keys: false\n      };\n    } // Clears the current entity to the default\n\n  }, {\n    key: \"clearCurrentEntity\",\n    value: function clearCurrentEntity() {\n      this.currentEntity = {\n        id: '',\n        rfc: '',\n        legal_name: '',\n        plaform_status: 'demo',\n        active: false\n      };\n    } // Clears the available entities to the default\n\n  }, {\n    key: \"clearTaxableEntites\",\n    value: function clearTaxableEntites() {\n      this.taxableEntities = [];\n    } // Clears all to the default values\n\n  }, {\n    key: \"clearAll\",\n    value: function clearAll() {\n      this.clearUser();\n      this.clearCurrentEntity();\n      this.clearTaxableEntites();\n    }\n  }, {\n    key: \"setFeatures\",\n    value: function setFeatures(_ref) {\n      var features = _ref.features;\n      this.features = features;\n    }\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures() {\n      return this.features;\n    }\n  }]);\n\n  return SessionStore;\n}(BaseStore);\n\nexport default SessionStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/session.js"],"names":["BaseStore","SessionStore","preloginPage","user","name","email","role","keys","currentEntity","id","rfc","legal_name","plaform_status","active","taxableEntities","features","actions","PRELOGIN_PAGE_SET","action","setPreloginPage","data","USER_SET","setUser","USER_ENTITIES_RECEIVED","setTaxableEntities","CURRENT_ENTITY_SET","setCurrentEntity","CLEAR_SESSION","clearAll","FEATURES_RECEIVED","setFeatures","getCurrentEntity","legal_type","page","first_name","last_name","clearUser","clearCurrentEntity","clearTaxableEntites","getInstance"],"mappings":"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","sourcesContent":["import BaseStore from './baseStore'\n\nclass SessionStore extends BaseStore {\n  constructor () {\n    super()\n    this.preloginPage = '/dashboard'\n    this.user = {\n      name: '',\n      email: '',\n      role: 'account_holder',\n      keys: false\n    }\n    this.currentEntity = {\n      id: '',\n      rfc: '',\n      legal_name: '',\n      plaform_status: 'demo',\n      active: false\n    }\n    this.taxableEntities = []\n    this.features = []\n\n    this.actions = {\n      PRELOGIN_PAGE_SET: action => {\n        this.setPreloginPage(action.data)\n      },\n      USER_SET: action => {\n        this.setUser(action.data)\n      },\n      USER_ENTITIES_RECEIVED: action => {\n        this.setTaxableEntities(action.data)\n      },\n      CURRENT_ENTITY_SET: action => {\n        this.setCurrentEntity(action.data)\n      },\n      CLEAR_SESSION: () => {\n        this.clearAll()\n      },\n      FEATURES_RECEIVED: action => {\n        this.setFeatures(action.data)\n      }\n    }\n  }\n\n  // Returns stored pre-logon page requested by the user\n  getPreloginPage () {\n    return this.preloginPage\n  }\n\n  // Returns stored User, this is used when explicitly you want to know it\n  getUser () {\n    return this.user\n  }\n\n  // Returns stored Current Entity, this is used when explicitly you want to know it\n  getCurrentEntity () {\n    return this.currentEntity\n  }\n\n  // Returns stored Taxable Entities, this is used when explicitly you want to know it\n  getTaxableEntities () {\n    return this.taxableEntities\n  }\n\n  // Returns the type of legal entity, it can be individual or business\n  getLegalEntityKind () {\n    return this.getCurrentEntity().legal_type\n  }\n\n  // Sets the pre-login page requested by the user\n  setPreloginPage (page) {\n    this.preloginPage = page === '/' ? '/dashboard' : page\n  }\n\n  // Sets the user for the session when succesfully login\n  setUser (user) {\n    this.user = {\n      id: user.id,\n      name: `${user.first_name} ${user.last_name}`,\n      email: user.email,\n      role: user.role,\n      keys: user.keys\n    }\n  }\n\n  // Sets the available taxable entities for the session\n  setTaxableEntities (taxableEntities) {\n    this.taxableEntities = taxableEntities\n  }\n\n  // Sets the current taxable entity for the session\n  setCurrentEntity (currentEntity) {\n    this.currentEntity = currentEntity\n  }\n\n  clearUser () {\n    this.user = {\n      name: '',\n      email: '',\n      role: 'account_holder',\n      keys: false\n    }\n  }\n\n  // Clears the current entity to the default\n  clearCurrentEntity () {\n    this.currentEntity = {\n      id: '',\n      rfc: '',\n      legal_name: '',\n      plaform_status: 'demo',\n      active: false\n    }\n  }\n\n  // Clears the available entities to the default\n  clearTaxableEntites () {\n    this.taxableEntities = []\n  }\n\n  // Clears all to the default values\n  clearAll () {\n    this.clearUser()\n    this.clearCurrentEntity()\n    this.clearTaxableEntites()\n  }\n  setFeatures ({ features }) {\n    this.features = features\n  }\n  getFeatures () {\n    return this.features\n  }\n}\n\nexport default SessionStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}