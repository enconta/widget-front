{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\n\nvar Dispatcher = function () {\n  function Dispatcher(queue, api, options) {\n    this._retries = 0;\n    this._timerID = 0;\n    this._duration = 0;\n    this._api = api;\n    this._queue = queue;\n    this.options = __assign({\n      limit: 5,\n      initialDuration: 1000\n    }, options);\n    this.reset();\n  }\n\n  Dispatcher.prototype.schedule = function (time) {\n    var _this = this;\n\n    if (time === void 0) {\n      time = this._duration;\n    }\n\n    var BACKOFF_FACTOR = 1.3;\n\n    var cb = function cb() {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, _b, span, e_1, expDuration, e_2_1;\n\n        var e_2, _c;\n\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              _d.trys.push([0, 7, 8, 9]);\n\n              _a = __values(this._queue.drain()), _b = _a.next();\n              _d.label = 1;\n\n            case 1:\n              if (!!_b.done) return [3, 6];\n              span = _b.value;\n              if (!span) return [2];\n              _d.label = 2;\n\n            case 2:\n              _d.trys.push([2, 4,, 5]);\n\n              return [4, this._api.push(span)];\n\n            case 3:\n              _d.sent();\n\n              return [3, 5];\n\n            case 4:\n              e_1 = _d.sent();\n              expDuration = Math.floor(Math.pow(time, BACKOFF_FACTOR));\n              this._retries = this._retries - 1;\n\n              if (this._retries === 0) {\n                this.reset();\n              } else {\n                this._queue.push(span);\n\n                this._timerID = this.schedule(expDuration);\n              }\n\n              return [2];\n\n            case 5:\n              _b = _a.next();\n              return [3, 1];\n\n            case 6:\n              return [3, 9];\n\n            case 7:\n              e_2_1 = _d.sent();\n              e_2 = {\n                error: e_2_1\n              };\n              return [3, 9];\n\n            case 8:\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n\n              return [7];\n\n            case 9:\n              this.reset();\n              return [2];\n          }\n        });\n      });\n    };\n\n    return window.setTimeout(cb, time);\n  };\n\n  Dispatcher.prototype.reset = function () {\n    var _a = this.options,\n        limit = _a.limit,\n        initialDuration = _a.initialDuration;\n    this._retries = limit;\n    this._duration = initialDuration;\n  };\n\n  return Dispatcher;\n}();\n\nexport { Dispatcher };","map":null,"metadata":{},"sourceType":"module"}