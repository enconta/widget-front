{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport API from '../api'; // This action creator sends the type of action and the params (if any) to the dispatcher\n\nexport default {\n  create: function create(account) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    return API.PaymentAccounts.Create(account.data).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  update: function update(account) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    return API.PaymentAccounts.Update(account.id, account.data).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  getList: function getList(params) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    API.PaymentAccounts.List(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_ACCOUNTS_LIST_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  toggleStatus: function toggleStatus(id) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    return API.PaymentAccounts.ToggleStatus(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_ACCOUNTS_LIST_STATUS_CHANGED',\n        data: response\n      });\n      return {\n        message: 'Estatus actualizado'\n      };\n    }).catch(function () {\n      return {\n        message: 'Hubo un error al actualizar el estado'\n      };\n    });\n  },\n  getPaymentAccount: function getPaymentAccount(id) {\n    API.PaymentAccounts.GetPaymentAccount(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_ACCOUNT_RECEIVED',\n        data: response\n      });\n    });\n  },\n  // Deletes the payment acount with the passed id\n  deletePaymentAccount: function deletePaymentAccount(id) {\n    return API.PaymentAccounts.Delete(id);\n  },\n  // Resets the current document to its defaults in the store\n  clearCurrent: function clearCurrent() {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_PAYMENT_ACCOUNT'\n    });\n  },\n  getBanksList: function getBanksList() {\n    // Request to get banks list\n    return API.PaymentAccounts.GetBanksList().then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'BANKS_LIST_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  getListWithCashAccounts: function getListWithCashAccounts(params) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    API.PaymentAccounts.ListWithCashAccounts(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_ACCOUNTS_LIST_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/paymentAccounts.js"],"names":["AppDispatcher","API","create","account","PaymentAccounts","Create","data","catch","error","AppSignal","sendError","update","Update","id","getList","params","List","then","response","handleAction","actionType","toggleStatus","ToggleStatus","message","getPaymentAccount","GetPaymentAccount","deletePaymentAccount","Delete","clearCurrent","getBanksList","GetBanksList","getListWithCashAccounts","ListWithCashAccounts"],"mappings":"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","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\n\n// This action creator sends the type of action and the params (if any) to the dispatcher\nexport default {\n  create (account) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    return API.PaymentAccounts.Create(account.data).catch(error => {\n      AppSignal.sendError(error)\n      throw error\n    })\n  },\n\n  update (account) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    return API.PaymentAccounts.Update(account.id, account.data).catch(error => {\n      AppSignal.sendError(error)\n      throw error\n    })\n  },\n\n  getList (params) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    API.PaymentAccounts.List(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_ACCOUNTS_LIST_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  toggleStatus (id) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    return API.PaymentAccounts.ToggleStatus(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_ACCOUNTS_LIST_STATUS_CHANGED',\n          data: response\n        })\n        return { message: 'Estatus actualizado' }\n      })\n      .catch(() => {\n        return { message: 'Hubo un error al actualizar el estado' }\n      })\n  },\n\n  getPaymentAccount (id) {\n    API.PaymentAccounts.GetPaymentAccount(id).then(response => {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_ACCOUNT_RECEIVED',\n        data: response\n      })\n    })\n  },\n\n  // Deletes the payment acount with the passed id\n  deletePaymentAccount (id) {\n    return API.PaymentAccounts.Delete(id)\n  },\n\n  // Resets the current document to its defaults in the store\n  clearCurrent () {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_PAYMENT_ACCOUNT'\n    })\n  },\n  getBanksList () {\n    // Request to get banks list\n    return API.PaymentAccounts.GetBanksList()\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'BANKS_LIST_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n  getListWithCashAccounts (params) {\n    // Request the payment accounts list to the API, then triggers the change on the store if success\n    API.PaymentAccounts.ListWithCashAccounts(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_ACCOUNTS_LIST_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}