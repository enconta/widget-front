{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/reports/itemsBehaviors/components/Items.js\";\nimport React, { Component } from 'react';\nimport SelectField from 'shared/selectField';\nimport IconButton from 'shared/iconButton';\nimport Loading from 'shared/loading';\nimport NotificationsActions from 'actions/notifications';\nimport Chart from './chart';\nimport accounting from 'accounting';\nimport { calculateDates } from '../../rankings/utils';\nimport { MONTHS, YEARS } from 'shared/catalogs';\nimport { PERIODS } from '../../constants';\nimport { calculateData, calculateColors } from '../utils';\nimport moment from 'moment';\nimport _capitalize from 'lodash/capitalize';\nimport API from 'api';\nimport AppSignal from 'appsignal';\n\nvar Items =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Items, _Component);\n\n  function Items() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Items);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Items)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: false,\n      data: [],\n      // datos a ser mostrados\n      items: [],\n      // labels que contienen los invoices (sin repetirse)\n      totalByItem: {},\n      // key el label, valor el total\n      totalByMonth: {},\n      // key el mes (Feb, Mar, etc), valor el total\n      total: 0,\n      // Total global\n      filteredItems: [],\n      // Cuales items han sido seleccionados\n      filters: {\n        period: 'trimester',\n        month: moment().month(),\n        // Mes anterior, (los meses en moment son index 0)\n        year: YEARS[0].id // El primer item de YEARS es el actual\n\n      }\n    };\n    _this.loadData =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var type, filteredItems, _calculateDates, startMonth, endMonth, _ref2, report, dataCalculated;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              type = _this.props.type;\n              filteredItems = _this.state.filteredItems;\n              _calculateDates = calculateDates(_this.state.filters), startMonth = _calculateDates.startMonth, endMonth = _calculateDates.endMonth;\n\n              _this.setState({\n                loading: true\n              });\n\n              _context.prev = 4;\n              _context.next = 7;\n              return API.Reports.Behaviors({\n                type: type,\n                end_month: endMonth.format('YYYY-MM'),\n                start_month: startMonth.format('YYYY-MM')\n              });\n\n            case 7:\n              _ref2 = _context.sent;\n              report = _ref2.report;\n              dataCalculated = calculateData({\n                report: report,\n                filteredItems: filteredItems,\n                startMonth: startMonth,\n                endMonth: endMonth\n              }); // Es necesario guardar el reporte que llega de back,\n              // para no tener que hace un query cada vez que selecciona un item\n\n              _this.setState(_objectSpread({}, dataCalculated, {\n                report: report,\n                loading: false\n              }));\n\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](4);\n              AppSignal.sendError(_context.t0);\n              NotificationsActions.error('No se ha podido cargar el historial');\n\n              _this.setState({\n                loading: false\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 13]]);\n    }));\n\n    _this.onChangeFilter = function (field) {\n      return function (e) {\n        var value = e.target.value;\n\n        _this.setState(function (state) {\n          return {\n            filters: _objectSpread({}, state.filters, _defineProperty({}, field, value))\n          };\n        }, _this.loadData);\n      };\n    };\n\n    _this.onFilterItem = function (e) {\n      var value = e.target.value;\n\n      if (_this.state.filteredItems.length === 5) {\n        NotificationsActions.info('Sólo es posible comparar 5 rubros a la vez');\n        return;\n      } // no se necesita evaluar si el item ya está seleccionado\n      // el componente deshabilita las opciones ya seleccionadas\n\n\n      _this.setState(function (state) {\n        var filteredItems = [].concat(_toConsumableArray(state.filteredItems), [value]);\n        return _objectSpread({\n          filteredItems: filteredItems\n        }, calculateData(_objectSpread({\n          report: state.report,\n          filteredItems: filteredItems\n        }, calculateDates(state.filters))));\n      });\n    };\n\n    _this.onRemoveFilterItem = function (item) {\n      _this.setState(function (state) {\n        var filteredItems = state.filteredItems.filter(function (filteredItem) {\n          return filteredItem !== item;\n        });\n        return _objectSpread({\n          filteredItems: filteredItems\n        }, calculateData(_objectSpread({\n          report: state.report,\n          filteredItems: filteredItems\n        }, calculateDates(state.filters))));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Items, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          filters = _this$state.filters,\n          data = _this$state.data,\n          totalSum = _this$state.total,\n          items = _this$state.items,\n          totalByItem = _this$state.totalByItem,\n          totalByMonth = _this$state.totalByMonth,\n          filteredItems = _this$state.filteredItems,\n          loading = _this$state.loading;\n      var colors = filteredItems.reduce(calculateColors, {\n        total: '#F5F5F5'\n      });\n      var type = this.props.type;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rubrosChart__filters rubrosChart__filters-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rubrosChart__filters rubrosChart__filters-filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        label: \"Periodo\",\n        options: PERIODS,\n        value: filters.period,\n        onChange: this.onChangeFilter('period'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"rubrosChart__filters rubrosChart__filters-filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        label: \"Mes final\",\n        options: MONTHS,\n        value: filters.month,\n        onChange: this.onChangeFilter('month'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"rubrosChart__filters rubrosChart__filters-filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        label: \"A\\xF1o\",\n        options: YEARS,\n        value: filters.year,\n        onChange: this.onChangeFilter('year'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        data: data,\n        items: items,\n        filteredItems: filteredItems,\n        colors: colors,\n        totalByMonth: totalByMonth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, loading ? React.createElement(Loading, {\n        size: \"24\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"marginBottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"rubrosChart rubrosChart__table-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, type === 'incomes' ? 'Ingreso total del periodo:' : 'Gasto total del periodo'), React.createElement(\"p\", {\n        className: \"rubrosChart rubrosChart__table-amount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, accounting.formatMoney(totalSum, '$ ', 0))), React.createElement(\"div\", {\n        style: {\n          margin: '1em 0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        placeholder: \"Selecciona rubros a comparar\",\n        disabledOptions: filteredItems,\n        options: items.filter(function (item) {\n          return item !== 'total';\n        }).map(function (item) {\n          return {\n            id: item,\n            label: _capitalize(item)\n          };\n        }),\n        onChange: this.onFilterItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })), React.createElement(\"table\", {\n        className: \"rubrosChart rubrosChart__table-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, filteredItems.map(function (item) {\n        return React.createElement(\"tr\", {\n          key: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          className: \"rubrosChart colorIcon\",\n          style: {\n            backgroundColor: colors[item]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, _capitalize(item)), React.createElement(\"td\", {\n          className: \"amount\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, accounting.formatMoney(totalByItem[item], '$ ')), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          icon: \"close\",\n          tooltip: \"Remover rubro\",\n          onClick: function onClick() {\n            return _this2.onRemoveFilterItem(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        })));\n      }))))));\n    }\n  }]);\n\n  return Items;\n}(Component);\n\nexport { Items as default };","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/reports/itemsBehaviors/components/Items.js"],"names":["React","Component","SelectField","IconButton","Loading","NotificationsActions","Chart","accounting","calculateDates","MONTHS","YEARS","PERIODS","calculateData","calculateColors","moment","_capitalize","API","AppSignal","Items","state","loading","data","items","totalByItem","totalByMonth","total","filteredItems","filters","period","month","year","id","loadData","type","props","startMonth","endMonth","setState","Reports","Behaviors","end_month","format","start_month","report","dataCalculated","sendError","error","onChangeFilter","field","e","value","target","onFilterItem","length","info","onRemoveFilterItem","item","filter","filteredItem","totalSum","colors","reduce","formatMoney","margin","map","label","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport SelectField from 'shared/selectField'\nimport IconButton from 'shared/iconButton'\nimport Loading from 'shared/loading'\nimport NotificationsActions from 'actions/notifications'\nimport Chart from './chart'\nimport accounting from 'accounting'\nimport { calculateDates } from '../../rankings/utils'\nimport { MONTHS, YEARS } from 'shared/catalogs'\nimport { PERIODS } from '../../constants'\nimport { calculateData, calculateColors } from '../utils'\nimport moment from 'moment'\nimport _capitalize from 'lodash/capitalize'\nimport API from 'api'\nimport AppSignal from 'appsignal'\n\nexport default class Items extends Component {\n  state = {\n    loading: false,\n    data: [], // datos a ser mostrados\n    items: [], // labels que contienen los invoices (sin repetirse)\n    totalByItem: {}, // key el label, valor el total\n    totalByMonth: {}, // key el mes (Feb, Mar, etc), valor el total\n    total: 0, // Total global\n    filteredItems: [], // Cuales items han sido seleccionados\n    filters: {\n      period: 'trimester',\n      month: moment().month(), // Mes anterior, (los meses en moment son index 0)\n      year: YEARS[0].id // El primer item de YEARS es el actual\n    }\n  }\n\n  componentDidMount () {\n    this.loadData()\n  }\n\n  loadData = async () => {\n    const { type } = this.props\n    const { filteredItems } = this.state\n    const { startMonth, endMonth } = calculateDates(this.state.filters)\n    this.setState({ loading: true })\n    try {\n      const { report } = await API.Reports.Behaviors({\n        type,\n        end_month: endMonth.format('YYYY-MM'),\n        start_month: startMonth.format('YYYY-MM')\n      })\n\n      const dataCalculated = calculateData({\n        report,\n        filteredItems,\n        startMonth,\n        endMonth\n      })\n\n      // Es necesario guardar el reporte que llega de back,\n      // para no tener que hace un query cada vez que selecciona un item\n      this.setState({ ...dataCalculated, report, loading: false })\n    } catch (error) {\n      AppSignal.sendError(error)\n      NotificationsActions.error('No se ha podido cargar el historial')\n      this.setState({ loading: false })\n    }\n  }\n\n  onChangeFilter = field => e => {\n    const { value } = e.target\n\n    this.setState(\n      state => ({ filters: { ...state.filters, [field]: value } }),\n      this.loadData\n    )\n  }\n\n  onFilterItem = e => {\n    const { value } = e.target\n\n    if (this.state.filteredItems.length === 5) {\n      NotificationsActions.info('Sólo es posible comparar 5 rubros a la vez')\n      return\n    }\n\n    // no se necesita evaluar si el item ya está seleccionado\n    // el componente deshabilita las opciones ya seleccionadas\n    this.setState(state => {\n      const filteredItems = [...state.filteredItems, value]\n      return {\n        filteredItems,\n        ...calculateData({\n          report: state.report,\n          filteredItems,\n          ...calculateDates(state.filters)\n        })\n      }\n    })\n  }\n\n  onRemoveFilterItem = item => {\n    this.setState(state => {\n      const filteredItems = state.filteredItems.filter(\n        filteredItem => filteredItem !== item\n      )\n\n      return {\n        filteredItems,\n        ...calculateData({\n          report: state.report,\n          filteredItems,\n          ...calculateDates(state.filters)\n        })\n      }\n    })\n  }\n\n  render () {\n    const {\n      filters,\n      data,\n      total: totalSum,\n      items,\n      totalByItem,\n      totalByMonth,\n      filteredItems,\n      loading\n    } = this.state\n\n    const colors = filteredItems.reduce(calculateColors, { total: '#F5F5F5' })\n    const { type } = this.props\n    return (\n      <div>\n        <div className='rubrosChart__filters rubrosChart__filters-wrap'>\n          <div className='rubrosChart__filters rubrosChart__filters-filter'>\n            <SelectField\n              label='Periodo'\n              options={PERIODS}\n              value={filters.period}\n              onChange={this.onChangeFilter('period')}\n            />\n          </div>\n          <div className='rubrosChart__filters rubrosChart__filters-filter'>\n            <SelectField\n              label='Mes final'\n              options={MONTHS}\n              value={filters.month}\n              onChange={this.onChangeFilter('month')}\n            />\n          </div>\n          <div className='rubrosChart__filters rubrosChart__filters-filter'>\n            <SelectField\n              label='Año'\n              options={YEARS}\n              value={filters.year}\n              onChange={this.onChangeFilter('year')}\n            />\n          </div>\n        </div>\n        <div className='columns'>\n          <div className='column is-8'>\n            <Chart\n              data={data}\n              items={items}\n              filteredItems={filteredItems}\n              colors={colors}\n              totalByMonth={totalByMonth}\n            />\n          </div>\n          <div className='column is-4'>\n            {loading ? (\n              <Loading size='24' />\n            ) : (\n              <div className='marginBottom'>\n                <p className='rubrosChart rubrosChart__table-title'>\n                  {type === 'incomes'\n                    ? 'Ingreso total del periodo:'\n                    : 'Gasto total del periodo'}\n                </p>\n                <p className='rubrosChart rubrosChart__table-amount'>\n                  {accounting.formatMoney(totalSum, '$ ', 0)}\n                </p>\n              </div>\n            )}\n            <div style={{ margin: '1em 0' }}>\n              <SelectField\n                placeholder='Selecciona rubros a comparar'\n                disabledOptions={filteredItems}\n                options={items\n                  .filter(item => item !== 'total')\n                  .map(item => ({ id: item, label: _capitalize(item) }))}\n                onChange={this.onFilterItem}\n              />\n            </div>\n            <table className='rubrosChart rubrosChart__table-table'>\n              <tbody>\n                {filteredItems.map(item => (\n                  <tr key={item}>\n                    <td\n                      className='rubrosChart colorIcon'\n                      style={{\n                        backgroundColor: colors[item]\n                      }}\n                    />\n                    <td>{_capitalize(item)}</td>\n                    <td className='amount'>\n                      {accounting.formatMoney(totalByItem[item], '$ ')}\n                    </td>\n                    <td>\n                      <IconButton\n                        icon='close'\n                        tooltip='Remover rubro'\n                        onClick={() => this.onRemoveFilterItem(item)}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}