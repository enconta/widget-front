{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/monthPicker/index.js\";\n// Libraries\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'; // Catalogs\n\nimport { MONTHS } from './../catalogs';\nimport SelectField from '../selectField/index'; // Constants\n\nvar requiredFields = new Set();\n/*\n * The MonthPicker is designed to render 2 selects, one for months (from 0 to 12) and one for years\n * Saves the values on its state\n * By default, sets the years and months to the current time on component mount (usually on a new page render)\n */\n\nvar MonthPicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MonthPicker, _Component);\n\n  function MonthPicker(props) {\n    var _this;\n\n    _classCallCheck(this, MonthPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MonthPicker).call(this, props));\n    _this.data = {\n      currentYear: moment(props.selected, 'YYYY-MM-DD').format('YYYY'),\n      currentMonth: moment(props.selected, 'YYYY-MM-DD').format('MM')\n    };\n    _this.state = Object.assign({}, _this.data);\n    return _this;\n  }\n\n  _createClass(MonthPicker, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clears the stored requiredFields\n      requiredFields.clear();\n    } // Returns an Array with objects to build the Years options for the SelectField component\n\n  }, {\n    key: \"buildYears\",\n    value: function buildYears() {\n      var currentYear = moment().year();\n      return _toConsumableArray(new Array(currentYear - 2011)).map(function (x, i) {\n        return {\n          id: \"\".concat(currentYear - i),\n          label: \"\".concat(currentYear - i)\n        };\n      });\n    } // Saves selected year to state\n\n  }, {\n    key: \"setYear\",\n    value: function setYear(e) {\n      var year = e.target.value;\n      this.setState({\n        currentYear: year\n      });\n      this.propsChange(\"\".concat(year, \"-\").concat(this.state.currentMonth, \"-01\"));\n    } // Saves selected month to state\n\n  }, {\n    key: \"setMonth\",\n    value: function setMonth(e) {\n      var month = e.target.value;\n      this.setState({\n        currentMonth: month\n      });\n      this.propsChange(\"\".concat(this.state.currentYear, \"-\").concat(month, \"-01\"));\n    } // Sends the updated data to the parent Component so it can perform its functions\n    // and usually pass the updated data via props\n\n  }, {\n    key: \"propsChange\",\n    value: function propsChange(date) {\n      this.props.onChange(date);\n    } // Main render\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.props.label), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        options: this.buildYears(),\n        value: this.state.currentYear,\n        onChange: this.setYear.bind(this),\n        placeholder: \"A\\xF1o\",\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        options: MONTHS,\n        onChange: this.setMonth.bind(this),\n        value: this.state.currentMonth,\n        placeholder: \"Mes\",\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return MonthPicker;\n}(Component);\n\nMonthPicker.propTypes = {\n  selected: PropTypes.string,\n  onChange: PropTypes.func,\n  className: PropTypes.string,\n  label: PropTypes.string\n};\nMonthPicker.defaultProps = {\n  selected: moment().format('YYYY-MM-DD')\n};\nexport default MonthPicker;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/monthPicker/index.js"],"names":["React","Component","PropTypes","moment","MONTHS","SelectField","requiredFields","Set","MonthPicker","props","data","currentYear","selected","format","currentMonth","state","Object","assign","clear","year","Array","map","x","i","id","label","e","target","value","setState","propsChange","month","date","onChange","className","buildYears","setYear","bind","r","add","setMonth","propTypes","string","func","defaultProps"],"mappings":"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","sourcesContent":["// Libraries\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\n\n// Catalogs\nimport { MONTHS } from './../catalogs'\nimport SelectField from '../selectField/index'\n\n// Constants\nconst requiredFields = new Set()\n\n/*\n * The MonthPicker is designed to render 2 selects, one for months (from 0 to 12) and one for years\n * Saves the values on its state\n * By default, sets the years and months to the current time on component mount (usually on a new page render)\n */\n\nclass MonthPicker extends Component {\n  constructor (props) {\n    super(props)\n    this.data = {\n      currentYear: moment(props.selected, 'YYYY-MM-DD').format('YYYY'),\n      currentMonth: moment(props.selected, 'YYYY-MM-DD').format('MM')\n    }\n    this.state = Object.assign({}, this.data)\n  }\n\n  componentWillUnmount () {\n    // Clears the stored requiredFields\n    requiredFields.clear()\n  }\n\n  // Returns an Array with objects to build the Years options for the SelectField component\n  buildYears () {\n    const currentYear = moment().year()\n    return [...new Array(currentYear - 2011)].map((x, i) => ({\n      id: `${currentYear - i}`,\n      label: `${currentYear - i}`\n    }))\n  }\n\n  // Saves selected year to state\n  setYear (e) {\n    let year = e.target.value\n    this.setState({ currentYear: year })\n    this.propsChange(`${year}-${this.state.currentMonth}-01`)\n  }\n\n  // Saves selected month to state\n  setMonth (e) {\n    let month = e.target.value\n    this.setState({ currentMonth: month })\n    this.propsChange(`${this.state.currentYear}-${month}-01`)\n  }\n\n  // Sends the updated data to the parent Component so it can perform its functions\n  // and usually pass the updated data via props\n  propsChange (date) {\n    this.props.onChange(date)\n  }\n\n  // Main render\n  render () {\n    return (\n      <div className={this.props.className}>\n        <label className='caption'>{this.props.label}</label>\n        <div className='columns'>\n          <div className='column is-3'>\n            <SelectField\n              options={this.buildYears()}\n              value={this.state.currentYear}\n              onChange={this.setYear.bind(this)}\n              placeholder='Año'\n              ref={r => requiredFields.add(r)}\n              required\n            />\n          </div>\n          <div className='column is-4'>\n            <SelectField\n              options={MONTHS}\n              onChange={this.setMonth.bind(this)}\n              value={this.state.currentMonth}\n              placeholder='Mes'\n              ref={r => requiredFields.add(r)}\n              required\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nMonthPicker.propTypes = {\n  selected: PropTypes.string,\n  onChange: PropTypes.func,\n  className: PropTypes.string,\n  label: PropTypes.string\n}\n\nMonthPicker.defaultProps = {\n  selected: moment().format('YYYY-MM-DD')\n}\n\nexport default MonthPicker\n"]},"metadata":{},"sourceType":"module"}