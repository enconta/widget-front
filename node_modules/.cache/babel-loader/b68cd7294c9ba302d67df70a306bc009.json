{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseStore from './baseStore';\nimport { uniq } from 'lodash';\n\nvar PaymentAccountsStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(PaymentAccountsStore, _BaseStore);\n\n  function PaymentAccountsStore() {\n    var _this;\n\n    _classCallCheck(this, PaymentAccountsStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaymentAccountsStore).call(this));\n    _this.current = {\n      name: '',\n      account_number: '',\n      bank_name: '',\n      account_type: 'debit',\n      active: true,\n      pdf_password: null\n    };\n    _this.paymentAccounts = [];\n    _this.totalPages = 1;\n    _this.currentPage = 1;\n    _this.banksList = [];\n    _this.hasPassword = false;\n    _this.activeBankList = [];\n    _this.hasSynchronizedBank = false;\n    _this.actions = {\n      PAYMENT_ACCOUNT_RECEIVED: function PAYMENT_ACCOUNT_RECEIVED(action) {\n        _this.setCurrent(action.data);\n\n        _this.setHasPassword(action.data);\n      },\n      PAYMENT_ACCOUNTS_LIST_RECEIVED: function PAYMENT_ACCOUNTS_LIST_RECEIVED(action) {\n        _this.setPaymentAccounts(action.data);\n      },\n      CLEAR_CURRENT_PAYMENT_ACCOUNT: function CLEAR_CURRENT_PAYMENT_ACCOUNT() {\n        _this.clearCurrent();\n      },\n      PAYMENT_ACCOUNTS_LIST_STATUS_CHANGED: function PAYMENT_ACCOUNTS_LIST_STATUS_CHANGED(action) {\n        var accountPos = _this.paymentAccounts.findIndex(function (a) {\n          return a.id === action.data.payment_account.id;\n        });\n\n        _this.paymentAccounts[accountPos].active = action.data.payment_account.active;\n      },\n      BANKS_LIST_RECEIVED: function BANKS_LIST_RECEIVED(action) {\n        _this.setBankList(action.data);\n      },\n      SMART_BANK_LIST_RECEIVED: function SMART_BANK_LIST_RECEIVED(action) {\n        _this.setActiveBankList(action.data);\n      }\n    };\n    return _this;\n  } // Pagination: Get total pages\n\n\n  _createClass(PaymentAccountsStore, [{\n    key: \"getTotalPages\",\n    value: function getTotalPages() {\n      return this.totalPages;\n    } // Pagination: Get total items\n\n  }, {\n    key: \"getTotalItems\",\n    value: function getTotalItems() {\n      return this.totalItems;\n    } // Pagination: Get current page\n\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      return this.currentPage;\n    }\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      return this.current;\n    } // Get payment accounts\n\n  }, {\n    key: \"getPaymentAccounts\",\n    value: function getPaymentAccounts() {\n      return this.paymentAccounts;\n    }\n  }, {\n    key: \"getAccountNumbers\",\n    value: function getAccountNumbers() {\n      return uniq(this.paymentAccounts.map(function (account) {\n        return account.account_number;\n      }));\n    }\n  }, {\n    key: \"getPaymentAccountLenght\",\n    value: function getPaymentAccountLenght() {\n      return this.paymentAccounts.length;\n    } // Sets the documents list from the data received from the api\n\n  }, {\n    key: \"setPaymentAccounts\",\n    value: function setPaymentAccounts(data) {\n      this.paymentAccounts = data.payment_accounts;\n    }\n  }, {\n    key: \"setActiveBankList\",\n    value: function setActiveBankList(_ref) {\n      var banks = _ref.account_connections;\n      this.activeBankList = banks; // TODO: esta info la esetoy ocupando para simular que tengo bancomer\n      // this.activeBankList = [\n      //   {\n      //     bank_name: 'bancomer',\n      //     id: 23,\n      //     last_accessed_at: null,\n      //     registration_error: null,\n      //     taxable_entity_id: 32\n      //   },\n      //   {\n      //     bank_name: 'hsbc',\n      //     id: 43,\n      //     last_accessed_at: null,\n      //     registration_error: null,\n      //     taxable_entity_id: 32\n      //   }\n      // ]\n\n      this.hasSynchronizedBank = this.activeBankList.length > 0;\n    }\n  }, {\n    key: \"getActiveBankList\",\n    value: function getActiveBankList() {\n      return this.activeBankList;\n    }\n  }, {\n    key: \"getHasSynchronizedBank\",\n    value: function getHasSynchronizedBank() {\n      return this.hasSynchronizedBank;\n    }\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent(_ref2) {\n      var account = _ref2.payment_account;\n      this.current = account;\n    }\n  }, {\n    key: \"clearCurrent\",\n    value: function clearCurrent() {\n      this.current = {\n        name: '',\n        account_number: '',\n        bank_name: '',\n        account_type: 'debit',\n        active: true,\n        pdf_password: null\n      };\n    }\n  }, {\n    key: \"getBanksList\",\n    value: function getBanksList() {\n      return this.banksList;\n    }\n  }, {\n    key: \"setBankList\",\n    value: function setBankList(data) {\n      var bankList = [];\n\n      if (data !== undefined) {\n        bankList = data.banks.map(function (bank) {\n          return {\n            id: bank.parser_name,\n            label: bank.name\n          };\n        });\n      }\n\n      this.banksList = bankList;\n    }\n  }, {\n    key: \"getHasPassword\",\n    value: function getHasPassword() {\n      return this.hasPassword;\n    }\n  }, {\n    key: \"setHasPassword\",\n    value: function setHasPassword(_ref3) {\n      var account = _ref3.payment_account;\n      var pdfPassword = account.pdf_password;\n      this.hasPassword = pdfPassword !== null;\n    }\n  }]);\n\n  return PaymentAccountsStore;\n}(BaseStore);\n\nexport default PaymentAccountsStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/paymentAccounts.js"],"names":["BaseStore","uniq","PaymentAccountsStore","current","name","account_number","bank_name","account_type","active","pdf_password","paymentAccounts","totalPages","currentPage","banksList","hasPassword","activeBankList","hasSynchronizedBank","actions","PAYMENT_ACCOUNT_RECEIVED","action","setCurrent","data","setHasPassword","PAYMENT_ACCOUNTS_LIST_RECEIVED","setPaymentAccounts","CLEAR_CURRENT_PAYMENT_ACCOUNT","clearCurrent","PAYMENT_ACCOUNTS_LIST_STATUS_CHANGED","accountPos","findIndex","a","id","payment_account","BANKS_LIST_RECEIVED","setBankList","SMART_BANK_LIST_RECEIVED","setActiveBankList","totalItems","map","account","length","payment_accounts","banks","account_connections","bankList","undefined","bank","parser_name","label","pdfPassword","getInstance"],"mappings":"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","sourcesContent":["import BaseStore from './baseStore'\nimport { uniq } from 'lodash'\n\nclass PaymentAccountsStore extends BaseStore {\n  constructor () {\n    super()\n    this.current = {\n      name: '',\n      account_number: '',\n      bank_name: '',\n      account_type: 'debit',\n      active: true,\n      pdf_password: null\n    }\n    this.paymentAccounts = []\n    this.totalPages = 1\n    this.currentPage = 1\n    this.banksList = []\n    this.hasPassword = false\n    this.activeBankList = []\n    this.hasSynchronizedBank = false\n    this.actions = {\n      PAYMENT_ACCOUNT_RECEIVED: action => {\n        this.setCurrent(action.data)\n        this.setHasPassword(action.data)\n      },\n      PAYMENT_ACCOUNTS_LIST_RECEIVED: action => {\n        this.setPaymentAccounts(action.data)\n      },\n      CLEAR_CURRENT_PAYMENT_ACCOUNT: () => {\n        this.clearCurrent()\n      },\n      PAYMENT_ACCOUNTS_LIST_STATUS_CHANGED: action => {\n        const accountPos = this.paymentAccounts.findIndex(\n          a => a.id === action.data.payment_account.id\n        )\n        this.paymentAccounts[accountPos].active =\n          action.data.payment_account.active\n      },\n      BANKS_LIST_RECEIVED: action => {\n        this.setBankList(action.data)\n      },\n      SMART_BANK_LIST_RECEIVED: action => {\n        this.setActiveBankList(action.data)\n      }\n    }\n  }\n\n  // Pagination: Get total pages\n  getTotalPages () {\n    return this.totalPages\n  }\n  // Pagination: Get total items\n  getTotalItems () {\n    return this.totalItems\n  }\n  // Pagination: Get current page\n  getCurrentPage () {\n    return this.currentPage\n  }\n\n  getCurrent () {\n    return this.current\n  }\n\n  // Get payment accounts\n  getPaymentAccounts () {\n    return this.paymentAccounts\n  }\n\n  getAccountNumbers () {\n    return uniq(\n      this.paymentAccounts.map(function (account) {\n        return account.account_number\n      })\n    )\n  }\n\n  getPaymentAccountLenght () {\n    return this.paymentAccounts.length\n  }\n\n  // Sets the documents list from the data received from the api\n  setPaymentAccounts (data) {\n    this.paymentAccounts = data.payment_accounts\n  }\n\n  setActiveBankList ({ account_connections: banks }) {\n    this.activeBankList = banks\n\n    // TODO: esta info la esetoy ocupando para simular que tengo bancomer\n    // this.activeBankList = [\n    //   {\n    //     bank_name: 'bancomer',\n    //     id: 23,\n    //     last_accessed_at: null,\n    //     registration_error: null,\n    //     taxable_entity_id: 32\n    //   },\n    //   {\n    //     bank_name: 'hsbc',\n    //     id: 43,\n    //     last_accessed_at: null,\n    //     registration_error: null,\n    //     taxable_entity_id: 32\n    //   }\n    // ]\n    this.hasSynchronizedBank = this.activeBankList.length > 0\n  }\n\n  getActiveBankList () {\n    return this.activeBankList\n  }\n\n  getHasSynchronizedBank () {\n    return this.hasSynchronizedBank\n  }\n\n  setCurrent ({ payment_account: account }) {\n    this.current = account\n  }\n\n  clearCurrent () {\n    this.current = {\n      name: '',\n      account_number: '',\n      bank_name: '',\n      account_type: 'debit',\n      active: true,\n      pdf_password: null\n    }\n  }\n\n  getBanksList () {\n    return this.banksList\n  }\n\n  setBankList (data) {\n    let bankList = []\n    if (data !== undefined) {\n      bankList = data.banks.map(bank => ({\n        id: bank.parser_name,\n        label: bank.name\n      }))\n    }\n    this.banksList = bankList\n  }\n\n  getHasPassword () {\n    return this.hasPassword\n  }\n  setHasPassword ({ payment_account: account }) {\n    const { pdf_password: pdfPassword } = account\n    this.hasPassword = pdfPassword !== null\n  }\n}\n\nexport default PaymentAccountsStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}