{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/reports/itemsBehaviors/components/chart.js\";\nimport React, { Component } from 'react';\nimport accounting from 'accounting';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts'; // Utils para formatear los valores\n\nvar formatMoneyWithoutSimbol = function formatMoneyWithoutSimbol(amount) {\n  return accounting.formatMoney(amount, '', 0);\n};\n\nvar formatMoneyWithSimbol = function formatMoneyWithSimbol(amount) {\n  return accounting.formatMoney(amount, '$', 0);\n}; // [Active]: si se hace hover\n// [Payload]: El array de bars en un mes\n// [Colors]: el diccionario de colores\n// [Label]: el mes al que se hace hover\n// [totalByMonth]: el calculo del total del mes\n\n\nvar CustomTooltip = function CustomTooltip(_ref) {\n  var active = _ref.active,\n      payload = _ref.payload,\n      colors = _ref.colors,\n      label = _ref.label,\n      totalByMonth = _ref.totalByMonth;\n\n  if (active && payload) {\n    return React.createElement(\"div\", {\n      style: {\n        background: 'white',\n        padding: '1em'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Total Mes: \", formatMoneyWithSimbol(totalByMonth[label])), payload.filter(function (_ref2) {\n      var dataKey = _ref2.dataKey;\n      return dataKey !== 'total';\n    }).map(function (_ref3) {\n      var dataKey = _ref3.dataKey,\n          value = _ref3.value;\n      return React.createElement(\"div\", {\n        key: dataKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rubrosChart colorIcon colorIcon--small\",\n        style: {\n          backgroundColor: colors[dataKey]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, formatMoneyWithSimbol(value)));\n    }));\n  }\n\n  return null;\n};\n\nvar MARGIN = {\n  top: 20,\n  left: 20\n};\nvar LABEL_STYLE = {\n  fill: '#a3a4a8',\n  fontSize: '14'\n};\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart() {\n    _classCallCheck(this, Chart);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Chart).apply(this, arguments));\n  }\n\n  _createClass(Chart, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          items = _this$props.items,\n          filteredItems = _this$props.filteredItems,\n          colors = _this$props.colors,\n          totalByMonth = _this$props.totalByMonth;\n      return React.createElement(ResponsiveContainer, {\n        width: \"100%\",\n        height: 350,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(BarChart, {\n        data: data,\n        margin: MARGIN,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(XAxis, {\n        dataKey: \"month\",\n        tickLine: false,\n        tick: LABEL_STYLE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        tick: LABEL_STYLE,\n        tickFormatter: formatMoneyWithoutSimbol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        content: React.createElement(CustomTooltip, {\n          colors: colors,\n          totalByMonth: totalByMonth,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), items.filter(function (item) {\n        // Solo se deben mostrar las barras de los items seleccionados\n        // Pero siempre debemos mostrar la barra del total\n        return filteredItems.includes(item) || item === 'total';\n      }).map(function (item) {\n        return React.createElement(Bar, {\n          key: item,\n          dataKey: item,\n          fill: colors[item],\n          stackId: \"stack\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport { Chart as default };","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/reports/itemsBehaviors/components/chart.js"],"names":["React","Component","accounting","BarChart","Bar","XAxis","YAxis","Tooltip","ResponsiveContainer","formatMoneyWithoutSimbol","amount","formatMoney","formatMoneyWithSimbol","CustomTooltip","active","payload","colors","label","totalByMonth","background","padding","filter","dataKey","map","value","backgroundColor","MARGIN","top","left","LABEL_STYLE","fill","fontSize","Chart","props","data","items","filteredItems","item","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport accounting from 'accounting'\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts'\n\n// Utils para formatear los valores\nconst formatMoneyWithoutSimbol = amount => accounting.formatMoney(amount, '', 0)\nconst formatMoneyWithSimbol = amount => accounting.formatMoney(amount, '$', 0)\n\n// [Active]: si se hace hover\n// [Payload]: El array de bars en un mes\n// [Colors]: el diccionario de colores\n// [Label]: el mes al que se hace hover\n// [totalByMonth]: el calculo del total del mes\nconst CustomTooltip = ({ active, payload, colors, label, totalByMonth }) => {\n  if (active && payload) {\n    return (\n      <div style={{ background: 'white', padding: '1em' }}>\n        <p>Total Mes: {formatMoneyWithSimbol(totalByMonth[label])}</p>\n        {payload\n          .filter(({ dataKey }) => dataKey !== 'total')\n          .map(({ dataKey, value }) => (\n            <div key={dataKey}>\n              <div\n                className='rubrosChart colorIcon colorIcon--small'\n                style={{ backgroundColor: colors[dataKey] }}\n              />\n              <span>{formatMoneyWithSimbol(value)}</span>\n            </div>\n          ))}\n      </div>\n    )\n  }\n  return null\n}\n\nconst MARGIN = { top: 20, left: 20 }\nconst LABEL_STYLE = { fill: '#a3a4a8', fontSize: '14' }\n\nexport default class Chart extends Component {\n  render () {\n    const { data, items, filteredItems, colors, totalByMonth } = this.props\n\n    return (\n      <ResponsiveContainer width='100%' height={350}>\n        <BarChart data={data} margin={MARGIN}>\n          <XAxis dataKey='month' tickLine={false} tick={LABEL_STYLE} />\n          <YAxis tick={LABEL_STYLE} tickFormatter={formatMoneyWithoutSimbol} />\n          <Tooltip\n            content={\n              <CustomTooltip colors={colors} totalByMonth={totalByMonth} />\n            }\n          />\n          {items\n            .filter(item => {\n              // Solo se deben mostrar las barras de los items seleccionados\n              // Pero siempre debemos mostrar la barra del total\n              return filteredItems.includes(item) || item === 'total'\n            })\n            .map(item => (\n              <Bar\n                key={item}\n                dataKey={item}\n                fill={colors[item]}\n                stackId='stack'\n              />\n            ))}\n        </BarChart>\n      </ResponsiveContainer>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}