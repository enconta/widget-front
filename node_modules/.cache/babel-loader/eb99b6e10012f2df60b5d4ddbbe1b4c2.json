{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { Decimal } from 'decimal.js/decimal.min.js';\nimport moment from 'moment';\nimport { SHORT_MONTHS } from 'shared/catalogs';\nimport { COLORS } from '../../constants'; // Calcula un array de un rango de fechas\n// [startDate] {Moment}\n// [endMonth] {Moment}\n// Ex, (3, 6) -> [Mar, Abr, May, Jun]\n\nfunction getDatesOrder(startDate, endMonth) {\n  var months = [];\n  var currentDate = moment(startDate);\n\n  while (currentDate <= endMonth) {\n    months.push(SHORT_MONTHS[currentDate.format('M')]);\n    currentDate = moment(currentDate).add(1, 'month');\n  }\n\n  return months;\n} // Ordena un array de objetos con key month de acuerdo al\n// array del orden que reciba\n// [Months] {Array} [{month: Feb}, ...]\n// [Order] {Array} [Feb, Mar]\n\n\nfunction orderMonths(months, order) {\n  return months.sort(function (a, b) {\n    return order.indexOf(a.month) - order.indexOf(b.month);\n  });\n}\n\nexport var calculateData = function calculateData(_ref) {\n  var report = _ref.report,\n      filteredItems = _ref.filteredItems,\n      endMonth = _ref.endMonth,\n      startMonth = _ref.startMonth;\n  var result = report.reduce(function (calculation, item) {\n    var _objectSpread2;\n\n    // El mes que se recibe es numerico, lo convertimos\n    var monthLabel = \"\".concat(SHORT_MONTHS[item.month], \" \").concat(item.year); // Sumamos el valor de cada item\n\n    calculation.total = new Decimal(calculation.total).add(item.total).toNumber(); // Rechart aceptar un array y le decimos que keys vamos a graficar,\n    // Acá agrupamos los items por mes y le añadimos los rubros que le pertenezcan\n    // ex, { Feb: {total: 0, month: \"Feb\", gasolina: 0, ...} }\n    // [total] Es un caso particular, ya que si sumamos todo\n    //  rechart crea una barra y no resta las otras, debemos nosotros restar\n    // el valor de los items seleccionados\n\n    calculation.data[item.month] = _objectSpread({}, calculation.data[item.month], (_objectSpread2 = {\n      // Añadimos lo que tenía antes\n      month: monthLabel\n    }, _defineProperty(_objectSpread2, item.category, new Decimal(item.total).toNumber()), _defineProperty(_objectSpread2, \"total\", calculation.data[item.month] // Primero sabemos si ya está el mes en el diccionario\n    ? filteredItems.includes(item.category) // si el item no está seleccionado se suma\n    ? new Decimal(calculation.data[item.month].total).toNumber() : new Decimal(calculation.data[item.month].total).add(item.total).toNumber() : filteredItems.includes(item.category) // Si el primer item está seleccionado se inicia en 0\n    ? new Decimal(0).toNumber() : new Decimal(item.total).toNumber()), _objectSpread2)); // Si el mes actual está en el diccionario, se suma, si no se inicializa\n\n    var calculationMonth = calculation.totalByMonth[monthLabel];\n    calculation.totalByMonth[monthLabel] = calculationMonth ? new Decimal(calculationMonth).add(item.total).toNumber() : new Decimal(item.total).toNumber(); // Si el mes actual ya está en la suma, se añade o se inicializa\n\n    var calculationItem = calculation.totalByItem[item.category];\n    calculation.totalByItem[item.category] = calculationItem ? new Decimal(calculationItem).add(item.total).toNumber() : new Decimal(item.total).toNumber(); // Guardamos los items para generar las opciones sin repetirlas\n\n    calculation.items.add(item.category);\n    return calculation;\n  }, {\n    total: 0,\n    items: new Set(),\n    data: {},\n    totalByItem: {},\n    totalByMonth: {}\n  });\n  return _objectSpread({}, result, {\n    data: orderMonths(Object.values(result.data), getDatesOrder(startMonth, endMonth)),\n    items: [].concat(_toConsumableArray(Array.from(result.items)), ['total']) // convertimos el set a array\n\n  });\n}; // Based on select item, calculate colors\n\nexport var calculateColors = function calculateColors(colors, item, index) {\n  if (item !== 'total') {\n    colors[item] = COLORS[index];\n  }\n\n  return colors;\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/reports/itemsBehaviors/utils/index.js"],"names":["Decimal","moment","SHORT_MONTHS","COLORS","getDatesOrder","startDate","endMonth","months","currentDate","push","format","add","orderMonths","order","sort","a","b","indexOf","month","calculateData","report","filteredItems","startMonth","result","reduce","calculation","item","monthLabel","year","total","toNumber","data","category","includes","calculationMonth","totalByMonth","calculationItem","totalByItem","items","Set","Object","values","Array","from","calculateColors","colors","index"],"mappings":"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","sourcesContent":["import { Decimal } from 'decimal.js/decimal.min.js'\nimport moment from 'moment'\nimport { SHORT_MONTHS } from 'shared/catalogs'\nimport { COLORS } from '../../constants'\n\n// Calcula un array de un rango de fechas\n// [startDate] {Moment}\n// [endMonth] {Moment}\n// Ex, (3, 6) -> [Mar, Abr, May, Jun]\nfunction getDatesOrder (startDate, endMonth) {\n  const months = []\n  let currentDate = moment(startDate)\n  while (currentDate <= endMonth) {\n    months.push(SHORT_MONTHS[currentDate.format('M')])\n    currentDate = moment(currentDate).add(1, 'month')\n  }\n  return months\n}\n\n// Ordena un array de objetos con key month de acuerdo al\n// array del orden que reciba\n// [Months] {Array} [{month: Feb}, ...]\n// [Order] {Array} [Feb, Mar]\nfunction orderMonths (months, order) {\n  return months.sort((a, b) => order.indexOf(a.month) - order.indexOf(b.month))\n}\n\nexport const calculateData = ({\n  report,\n  filteredItems,\n  endMonth,\n  startMonth\n}) => {\n  const result = report.reduce(\n    (calculation, item) => {\n      // El mes que se recibe es numerico, lo convertimos\n      const monthLabel = `${SHORT_MONTHS[item.month]} ${item.year}`\n      // Sumamos el valor de cada item\n      calculation.total = new Decimal(calculation.total)\n        .add(item.total)\n        .toNumber()\n\n      // Rechart aceptar un array y le decimos que keys vamos a graficar,\n      // Acá agrupamos los items por mes y le añadimos los rubros que le pertenezcan\n      // ex, { Feb: {total: 0, month: \"Feb\", gasolina: 0, ...} }\n      // [total] Es un caso particular, ya que si sumamos todo\n      //  rechart crea una barra y no resta las otras, debemos nosotros restar\n      // el valor de los items seleccionados\n      calculation.data[item.month] = {\n        ...calculation.data[item.month], // Añadimos lo que tenía antes\n        month: monthLabel,\n        [item.category]: new Decimal(item.total).toNumber(),\n        total: calculation.data[item.month] // Primero sabemos si ya está el mes en el diccionario\n          ? filteredItems.includes(item.category) // si el item no está seleccionado se suma\n            ? new Decimal(calculation.data[item.month].total).toNumber()\n            : new Decimal(calculation.data[item.month].total)\n              .add(item.total)\n              .toNumber()\n          : filteredItems.includes(item.category) // Si el primer item está seleccionado se inicia en 0\n            ? new Decimal(0).toNumber()\n            : new Decimal(item.total).toNumber()\n      }\n\n      // Si el mes actual está en el diccionario, se suma, si no se inicializa\n      const calculationMonth = calculation.totalByMonth[monthLabel]\n      calculation.totalByMonth[monthLabel] = calculationMonth\n        ? new Decimal(calculationMonth).add(item.total).toNumber()\n        : new Decimal(item.total).toNumber()\n\n      // Si el mes actual ya está en la suma, se añade o se inicializa\n      const calculationItem = calculation.totalByItem[item.category]\n      calculation.totalByItem[item.category] = calculationItem\n        ? new Decimal(calculationItem).add(item.total).toNumber()\n        : new Decimal(item.total).toNumber()\n\n      // Guardamos los items para generar las opciones sin repetirlas\n      calculation.items.add(item.category)\n      return calculation\n    },\n    {\n      total: 0,\n      items: new Set(),\n      data: {},\n      totalByItem: {},\n      totalByMonth: {}\n    }\n  )\n\n  return {\n    ...result,\n    data: orderMonths(\n      Object.values(result.data),\n      getDatesOrder(startMonth, endMonth)\n    ),\n    items: [...Array.from(result.items), 'total'] // convertimos el set a array\n  }\n}\n\n// Based on select item, calculate colors\nexport const calculateColors = (colors, item, index) => {\n  if (item !== 'total') {\n    colors[item] = COLORS[index]\n  }\n\n  return colors\n}\n"]},"metadata":{},"sourceType":"module"}