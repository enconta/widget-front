{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { VERSION } from \"./version\";\nimport { PushApi } from \"./api\";\nimport { Environment } from \"./environment\";\nimport { Span } from \"./span\";\nimport { Queue } from \"./queue\";\nimport { Dispatcher } from \"./dispatcher\";\nimport { toHashMap } from \"./utils/hashmap\";\nimport { compose } from \"./utils/functional\";\n\nvar Appsignal = function () {\n  function Appsignal(options) {\n    this.VERSION = VERSION;\n    this._hooks = {\n      decorators: Array(),\n      overrides: Array()\n    };\n    this._env = Environment.serialize();\n    this._queue = new Queue(window.__APPSIGNAL_QUEUE__ || []);\n    var key = options.key,\n        uri = options.uri,\n        revision = options.revision;\n\n    if (revision && typeof revision !== \"string\") {\n      options.revision = String(revision);\n    }\n\n    this._api = new PushApi({\n      key: key,\n      uri: uri,\n      version: this.VERSION\n    });\n    this._breadcrumbs = [];\n    this._dispatcher = new Dispatcher(this._queue, this._api);\n    this._options = options;\n  }\n\n  Appsignal.prototype.send = function (data, tags, namespace) {\n    var _this = this;\n\n    if (tags === void 0) {\n      tags = {};\n    }\n\n    if (!(data instanceof Error) && !(data instanceof Span)) {\n      console.error(\"[APPSIGNAL]: Can't send error, given error is not a valid type\");\n      return;\n    }\n\n    var span = data instanceof Span ? data : this._createSpanFromError(data);\n\n    if (this._hooks.decorators.length > 0) {\n      compose.apply(void 0, __spread(this._hooks.decorators))(span);\n    }\n\n    if (tags) span.setTags(tags);\n    if (namespace) span.setNamespace(namespace);\n    if (this._breadcrumbs.length > 0) span.setBreadcrumbs(this._breadcrumbs);\n\n    if (this._hooks.overrides.length > 0) {\n      compose.apply(void 0, __spread(this._hooks.overrides))(span);\n    }\n\n    if (Environment.supportsPromises()) {\n      this._breadcrumbs = [];\n      return this._api.push(span).catch(function () {\n        _this._queue.push(span);\n\n        setTimeout(function () {\n          return _this._dispatcher.schedule();\n        }, 0);\n      });\n    } else {\n      console.error(\"[APPSIGNAL]: Error not sent. A Promise polyfill is required.\");\n      return;\n    }\n  };\n\n  Appsignal.prototype.sendError = function (error, tags, namespace) {\n    return this.send(error, tags, namespace);\n  };\n\n  Appsignal.prototype.use = function (plugin) {\n    plugin.call(this);\n  };\n\n  Appsignal.prototype.createSpan = function (fn) {\n    var _a = this._options,\n        _b = _a.revision,\n        revision = _b === void 0 ? \"\" : _b,\n        namespace = _a.namespace;\n    var span = new Span({\n      environment: this._env,\n      revision: revision\n    });\n    if (namespace) span.setNamespace(namespace);\n    if (fn && typeof fn === \"function\") fn(span);\n    return span;\n  };\n\n  Appsignal.prototype.wrap = function (fn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 1,, 3]);\n\n            return [2, Promise.resolve(fn())];\n\n          case 1:\n            e_1 = _a.sent();\n            return [4, this.sendError(e_1)];\n\n          case 2:\n            _a.sent();\n\n            return [2, Promise.reject(e_1)];\n\n          case 3:\n            return [2];\n        }\n      });\n    });\n  };\n\n  Appsignal.prototype.addDecorator = function (decorator) {\n    this._hooks.decorators.push(decorator);\n  };\n\n  Appsignal.prototype.addOverride = function (override) {\n    this._hooks.overrides.push(override);\n  };\n\n  Appsignal.prototype.demo = function () {\n    var span = this._createSpanFromError(new Error(\"Hello world! This is an error used for demonstration purposes.\"));\n\n    span.setAction(\"TestAction\").setParams({\n      path: \"/hello\",\n      method: \"GET\"\n    }).setTags({\n      demo_sample: \"true\"\n    });\n    this.send(span);\n  };\n\n  Appsignal.prototype.addBreadcrumb = function (breadcrumb) {\n    var crumb = __assign(__assign({\n      timestamp: Math.round(new Date().getTime() / 1000)\n    }, breadcrumb), {\n      metadata: toHashMap(breadcrumb.metadata)\n    });\n\n    if (!crumb.category) {\n      console.warn(\"[APPSIGNAL]: Breadcrumb not added. `category` is missing.\");\n      return;\n    }\n\n    if (!crumb.action) {\n      console.warn(\"[APPSIGNAL]: Breadcrumb not added. `action` is missing.\");\n      return;\n    }\n\n    if (this._breadcrumbs.length === 20) {\n      this._breadcrumbs.pop();\n    }\n\n    this._breadcrumbs.unshift(crumb);\n  };\n\n  Appsignal.prototype._createSpanFromError = function (error) {\n    var event = this.createSpan();\n    event.setError(error);\n    return event;\n  };\n\n  return Appsignal;\n}();\n\nexport default Appsignal;","map":null,"metadata":{},"sourceType":"module"}