{"ast":null,"code":"import _objectWithoutProperties from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/synchronization/selectBank.js\";\nimport React, { Component, Fragment } from 'react';\nimport { withRouter } from 'react-router';\nimport AppSignal from 'appsignal';\nimport Button from 'shared/button';\nimport CheckboxRounded from 'shared/checkboxRounded';\nimport { handleBack, handleURL, replaceUnderScore } from 'utils';\nimport StepperSmartSync from 'shared/stepperSmartSync';\nimport { checkFeatureFlag } from './utils';\nimport BanksSynchronizationActions from 'actions/smartsync';\nimport NotificationsActions from 'actions/notifications';\nimport BanksSynchronizationStores from 'stores/smartsync';\n\nfunction getCurrentState() {\n  return {\n    accounts: BanksSynchronizationStores.getAccounts()\n  };\n}\n\nexport var SelectBank =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SelectBank, _Component);\n\n  function SelectBank() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SelectBank);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectBank)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _objectSpread({}, getCurrentState());\n\n    _this.componentDidMount = function () {\n      var bank = _this.props.params.bank;\n      BanksSynchronizationStores.addChangeListener(_this._onChange);\n      BanksSynchronizationActions.getBelvoBanks(bank);\n      checkFeatureFlag();\n    };\n\n    _this._onChange = function () {\n      var state = getCurrentState();\n\n      _this.setState(state);\n    };\n\n    _this.selectAccount = function (accountId) {\n      return function () {\n        var accounts = _toConsumableArray(_this.state.accounts);\n\n        var selectedAccount = accounts.find(function (account) {\n          if (account.belvo_id === accountId) {\n            var lastDigits = account.account_number = account.account_number ? account.account_number.slice(account.account_number.length - 3) : account.name.slice(account.name.length - 3);\n            return (account.selected = !account.selected) && lastDigits;\n          }\n        });\n\n        _this.setState(function (state) {\n          return _objectSpread({}, state, {\n            accounts: _toConsumableArray(state.accounts)\n          });\n        });\n\n        return selectedAccount;\n      };\n    };\n\n    _this.filterSelectedBanks = function () {\n      var accounts = _toConsumableArray(_this.state.accounts);\n\n      accounts = accounts.filter(function (account) {\n        return account.selected;\n      }).map(function (_ref) {\n        var selected = _ref.selected,\n            account = _objectWithoutProperties(_ref, [\"selected\"]);\n\n        return account;\n      });\n      return {\n        bank_accounts: {\n          accounts: accounts\n        }\n      };\n    };\n\n    _this.saveSelectedAccount = function (event) {\n      var bank = _this.props.params.bank;\n      event.preventDefault();\n      BanksSynchronizationActions.saveSelectedAccount(_this.filterSelectedBanks()).then(function () {\n        NotificationsActions.success('Información guardada correctamente');\n        handleURL('/sincronizacion-finalizada');\n      }).catch(function (error) {\n        NotificationsActions.error(error);\n\n        _this.setState({\n          requestInProgress: false\n        });\n\n        AppSignal.addBreadcrumb({\n          category: 'Smart Sync',\n          action: 'Error: Selección de cuentas.',\n          metadata: {\n            bank: bank,\n            url: \"/seleccionar/banco/\".concat(bank)\n          }\n        });\n        AppSignal.sendError(new Error(error));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SelectBank, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BanksSynchronizationStores.removeChangeListener(this._onChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var accounts = this.state.accounts;\n      var bank = this.props.params.bank;\n      var accountSelected = accounts.filter(function (account) {\n        return account.selected === true;\n      });\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Button, {\n        buttonStyle: \"link\",\n        icon: \"chevron-double-left\",\n        onClick: handleBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Volver\"), React.createElement(\"p\", {\n        className: \"subheader-green margin-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Paso 3 de 3\"), React.createElement(StepperSmartSync, {\n        status: 'secondElementFinished',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"synchronization\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"synchronization__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Selecciona la(s) cuenta(s) que utilizaremos para realizar tu contabilidad, descargaremos tu resumen de movimientos cada mes de forma autom\\xE1tica\"), React.createElement(\"p\", {\n        className: \"synchronization__text synchronization__text--left synchronization__text--bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Banco: \", replaceUnderScore(bank)), React.createElement(\"div\", {\n        className: \"columns synchronization-container is-multiline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, accounts.map(function (_ref2) {\n        var name = _ref2.name,\n            id = _ref2.belvo_id,\n            selected = _ref2.selected,\n            type = _ref2.account_type;\n        return React.createElement(CheckboxRounded, {\n          key: id,\n          name: name,\n          selected: selected,\n          onChange: _this2.selectAccount(id),\n          type: type,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"flex-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: handleBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Regresar\"), React.createElement(Button, {\n        buttonStyle: \"primary\",\n        onClick: this.saveSelectedAccount,\n        disabled: accountSelected.length === 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Siguiente\"))));\n    }\n  }]);\n\n  return SelectBank;\n}(Component);\nexport default withRouter(SelectBank);","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/synchronization/selectBank.js"],"names":["React","Component","Fragment","withRouter","AppSignal","Button","CheckboxRounded","handleBack","handleURL","replaceUnderScore","StepperSmartSync","checkFeatureFlag","BanksSynchronizationActions","NotificationsActions","BanksSynchronizationStores","getCurrentState","accounts","getAccounts","SelectBank","state","componentDidMount","bank","props","params","addChangeListener","_onChange","getBelvoBanks","setState","selectAccount","accountId","selectedAccount","find","account","belvo_id","lastDigits","account_number","slice","length","name","selected","filterSelectedBanks","filter","map","bank_accounts","saveSelectedAccount","event","preventDefault","then","success","catch","error","requestInProgress","addBreadcrumb","category","action","metadata","url","sendError","Error","removeChangeListener","accountSelected","id","type","account_type"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { withRouter } from 'react-router'\nimport AppSignal from 'appsignal'\n\nimport Button from 'shared/button'\nimport CheckboxRounded from 'shared/checkboxRounded'\nimport { handleBack, handleURL, replaceUnderScore } from 'utils'\nimport StepperSmartSync from 'shared/stepperSmartSync'\nimport { checkFeatureFlag } from './utils'\n\nimport BanksSynchronizationActions from 'actions/smartsync'\nimport NotificationsActions from 'actions/notifications'\n\nimport BanksSynchronizationStores from 'stores/smartsync'\n\nfunction getCurrentState () {\n  return {\n    accounts: BanksSynchronizationStores.getAccounts()\n  }\n}\n\nexport class SelectBank extends Component {\n  state = { ...getCurrentState() }\n\n  componentDidMount = () => {\n    const { bank } = this.props.params\n    BanksSynchronizationStores.addChangeListener(this._onChange)\n    BanksSynchronizationActions.getBelvoBanks(bank)\n    checkFeatureFlag()\n  }\n\n  componentWillUnmount () {\n    BanksSynchronizationStores.removeChangeListener(this._onChange)\n  }\n\n  _onChange = () => {\n    const state = getCurrentState()\n    this.setState(state)\n  }\n\n  selectAccount = accountId => () => {\n    const accounts = [...this.state.accounts]\n    const selectedAccount = accounts.find(account => {\n      if (account.belvo_id === accountId) {\n        const lastDigits = (account.account_number = account.account_number\n          ? account.account_number.slice(account.account_number.length - 3)\n          : account.name.slice(account.name.length - 3))\n\n        return (account.selected = !account.selected) && lastDigits\n      }\n    })\n\n    this.setState(state => ({\n      ...state,\n      accounts: [...state.accounts]\n    }))\n\n    return selectedAccount\n  }\n\n  filterSelectedBanks = () => {\n    let accounts = [...this.state.accounts]\n    accounts = accounts\n      .filter(account => account.selected)\n      .map(({ selected, ...account }) => account)\n\n    return { bank_accounts: { accounts } }\n  }\n\n  saveSelectedAccount = event => {\n    const { bank } = this.props.params\n    event.preventDefault()\n    BanksSynchronizationActions.saveSelectedAccount(this.filterSelectedBanks())\n      .then(() => {\n        NotificationsActions.success('Información guardada correctamente')\n        handleURL('/sincronizacion-finalizada')\n      })\n      .catch(error => {\n        NotificationsActions.error(error)\n        this.setState({ requestInProgress: false })\n        AppSignal.addBreadcrumb({\n          category: 'Smart Sync',\n          action: 'Error: Selección de cuentas.',\n          metadata: {\n            bank: bank,\n            url: `/seleccionar/banco/${bank}`\n          }\n        })\n        AppSignal.sendError(new Error(error))\n      })\n  }\n\n  render () {\n    const { accounts } = this.state\n    const { bank } = this.props.params\n    const accountSelected = accounts.filter(\n      account => account.selected === true\n    )\n    return (\n      <Fragment>\n        <Button\n          buttonStyle='link'\n          icon='chevron-double-left'\n          onClick={handleBack}\n        >\n          Volver\n        </Button>\n        <p className='subheader-green margin-top'>Paso 3 de 3</p>\n        <StepperSmartSync status={'secondElementFinished'} />\n        <div className='synchronization'>\n          <p className='synchronization__text'>\n            Selecciona la(s) cuenta(s) que utilizaremos para realizar tu\n            contabilidad, descargaremos tu resumen de movimientos cada mes de\n            forma automática\n          </p>\n          <p className='synchronization__text synchronization__text--left synchronization__text--bold'>\n            Banco: {replaceUnderScore(bank)}\n          </p>\n          <div className='columns synchronization-container is-multiline'>\n            {accounts.map(\n              ({ name, belvo_id: id, selected, account_type: type }) => (\n                <CheckboxRounded\n                  key={id}\n                  name={name}\n                  selected={selected}\n                  onChange={this.selectAccount(id)}\n                  type={type}\n                />\n              )\n            )}\n          </div>\n          <div className='flex-center'>\n            <Button onClick={handleBack}>Regresar</Button>\n            <Button\n              buttonStyle='primary'\n              onClick={this.saveSelectedAccount}\n              disabled={accountSelected.length === 0}\n            >\n              Siguiente\n            </Button>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default withRouter(SelectBank)\n"]},"metadata":{},"sourceType":"module"}