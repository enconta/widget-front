{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport AppSignal from 'appsignal';\nimport Register from 'api/diagnosis';\nexport default {\n  createRegister: function createRegister(data) {\n    return Register.createAccount(data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'ACCOUNT_CREATED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  },\n  updateSteps: function updateSteps(id) {\n    return Register.updateSteps(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'STEPS_UPDATED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  },\n  askDiagnosisStatus: function askDiagnosisStatus(id) {\n    return Register.askDiagnosisStatus(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'STATUS_ASKED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  },\n  createDiagnosis: function createDiagnosis(id) {\n    return Register.createDiagnosis(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'DIAGNOSIS_CREATED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  },\n  setCurrentStep: function setCurrentStep(id, step) {\n    return Register.SetCurrentStep(id, step).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'STEP_MOVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  },\n  clearCurrentDiagnosis: function clearCurrentDiagnosis() {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_DIAGNOSIS'\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/register.js"],"names":["AppDispatcher","AppSignal","Register","createRegister","data","createAccount","then","response","handleAction","actionType","catch","error","sendError","Error","updateSteps","id","askDiagnosisStatus","createDiagnosis","setCurrentStep","step","SetCurrentStep","clearCurrentDiagnosis"],"mappings":"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","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport AppSignal from 'appsignal'\nimport Register from 'api/diagnosis'\n\nexport default {\n  createRegister (data) {\n    return Register.createAccount(data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'ACCOUNT_CREATED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  },\n\n  updateSteps (id) {\n    return Register.updateSteps(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'STEPS_UPDATED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  },\n\n  askDiagnosisStatus (id) {\n    return Register.askDiagnosisStatus(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'STATUS_ASKED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  },\n\n  createDiagnosis (id) {\n    return Register.createDiagnosis(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'DIAGNOSIS_CREATED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  },\n  setCurrentStep (id, step) {\n    return Register.SetCurrentStep(id, step)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'STEP_MOVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  },\n  clearCurrentDiagnosis () {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_DIAGNOSIS'\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}