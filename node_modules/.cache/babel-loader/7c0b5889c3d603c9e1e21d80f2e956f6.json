{"ast":null,"code":"import { browserHistory } from 'react-router';\nimport AppDispatcher from '../dispatcher';\nimport API from '../api';\nimport AppStorage from '../api/appStorage'; // This action creator sends the type of action and the params (if any) to the dispatcher\n\nexport default {\n  // Sends email and password to the API to login, if success, stores the session data in the local\n  // storage and sets it in the application state, else throw error\n  login: function login(user) {\n    var _this = this;\n\n    return API.User.Login(user).then(function (response) {\n      _this.setSession(response);\n\n      return 'success';\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  // Sends token to the API to logout, if success, clears local storage and redirects to Login page\n  logout: function logout() {\n    API.User.Logout(AppStorage.getAuthToken()).then(function () {\n      AppDispatcher.handleAction({\n        actionType: 'CLEAR_SESSION'\n      });\n      AppStorage.clearAll();\n      browserHistory.push('/');\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      AppDispatcher.handleAction({\n        actionType: 'CLEAR_SESSION'\n      });\n      AppStorage.clearAll();\n      browserHistory.push('/');\n    });\n  },\n  // Receives data to store the session data in the local storage and sets it in the application state\n  setSession: function setSession(data) {\n    var setSessionFromStorage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isEntityChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (setSessionFromStorage) {\n      AppStorage.setAuthToken(data['ENCONTA_AUTH_TOKEN']);\n      this.setUser(data.user);\n      this.setTaxableEntities(data.taxableEntities);\n      this.setCurrentEntity(data.currentEntity);\n    } else {\n      if (!isEntityChange) AppStorage.setAuthToken(data.auth_token);\n      this.setUser(data.user);\n      this.setTaxableEntities(data.user.taxable_entities);\n      this.setCurrentEntity(data.user.current_taxable_entity);\n    }\n  },\n  // Sets the user data in the local storage and sets it in the application state\n  setUser: function setUser(user) {\n    AppStorage.setUserData(user);\n    AppDispatcher.handleAction({\n      actionType: 'USER_SET',\n      data: user\n    });\n  },\n  // Sets the available taxable entities list in the local storage and sets it in the application state\n  setTaxableEntities: function setTaxableEntities(taxableEntities) {\n    AppStorage.setTaxableEntities(taxableEntities);\n    AppDispatcher.handleAction({\n      actionType: 'USER_ENTITIES_RECEIVED',\n      data: taxableEntities\n    });\n  },\n  // Sets the current entity in the local storage and sets it in the application state\n  setCurrentEntity: function setCurrentEntity(currentEntity) {\n    AppStorage.setCurrentEntity(currentEntity);\n    AppDispatcher.handleAction({\n      actionType: 'CURRENT_ENTITY_SET',\n      data: currentEntity\n    });\n  },\n  // Stores the page the user wanted to enter to before he realizes there is no active session\n  setPreloginPage: function setPreloginPage(page) {\n    AppDispatcher.handleAction({\n      actionType: 'PRELOGIN_PAGE_SET',\n      data: page\n    });\n  },\n  // Get the available taxable entities list for the user, if success, stores it in the local storage\n  // and sets it in the application state\n  getTaxableEntities: function getTaxableEntities() {\n    var _this2 = this;\n\n    API.TaxableEntities.GetTaxableEntities().then(function (response) {\n      _this2.setTaxableEntities(response);\n    });\n  },\n  changeCurrentEntity: function changeCurrentEntity(id) {\n    var _this3 = this;\n\n    // Send the entity change to the API, if success, stores it in the local storage\n    // and sets it in the application state\n    return API.User.ChangeCurrentEntity(id).then(function (response) {\n      _this3.setSession(response, false, true); // data, setSessionFromStorage, isEntityChange\n\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  resetPassword: function resetPassword(data) {\n    // Request the password reset for the specified client (or demo)\n    return API.User.ResetPassword(data).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  // Returns true if there is a session active, else false\n  hasSession: function hasSession() {\n    return AppStorage.hasSession();\n  },\n  // Get notifications\n  getNotifications: function getNotifications() {\n    return API.User.GetNotifications().then(function (r) {\n      AppStorage.setNotifications(r.notifications);\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n\n  /**\n   * This gets all the Enconta's features available for an specific client\n   */\n  setFeatures: function setFeatures() {\n    return API.User.GetFeatures().then(function (response) {\n      AppStorage.setFeatures(response.features);\n      AppDispatcher.handleAction({\n        actionType: 'FEATURES_RECEIVED',\n        data: response\n      });\n    }).catch(function (err) {\n      return console.error(err);\n    });\n  },\n  clearEntity: function clearEntity() {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_SESSION'\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/session.js"],"names":["browserHistory","AppDispatcher","API","AppStorage","login","user","User","Login","then","response","setSession","catch","error","AppSignal","sendError","logout","Logout","getAuthToken","handleAction","actionType","clearAll","push","data","setSessionFromStorage","isEntityChange","setAuthToken","setUser","setTaxableEntities","taxableEntities","setCurrentEntity","currentEntity","auth_token","taxable_entities","current_taxable_entity","setUserData","setPreloginPage","page","getTaxableEntities","TaxableEntities","GetTaxableEntities","changeCurrentEntity","id","ChangeCurrentEntity","resetPassword","ResetPassword","hasSession","getNotifications","GetNotifications","r","setNotifications","notifications","setFeatures","GetFeatures","features","err","console","clearEntity"],"mappings":"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","sourcesContent":["import { browserHistory } from 'react-router'\n\nimport AppDispatcher from '../dispatcher'\nimport API from '../api'\nimport AppStorage from '../api/appStorage'\n\n// This action creator sends the type of action and the params (if any) to the dispatcher\nexport default {\n  // Sends email and password to the API to login, if success, stores the session data in the local\n  // storage and sets it in the application state, else throw error\n  login (user) {\n    return API.User.Login(user)\n      .then(response => {\n        this.setSession(response)\n        return 'success'\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  // Sends token to the API to logout, if success, clears local storage and redirects to Login page\n  logout () {\n    API.User.Logout(AppStorage.getAuthToken())\n      .then(() => {\n        AppDispatcher.handleAction({\n          actionType: 'CLEAR_SESSION'\n        })\n        AppStorage.clearAll()\n        browserHistory.push('/')\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        AppDispatcher.handleAction({\n          actionType: 'CLEAR_SESSION'\n        })\n        AppStorage.clearAll()\n        browserHistory.push('/')\n      })\n  },\n\n  // Receives data to store the session data in the local storage and sets it in the application state\n  setSession (data, setSessionFromStorage = false, isEntityChange = false) {\n    if (setSessionFromStorage) {\n      AppStorage.setAuthToken(data['ENCONTA_AUTH_TOKEN'])\n      this.setUser(data.user)\n      this.setTaxableEntities(data.taxableEntities)\n      this.setCurrentEntity(data.currentEntity)\n    } else {\n      if (!isEntityChange) AppStorage.setAuthToken(data.auth_token)\n      this.setUser(data.user)\n      this.setTaxableEntities(data.user.taxable_entities)\n      this.setCurrentEntity(data.user.current_taxable_entity)\n    }\n  },\n\n  // Sets the user data in the local storage and sets it in the application state\n  setUser (user) {\n    AppStorage.setUserData(user)\n    AppDispatcher.handleAction({\n      actionType: 'USER_SET',\n      data: user\n    })\n  },\n\n  // Sets the available taxable entities list in the local storage and sets it in the application state\n  setTaxableEntities (taxableEntities) {\n    AppStorage.setTaxableEntities(taxableEntities)\n    AppDispatcher.handleAction({\n      actionType: 'USER_ENTITIES_RECEIVED',\n      data: taxableEntities\n    })\n  },\n\n  // Sets the current entity in the local storage and sets it in the application state\n  setCurrentEntity (currentEntity) {\n    AppStorage.setCurrentEntity(currentEntity)\n    AppDispatcher.handleAction({\n      actionType: 'CURRENT_ENTITY_SET',\n      data: currentEntity\n    })\n  },\n\n  // Stores the page the user wanted to enter to before he realizes there is no active session\n  setPreloginPage (page) {\n    AppDispatcher.handleAction({\n      actionType: 'PRELOGIN_PAGE_SET',\n      data: page\n    })\n  },\n\n  // Get the available taxable entities list for the user, if success, stores it in the local storage\n  // and sets it in the application state\n  getTaxableEntities () {\n    API.TaxableEntities.GetTaxableEntities().then(response => {\n      this.setTaxableEntities(response)\n    })\n  },\n\n  changeCurrentEntity (id) {\n    // Send the entity change to the API, if success, stores it in the local storage\n    // and sets it in the application state\n    return API.User.ChangeCurrentEntity(id)\n      .then(response => {\n        this.setSession(response, false, true) // data, setSessionFromStorage, isEntityChange\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  resetPassword (data) {\n    // Request the password reset for the specified client (or demo)\n    return API.User.ResetPassword(data).catch(error => {\n      AppSignal.sendError(error)\n      throw error\n    })\n  },\n\n  // Returns true if there is a session active, else false\n  hasSession () {\n    return AppStorage.hasSession()\n  },\n\n  // Get notifications\n  getNotifications () {\n    return API.User.GetNotifications()\n      .then(r => {\n        AppStorage.setNotifications(r.notifications)\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n  /**\n   * This gets all the Enconta's features available for an specific client\n   */\n  setFeatures () {\n    return API.User.GetFeatures()\n      .then(response => {\n        AppStorage.setFeatures(response.features)\n        AppDispatcher.handleAction({\n          actionType: 'FEATURES_RECEIVED',\n          data: response\n        })\n      })\n      .catch(err => console.error(err))\n  },\n  clearEntity () {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_SESSION'\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}