{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseStore from './baseStore';\n\nvar AccountingPeriodsStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(AccountingPeriodsStore, _BaseStore);\n\n  function AccountingPeriodsStore() {\n    var _this;\n\n    _classCallCheck(this, AccountingPeriodsStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountingPeriodsStore).call(this));\n    _this.accountingPeriods = [];\n    _this.totalPages = 1;\n    _this.totalItems = 0;\n    _this.currentPage = 1;\n    _this.actions = {\n      ACCOUNTING_PERIODS_RECEIVED: function ACCOUNTING_PERIODS_RECEIVED(action) {\n        _this.setAccountingPeriods(action.data);\n      }\n    };\n    return _this;\n  } // Returns stored total pages, this is used when explicitly you want to know it\n\n\n  _createClass(AccountingPeriodsStore, [{\n    key: \"getTotalPages\",\n    value: function getTotalPages() {\n      return this.totalPages;\n    } // Returns stored total pages, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getTotalItems\",\n    value: function getTotalItems() {\n      return this.totalItems;\n    } // Returns stored current page, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      return this.currentPage;\n    } // Returns stored accounting preriod list, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getAccountingPeriods\",\n    value: function getAccountingPeriods() {\n      return this.accountingPeriods;\n    } // Sets the accounting periods list from the data received from the api\n\n  }, {\n    key: \"setAccountingPeriods\",\n    value: function setAccountingPeriods(data) {\n      this.accountingPeriods = data.accounting_periods;\n      this.totalItems = data.pagination.total_items;\n      this.totalPages = data.pagination.total_pages;\n      this.currentPage = data.pagination.current_page;\n    }\n  }]);\n\n  return AccountingPeriodsStore;\n}(BaseStore);\n\nexport default AccountingPeriodsStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/accountingPeriods.js"],"names":["BaseStore","AccountingPeriodsStore","accountingPeriods","totalPages","totalItems","currentPage","actions","ACCOUNTING_PERIODS_RECEIVED","action","setAccountingPeriods","data","accounting_periods","pagination","total_items","total_pages","current_page","getInstance"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;IAEMC,sB;;;;;AACJ,oCAAe;AAAA;;AAAA;;AACb;AACA,UAAKC,iBAAL,GAAyB,EAAzB;AACA,UAAKC,UAAL,GAAkB,CAAlB;AACA,UAAKC,UAAL,GAAkB,CAAlB;AACA,UAAKC,WAAL,GAAmB,CAAnB;AAEA,UAAKC,OAAL,GAAe;AACbC,MAAAA,2BAA2B,EAAE,qCAAAC,MAAM,EAAI;AACrC,cAAKC,oBAAL,CAA0BD,MAAM,CAACE,IAAjC;AACD;AAHY,KAAf;AAPa;AAYd,G,CAED;;;;;oCACiB;AACf,aAAO,KAAKP,UAAZ;AACD,K,CAED;;;;oCACiB;AACf,aAAO,KAAKC,UAAZ;AACD,K,CAED;;;;qCACkB;AAChB,aAAO,KAAKC,WAAZ;AACD,K,CAED;;;;2CACwB;AACtB,aAAO,KAAKH,iBAAZ;AACD,K,CAED;;;;yCACsBQ,I,EAAM;AAC1B,WAAKR,iBAAL,GAAyBQ,IAAI,CAACC,kBAA9B;AACA,WAAKP,UAAL,GAAkBM,IAAI,CAACE,UAAL,CAAgBC,WAAlC;AACA,WAAKV,UAAL,GAAkBO,IAAI,CAACE,UAAL,CAAgBE,WAAlC;AACA,WAAKT,WAAL,GAAmBK,IAAI,CAACE,UAAL,CAAgBG,YAAnC;AACD;;;;EAzCkCf,S;;AA4CrC,eAAeC,sBAAsB,CAACe,WAAvB,EAAf","sourcesContent":["import BaseStore from './baseStore'\n\nclass AccountingPeriodsStore extends BaseStore {\n  constructor () {\n    super()\n    this.accountingPeriods = []\n    this.totalPages = 1\n    this.totalItems = 0\n    this.currentPage = 1\n\n    this.actions = {\n      ACCOUNTING_PERIODS_RECEIVED: action => {\n        this.setAccountingPeriods(action.data)\n      }\n    }\n  }\n\n  // Returns stored total pages, this is used when explicitly you want to know it\n  getTotalPages () {\n    return this.totalPages\n  }\n\n  // Returns stored total pages, this is used when explicitly you want to know it\n  getTotalItems () {\n    return this.totalItems\n  }\n\n  // Returns stored current page, this is used when explicitly you want to know it\n  getCurrentPage () {\n    return this.currentPage\n  }\n\n  // Returns stored accounting preriod list, this is used when explicitly you want to know it\n  getAccountingPeriods () {\n    return this.accountingPeriods\n  }\n\n  // Sets the accounting periods list from the data received from the api\n  setAccountingPeriods (data) {\n    this.accountingPeriods = data.accounting_periods\n    this.totalItems = data.pagination.total_items\n    this.totalPages = data.pagination.total_pages\n    this.currentPage = data.pagination.current_page\n  }\n}\n\nexport default AccountingPeriodsStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}