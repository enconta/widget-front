{"ast":null,"code":"var _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/kebabMenu/index.js\";\n// Libraries\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // Components\n\nimport IconButton from 'shared/iconButton';\n/**\n * This Kebab Menu receive and idRow if is used in tables for example,\n * The options has the next structure [{icon,handle, tooltip, disabled}]\n * icon: The icon used to represent a given action.\n * handle: the function executed after click the iconButton.\n * tooltip: A short phrase to know what is the action. (i.e. refund)\n * disabled: It has the rules when a button is available or not for some case.\n * @param {*} props\n */\n\nvar KebabMenu = function KebabMenu(props) {\n  var idRow = props.idRow,\n      options = props.options,\n      isOpen = props.isOpen,\n      handleKebabMenu = props.handleKebabMenu;\n  return React.createElement(\"div\", {\n    className: classNames('kebab-menu', {\n      'kebab-menu--opened': isOpen\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    icon: \"dots-vertical mdi-18px\",\n    className: \"kebab-menu__dots-button is-marginless\",\n    onClick: function onClick() {\n      return handleKebabMenu(idRow);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), isOpen && renderOptions(options, idRow));\n};\n\nvar renderOptions = function renderOptions(options, idRow) {\n  return options.map(function (_ref, index) {\n    var icon = _ref.icon,\n        handle = _ref.handle,\n        tooltip = _ref.tooltip,\n        disabled = _ref.disabled;\n    return React.createElement(IconButton, {\n      icon: \"\".concat(icon, \" mdi-18px\"),\n      className: \"icon-button--not-outline gray-hover is-marginless\",\n      onClick: function onClick() {\n        return handle(idRow);\n      },\n      tooltip: tooltip,\n      disabled: disabled,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  });\n};\n\nexport default KebabMenu;\nKebabMenu.propTypes = {\n  idRow: PropTypes.number,\n  options: PropTypes.array.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  handleKebabMenu: PropTypes.func.isRequired\n};\nKebabMenu.defaultProps = {\n  idRow: null,\n  options: [],\n  isOpen: false,\n  handleKebabMenu: function handleKebabMenu() {}\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/kebabMenu/index.js"],"names":["React","PropTypes","classNames","IconButton","KebabMenu","props","idRow","options","isOpen","handleKebabMenu","renderOptions","map","index","icon","handle","tooltip","disabled","propTypes","number","array","isRequired","bool","func","defaultProps"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA;;;;;;;;;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,MACjBC,KADiB,GAC2BD,KAD3B,CACjBC,KADiB;AAAA,MACVC,OADU,GAC2BF,KAD3B,CACVE,OADU;AAAA,MACDC,MADC,GAC2BH,KAD3B,CACDG,MADC;AAAA,MACOC,eADP,GAC2BJ,KAD3B,CACOI,eADP;AAGzB,SACE;AACE,IAAA,SAAS,EAAEP,UAAU,CAAC,YAAD,EAAe;AAClC,4BAAsBM;AADY,KAAf,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,wBADP;AAEE,IAAA,SAAS,EAAC,uCAFZ;AAGE,IAAA,OAAO,EAAE;AAAA,aAAMC,eAAe,CAACH,KAAD,CAArB;AAAA,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAUGE,MAAM,IAAIE,aAAa,CAACH,OAAD,EAAUD,KAAV,CAV1B,CADF;AAcD,CAjBD;;AAmBA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACH,OAAD,EAAUD,KAAV,EAAoB;AACxC,SAAOC,OAAO,CAACI,GAAR,CAAY,gBAAsCC,KAAtC,EAAgD;AAAA,QAA7CC,IAA6C,QAA7CA,IAA6C;AAAA,QAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,QAA/BC,OAA+B,QAA/BA,OAA+B;AAAA,QAAtBC,QAAsB,QAAtBA,QAAsB;AACjE,WACE,oBAAC,UAAD;AACE,MAAA,IAAI,YAAKH,IAAL,cADN;AAEE,MAAA,SAAS,EAAC,mDAFZ;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMC,MAAM,CAACR,KAAD,CAAZ;AAAA,OAHX;AAIE,MAAA,OAAO,EAAES,OAJX;AAKE,MAAA,QAAQ,EAAEC,QALZ;AAME,MAAA,GAAG,EAAEJ,KANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXM,CAAP;AAYD,CAbD;;AAeA,eAAeR,SAAf;AAEAA,SAAS,CAACa,SAAV,GAAsB;AACpBX,EAAAA,KAAK,EAAEL,SAAS,CAACiB,MADG;AAEpBX,EAAAA,OAAO,EAAEN,SAAS,CAACkB,KAAV,CAAgBC,UAFL;AAGpBZ,EAAAA,MAAM,EAAEP,SAAS,CAACoB,IAAV,CAAeD,UAHH;AAIpBX,EAAAA,eAAe,EAAER,SAAS,CAACqB,IAAV,CAAeF;AAJZ,CAAtB;AAOAhB,SAAS,CAACmB,YAAV,GAAyB;AACvBjB,EAAAA,KAAK,EAAE,IADgB;AAEvBC,EAAAA,OAAO,EAAE,EAFc;AAGvBC,EAAAA,MAAM,EAAE,KAHe;AAIvBC,EAAAA,eAAe,EAAE,2BAAM,CAAE;AAJF,CAAzB","sourcesContent":["// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\n// Components\nimport IconButton from 'shared/iconButton'\n\n/**\n * This Kebab Menu receive and idRow if is used in tables for example,\n * The options has the next structure [{icon,handle, tooltip, disabled}]\n * icon: The icon used to represent a given action.\n * handle: the function executed after click the iconButton.\n * tooltip: A short phrase to know what is the action. (i.e. refund)\n * disabled: It has the rules when a button is available or not for some case.\n * @param {*} props\n */\nconst KebabMenu = props => {\n  const { idRow, options, isOpen, handleKebabMenu } = props\n\n  return (\n    <div\n      className={classNames('kebab-menu', {\n        'kebab-menu--opened': isOpen\n      })}\n    >\n      <IconButton\n        icon='dots-vertical mdi-18px'\n        className='kebab-menu__dots-button is-marginless'\n        onClick={() => handleKebabMenu(idRow)}\n      />\n      {isOpen && renderOptions(options, idRow)}\n    </div>\n  )\n}\n\nconst renderOptions = (options, idRow) => {\n  return options.map(({ icon, handle, tooltip, disabled }, index) => {\n    return (\n      <IconButton\n        icon={`${icon} mdi-18px`}\n        className='icon-button--not-outline gray-hover is-marginless'\n        onClick={() => handle(idRow)}\n        tooltip={tooltip}\n        disabled={disabled}\n        key={index}\n      />\n    )\n  })\n}\n\nexport default KebabMenu\n\nKebabMenu.propTypes = {\n  idRow: PropTypes.number,\n  options: PropTypes.array.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  handleKebabMenu: PropTypes.func.isRequired\n}\n\nKebabMenu.defaultProps = {\n  idRow: null,\n  options: [],\n  isOpen: false,\n  handleKebabMenu: () => {}\n}\n"]},"metadata":{},"sourceType":"module"}