{"ast":null,"code":"/*\n * The AppStorage is used to store data in the LocalStorage for its use\n * even when the page is reloaded/refreshed.\n * The only way to delete this data is logging out from the app\n * or manually delete it with the browser tools.\n * It is encouraged to NOT use this Storage except when it is strictly necessary,\n * use the app stores instead to manage the application state.\n */\n// Libraries\nimport store from 'store'; // Constants\n// Key names\n\nvar SESSION_DATA = 'SessionData';\nvar NOTIFICATION_DATA = 'NotificationData';\nvar AppStorage = {\n  // Checks if is there a SessionData key in the local storage, if not, adds it alongside other required keys\n  init: function init() {\n    ;\n    this.getAllSessionData() && this.getAllNotifications() || this.clearAll();\n  },\n  // Inserts empty objects in the keys in the local storage. If there was data in this mentioned keys, it will be lost\n  clearAll: function clearAll() {\n    // Keys that will be cleared\n    var keys = [SESSION_DATA, NOTIFICATION_DATA];\n    keys.map(function (key) {\n      var emptyObject = {};\n      store.set(key, emptyObject);\n    });\n  },\n  // Inserts passed attributes with its data in the passed keyNames without losing previous data\n  insertIntoKey: function insertIntoKey(keyName, attr) {\n    var key = this.getKey(keyName);\n    Object.assign(key, attr);\n    store.set(keyName, key);\n  },\n  setAuthToken: function setAuthToken(token) {\n    this.insertIntoKey(SESSION_DATA, {\n      ENCONTA_AUTH_TOKEN: token\n    });\n  },\n  setUserData: function setUserData(user) {\n    this.insertIntoKey(SESSION_DATA, {\n      user: user\n    });\n  },\n  setTaxableEntities: function setTaxableEntities(taxableEntities) {\n    this.insertIntoKey(SESSION_DATA, {\n      taxableEntities: taxableEntities\n    });\n  },\n  setCurrentEntity: function setCurrentEntity(id) {\n    this.insertIntoKey(SESSION_DATA, {\n      currentEntity: id\n    });\n  },\n  // Returns all data from a key\n  getKey: function getKey(keyName) {\n    return store.get(keyName);\n  },\n  // Returns passed attribute data from a passed key name\n  getValue: function getValue(keyName, valueName) {\n    return store.get(keyName)[valueName];\n  },\n  getAllSessionData: function getAllSessionData() {\n    return this.getKey(SESSION_DATA);\n  },\n  getAuthToken: function getAuthToken() {\n    return this.getValue(SESSION_DATA, 'ENCONTA_AUTH_TOKEN');\n  },\n  getUserData: function getUserData() {\n    return this.getValue(SESSION_DATA, 'user');\n  },\n  getTaxableEntities: function getTaxableEntities() {\n    return this.getValue(SESSION_DATA, 'taxableEntities');\n  },\n  getCurrentEntity: function getCurrentEntity() {\n    return this.getValue(SESSION_DATA, 'currentEntity');\n  },\n  // Checks if session has an auth token and a user stored, if so returns true\n  hasSession: function hasSession() {\n    this.init();\n    return !!(this.getAuthToken() && this.getUserData());\n  },\n  // Notifications\n  // Store notifications\n  setNotifications: function setNotifications(notifications) {\n    this.insertIntoKey(NOTIFICATION_DATA, {\n      notifications: notifications\n    });\n  },\n  // Get all notification info\n  getAllNotifications: function getAllNotifications() {\n    return this.getKey(NOTIFICATION_DATA);\n  },\n  // Get notifications\n  getNotifications: function getNotifications() {\n    return this.getValue(NOTIFICATION_DATA, 'notifications');\n  },\n  // Initialize notifications as empty object\n  initNotifications: function initNotifications() {\n    store.set(NOTIFICATION_DATA, {});\n  },\n  // Return false if notifications empty, null or undefined\n  hasNotifications: function hasNotifications() {\n    return !!this.getNotifications();\n  },\n  setFeatures: function setFeatures(features) {\n    this.insertIntoKey(SESSION_DATA, {\n      features: features\n    });\n  },\n  getFeatures: function getFeatures() {\n    return this.getValue(SESSION_DATA, 'features');\n  }\n};\nexport default AppStorage;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/api/appStorage/index.js"],"names":["store","SESSION_DATA","NOTIFICATION_DATA","AppStorage","init","getAllSessionData","getAllNotifications","clearAll","keys","map","key","emptyObject","set","insertIntoKey","keyName","attr","getKey","Object","assign","setAuthToken","token","ENCONTA_AUTH_TOKEN","setUserData","user","setTaxableEntities","taxableEntities","setCurrentEntity","id","currentEntity","get","getValue","valueName","getAuthToken","getUserData","getTaxableEntities","getCurrentEntity","hasSession","setNotifications","notifications","getNotifications","initNotifications","hasNotifications","setFeatures","features","getFeatures"],"mappings":"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","sourcesContent":["/*\n * The AppStorage is used to store data in the LocalStorage for its use\n * even when the page is reloaded/refreshed.\n * The only way to delete this data is logging out from the app\n * or manually delete it with the browser tools.\n * It is encouraged to NOT use this Storage except when it is strictly necessary,\n * use the app stores instead to manage the application state.\n */\n\n// Libraries\nimport store from 'store'\n\n// Constants\n// Key names\nconst SESSION_DATA = 'SessionData'\nconst NOTIFICATION_DATA = 'NotificationData'\n\nconst AppStorage = {\n  // Checks if is there a SessionData key in the local storage, if not, adds it alongside other required keys\n  init () {\n    ;(this.getAllSessionData() && this.getAllNotifications()) || this.clearAll()\n  },\n\n  // Inserts empty objects in the keys in the local storage. If there was data in this mentioned keys, it will be lost\n  clearAll () {\n    // Keys that will be cleared\n    let keys = [SESSION_DATA, NOTIFICATION_DATA]\n    keys.map(key => {\n      let emptyObject = {}\n      store.set(key, emptyObject)\n    })\n  },\n\n  // Inserts passed attributes with its data in the passed keyNames without losing previous data\n  insertIntoKey (keyName, attr) {\n    let key = this.getKey(keyName)\n    Object.assign(key, attr)\n    store.set(keyName, key)\n  },\n\n  setAuthToken (token) {\n    this.insertIntoKey(SESSION_DATA, { ENCONTA_AUTH_TOKEN: token })\n  },\n\n  setUserData (user) {\n    this.insertIntoKey(SESSION_DATA, { user })\n  },\n\n  setTaxableEntities (taxableEntities) {\n    this.insertIntoKey(SESSION_DATA, { taxableEntities })\n  },\n\n  setCurrentEntity (id) {\n    this.insertIntoKey(SESSION_DATA, { currentEntity: id })\n  },\n\n  // Returns all data from a key\n  getKey (keyName) {\n    return store.get(keyName)\n  },\n\n  // Returns passed attribute data from a passed key name\n  getValue (keyName, valueName) {\n    return store.get(keyName)[valueName]\n  },\n\n  getAllSessionData () {\n    return this.getKey(SESSION_DATA)\n  },\n\n  getAuthToken () {\n    return this.getValue(SESSION_DATA, 'ENCONTA_AUTH_TOKEN')\n  },\n\n  getUserData () {\n    return this.getValue(SESSION_DATA, 'user')\n  },\n\n  getTaxableEntities () {\n    return this.getValue(SESSION_DATA, 'taxableEntities')\n  },\n\n  getCurrentEntity () {\n    return this.getValue(SESSION_DATA, 'currentEntity')\n  },\n\n  // Checks if session has an auth token and a user stored, if so returns true\n  hasSession () {\n    this.init()\n    return !!(this.getAuthToken() && this.getUserData())\n  },\n\n  // Notifications\n  // Store notifications\n  setNotifications (notifications) {\n    this.insertIntoKey(NOTIFICATION_DATA, { notifications })\n  },\n\n  // Get all notification info\n  getAllNotifications () {\n    return this.getKey(NOTIFICATION_DATA)\n  },\n\n  // Get notifications\n  getNotifications () {\n    return this.getValue(NOTIFICATION_DATA, 'notifications')\n  },\n\n  // Initialize notifications as empty object\n  initNotifications () {\n    store.set(NOTIFICATION_DATA, {})\n  },\n\n  // Return false if notifications empty, null or undefined\n  hasNotifications () {\n    return !!this.getNotifications()\n  },\n  setFeatures (features) {\n    this.insertIntoKey(SESSION_DATA, { features })\n  },\n  getFeatures () {\n    return this.getValue(SESSION_DATA, 'features')\n  }\n}\n\nexport default AppStorage\n"]},"metadata":{},"sourceType":"module"}