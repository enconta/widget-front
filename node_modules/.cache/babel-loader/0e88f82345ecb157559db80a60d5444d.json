{"ast":null,"code":"import _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editUser/suscription/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router';\nimport { getPlanName } from 'utils';\nimport PaymentMethods from './paymentMethods';\nimport Premium from 'shared/premium';\nimport NewPaymentMethod from './paymentMethods/editingForm';\nimport { modalPlans, toggleBannerModal } from '../../viewInvoice/utilsRestrictions';\nimport classNames from 'classnames';\nimport NotificationsActions from 'actions/notifications';\nimport SuscriptionActions from 'actions/suscription';\nimport SuscriptionStore from 'stores/suscription';\nimport Freemium from 'shared/freemium';\nimport IntegralService from 'shared/integralService';\n\nfunction getCurrentState() {\n  return {\n    totalServices: SuscriptionStore.getTotalAmount(),\n    services: SuscriptionStore.getListServices(),\n    nextBillingDate: SuscriptionStore.getNextBillingDate()\n  };\n}\n\nvar Suscription =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Suscription, _Component);\n\n  function Suscription() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Suscription);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Suscription)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _objectSpread({}, getCurrentState(), {\n      showFormAddMethod: false\n    });\n\n    _this._onChange = function () {\n      var suscriptionStructure = getCurrentState();\n\n      _this.setState(suscriptionStructure);\n    };\n\n    _this.toggleAddMethod = function () {\n      _this.setState(function (state) {\n        return {\n          showFormAddMethod: !state.showFormAddMethod\n        };\n      });\n    };\n\n    _this.selectPlan = function () {\n      var planName = getPlanName();\n      var pathname = _this.props.location.pathname;\n      var premium = pathname.includes('mi-cuenta/suscripcion') && planName === 'Premium';\n      var _this$state = _this.state,\n          services = _this$state.services,\n          nextBillingDate = _this$state.nextBillingDate;\n      var plan = '';\n\n      switch (planName) {\n        case 'Freemium':\n          plan = React.createElement(Freemium, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          });\n          break;\n\n        case 'Premium':\n          plan = React.createElement(Premium, {\n            premium: premium,\n            controlPlans: function controlPlans() {\n              return toggleBannerModal(_assertThisInitialized(_assertThisInitialized(_this)), '', true);\n            },\n            services: services,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          });\n          break;\n\n        case 'Servicio integral':\n          plan = React.createElement(IntegralService, {\n            services: services,\n            nextBillingDate: nextBillingDate,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          });\n          break;\n      }\n\n      return plan;\n    };\n\n    return _this;\n  }\n\n  _createClass(Suscription, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      SuscriptionStore.addChangeListener(this._onChange);\n      SuscriptionActions.getServicesList().catch(function (error) {\n        NotificationsActions.error(error);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      SuscriptionStore.removeChangeListener(this._onChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var showFormAddMethod = this.state.showFormAddMethod;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"premium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"premium__card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(PaymentMethods, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        onClick: function onClick() {\n          return _this2.toggleAddMethod();\n        },\n        className: \"payment-methods__add-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Agregar tarjeta de d\\xE9bito o cr\\xE9dito\", ' ', React.createElement(\"i\", {\n        className: classNames('mdi mdi-chevron-down', {\n          'mdi-chevron-up': !showFormAddMethod\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), showFormAddMethod && React.createElement(NewPaymentMethod, {\n        premium: true,\n        hideForm: function hideForm() {\n          return _this2.toggleAddMethod();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(Link, {\n        to: \"/mi-cuenta/suscripcion/historial-pagos\",\n        className: \"is-uppercase link--underline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Historial de pagos\", React.createElement(\"i\", {\n        className: \"mdi mdi-chevron-double-right icon-aligned icon-aligned--margin-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \" premium__card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, this.selectPlan())), modalPlans(this));\n    }\n  }]);\n\n  return Suscription;\n}(Component);\n\nexport { Suscription as default };","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editUser/suscription/index.js"],"names":["React","Component","Fragment","Link","getPlanName","PaymentMethods","Premium","NewPaymentMethod","modalPlans","toggleBannerModal","classNames","NotificationsActions","SuscriptionActions","SuscriptionStore","Freemium","IntegralService","getCurrentState","totalServices","getTotalAmount","services","getListServices","nextBillingDate","getNextBillingDate","Suscription","state","showFormAddMethod","_onChange","suscriptionStructure","setState","toggleAddMethod","selectPlan","planName","pathname","props","location","premium","includes","plan","addChangeListener","getServicesList","catch","error","removeChangeListener"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router'\nimport { getPlanName } from 'utils'\nimport PaymentMethods from './paymentMethods'\nimport Premium from 'shared/premium'\nimport NewPaymentMethod from './paymentMethods/editingForm'\nimport {\n  modalPlans,\n  toggleBannerModal\n} from '../../viewInvoice/utilsRestrictions'\nimport classNames from 'classnames'\n\nimport NotificationsActions from 'actions/notifications'\nimport SuscriptionActions from 'actions/suscription'\n\nimport SuscriptionStore from 'stores/suscription'\nimport Freemium from 'shared/freemium'\nimport IntegralService from 'shared/integralService'\n\nfunction getCurrentState () {\n  return {\n    totalServices: SuscriptionStore.getTotalAmount(),\n    services: SuscriptionStore.getListServices(),\n    nextBillingDate: SuscriptionStore.getNextBillingDate()\n  }\n}\n\nexport default class Suscription extends Component {\n  state = { ...getCurrentState(), showFormAddMethod: false }\n\n  componentDidMount () {\n    SuscriptionStore.addChangeListener(this._onChange)\n    SuscriptionActions.getServicesList().catch(error => {\n      NotificationsActions.error(error)\n    })\n  }\n\n  _onChange = () => {\n    const suscriptionStructure = getCurrentState()\n    this.setState(suscriptionStructure)\n  }\n\n  componentWillUnmount () {\n    SuscriptionStore.removeChangeListener(this._onChange)\n  }\n\n  toggleAddMethod = () => {\n    this.setState(state => ({\n      showFormAddMethod: !state.showFormAddMethod\n    }))\n  }\n\n  selectPlan = () => {\n    const planName = getPlanName()\n    const { pathname } = this.props.location\n    const premium =\n      pathname.includes('mi-cuenta/suscripcion') && planName === 'Premium'\n    const { services, nextBillingDate } = this.state\n    let plan = ''\n    switch (planName) {\n      case 'Freemium':\n        plan = <Freemium />\n        break\n      case 'Premium':\n        plan = (\n          <Premium\n            premium={premium}\n            controlPlans={() => toggleBannerModal(this, '', true)}\n            services={services}\n          />\n        )\n        break\n      case 'Servicio integral':\n        plan = (\n          <IntegralService\n            services={services}\n            nextBillingDate={nextBillingDate}\n          />\n        )\n        break\n    }\n    return plan\n  }\n\n  render () {\n    const { showFormAddMethod } = this.state\n    return (\n      <Fragment>\n        <div className='premium'>\n          <div className='premium__card'>\n            <PaymentMethods />\n            <p\n              onClick={() => this.toggleAddMethod()}\n              className='payment-methods__add-card'\n            >\n              Agregar tarjeta de débito o crédito{' '}\n              <i\n                className={classNames('mdi mdi-chevron-down', {\n                  'mdi-chevron-up': !showFormAddMethod\n                })}\n              />\n            </p>\n            {showFormAddMethod && (\n              <NewPaymentMethod\n                premium\n                hideForm={() => this.toggleAddMethod()}\n              />\n            )}\n            <Link\n              to='/mi-cuenta/suscripcion/historial-pagos'\n              className='is-uppercase link--underline'\n            >\n              Historial de pagos\n              <i className='mdi mdi-chevron-double-right icon-aligned icon-aligned--margin-left' />\n            </Link>\n          </div>\n          <div className=' premium__card'>{this.selectPlan()}</div>\n        </div>\n        {modalPlans(this)}\n      </Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}