{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/paymentAccounts/editingForm/index.js\";\n// Libraries\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, browserHistory } from 'react-router';\nimport update from 'immutability-helper'; // Components\n\nimport PaymentAccountsActions from 'actions/paymentAccounts';\nimport NotificationActions from 'actions/notifications';\nimport PaymentAccountsStore from 'stores/paymentAccounts';\nimport Button from 'shared/button';\nimport TextField from 'shared/textField';\nimport SelectField from 'shared/selectField';\nimport Advertisment from '../aviso';\nimport IconButton from 'shared/iconButton'; // Set where all the required field refs are going to be\n// stored so we can validate them all when submit\n\nvar requiredFields = new Set();\n\nfunction getCurrentState() {\n  return {\n    paymentAccount: PaymentAccountsStore.getCurrent(),\n    accountNumbers: PaymentAccountsStore.getAccountNumbers(),\n    paymentAccountsLength: PaymentAccountsStore.getPaymentAccountLenght(),\n    lastNumbers: [],\n    banksList: PaymentAccountsStore.getBanksList(),\n    hasPassword: PaymentAccountsStore.getHasPassword()\n  };\n}\n\nvar NAME = 'name';\nvar BANK_NAME = 'bank_name';\nvar ACCOUNT_NUMBER = 'account_number';\nvar ACCOUNT_TYPE = 'account_type';\nvar ACTIVE = 'active';\nvar PASSWORD = 'pdf_password';\nexport var NewPaymentAccount =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPaymentAccount, _Component);\n\n  function NewPaymentAccount() {\n    var _getPrototypeOf2, _paymentAccount;\n\n    var _this;\n\n    _classCallCheck(this, NewPaymentAccount);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPaymentAccount)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.defaultState = {\n      requestInProgress: false,\n      isUpdate: false,\n      alertOpen: false,\n      paymentAccount: (_paymentAccount = {}, _defineProperty(_paymentAccount, NAME, ''), _defineProperty(_paymentAccount, BANK_NAME, ''), _defineProperty(_paymentAccount, ACCOUNT_NUMBER, ''), _defineProperty(_paymentAccount, ACCOUNT_TYPE, 'debit'), _defineProperty(_paymentAccount, ACTIVE, true), _defineProperty(_paymentAccount, PASSWORD, ''), _paymentAccount)\n    };\n    _this.state = _objectSpread({}, getCurrentState(), _this.defaultState);\n\n    _this.handleAccountType = function (changeEvent) {\n      var paymentAccount = Object.assign({}, _this.state.paymentAccount);\n      paymentAccount = _objectSpread({}, paymentAccount, _defineProperty({}, ACCOUNT_TYPE, changeEvent.target.value));\n\n      _this.setState(function (state) {\n        return _objectSpread({}, state, {\n          paymentAccount: _objectSpread({}, state.paymentAccount, _defineProperty({}, ACCOUNT_TYPE, paymentAccount[ACCOUNT_TYPE]))\n        });\n      });\n    };\n\n    _this.handlePasswordSwitch = function () {\n      _this.setState(function (state) {\n        return {\n          hasPassword: !state.hasPassword\n        };\n      });\n    };\n\n    _this.handleAccountStatus = function () {\n      var paymentAccount = Object.assign({}, _this.state.paymentAccount);\n\n      _this.setState(function (state) {\n        return _objectSpread({}, state, {\n          paymentAccount: _objectSpread({}, state.paymentAccount, _defineProperty({}, ACTIVE, !paymentAccount[ACTIVE]))\n        });\n      });\n    };\n\n    _this._onChange = function () {\n      _this.setState(getCurrentState());\n    };\n\n    _this.validateAll = function () {\n      return _toConsumableArray(requiredFields) // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(function (form) {\n        return form.validate();\n      }) // Calls the validate() method on each form\n      .every(function (e) {\n        return e;\n      }); // Checks if all validations suceeded\n    };\n\n    _this.validateEmptyTypeAccount = function () {\n      var paymentAccount = _this.state.paymentAccount;\n      var belvo = paymentAccount.belvo;\n\n      if (paymentAccount[ACCOUNT_TYPE] === null && !belvo) {\n        NotificationActions.error('Debes elegir tipo de cuenta');\n\n        _this.setState({\n          requestInProgress: false\n        });\n\n        return false;\n      } else return true;\n    };\n\n    _this.selectDataToSend = function () {\n      var paymentAccount = _this.state.paymentAccount;\n      var belvo = paymentAccount.belvo;\n      var data = {};\n\n      if (!belvo) {\n        var _payment_account;\n\n        data = {\n          payment_account: (_payment_account = {}, _defineProperty(_payment_account, NAME, paymentAccount[NAME]), _defineProperty(_payment_account, BANK_NAME, paymentAccount[BANK_NAME]), _defineProperty(_payment_account, ACCOUNT_NUMBER, paymentAccount[ACCOUNT_NUMBER]), _defineProperty(_payment_account, ACCOUNT_TYPE, paymentAccount[ACCOUNT_TYPE]), _defineProperty(_payment_account, ACTIVE, paymentAccount[ACTIVE]), _defineProperty(_payment_account, PASSWORD, paymentAccount[PASSWORD]), _payment_account)\n        };\n      } else {\n        var _payment_account2;\n\n        data = {\n          payment_account: (_payment_account2 = {}, _defineProperty(_payment_account2, NAME, paymentAccount[NAME]), _defineProperty(_payment_account2, ACTIVE, paymentAccount[ACTIVE]), _payment_account2)\n        };\n      }\n\n      return data;\n    };\n\n    _this.sendData = function (event) {\n      event.preventDefault();\n      var _this$state = _this.state,\n          paymentAccount = _this$state.paymentAccount,\n          requestInProgress = _this$state.requestInProgress,\n          isUpdate = _this$state.isUpdate;\n\n      if (_this.validateAll() && _this.validateEmptyTypeAccount() && !requestInProgress) {\n        var apiCall = isUpdate ? PaymentAccountsActions.update : PaymentAccountsActions.create;\n        var id = paymentAccount.id;\n        apiCall({\n          data: _this.selectDataToSend(),\n          id: id\n        }).then(function (_ref) {\n          var error = _ref.error;\n\n          if (error) {\n            throw new Error(error);\n          }\n\n          NotificationActions.success('La cuenta ha sido editada correctamente');\n\n          if (_this.props.onSave) {\n            _this.props.onSave();\n          } else {\n            _this.returnToListing();\n          }\n        }).catch(function (error) {\n          NotificationActions.error(\"'\".concat(Array.isArray(error) ? error.join(\"', \\n '\") : error, \"'\"));\n\n          _this.setState({\n            requestInProgress: false\n          });\n        });\n      }\n    };\n\n    _this.onChange = function (field) {\n      return function (e) {\n        var value = e.target.value;\n\n        _this.setState(function (state) {\n          return {\n            paymentAccount: update(state.paymentAccount, _defineProperty({}, field, {\n              $set: value\n            }))\n          };\n        });\n      };\n    };\n\n    _this.returnToListing = function () {\n      browserHistory.push('/cuentas-de-pago');\n    };\n\n    return _this;\n  }\n\n  _createClass(NewPaymentAccount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Adds listener, when the Store changes, trigger the _onChange callback func\n      PaymentAccountsStore.addChangeListener(this._onChange);\n      PaymentAccountsActions.getList();\n      PaymentAccountsActions.getBanksList().catch(function (error) {\n        NotificationActions.error(error);\n      }); // If we are supposed to be editing a document, ask for document info\n\n      if (this.props.location.pathname.includes('/cuenta-de-pago/') && this.props.params.id) {\n        this.setState({\n          isUpdate: true\n        });\n        PaymentAccountsActions.getPaymentAccount(this.props.params.id);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      PaymentAccountsStore.removeChangeListener(this._onChange);\n      PaymentAccountsActions.clearCurrent(); // Clears the stored requiredFields\n\n      requiredFields.clear();\n    } // render the button that is active (credit/debit)\n\n  }, {\n    key: \"render\",\n    // Render form only\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          paymentAccount = _this$state2.paymentAccount,\n          accountNumbers = _this$state2.accountNumbers,\n          paymentAccountsLength = _this$state2.paymentAccountsLength,\n          banksList = _this$state2.banksList,\n          hasPassword = _this$state2.hasPassword;\n      var belvo = paymentAccount.belvo;\n      var normalAccount = belvo === null;\n      var newAccount = this.props.location.pathname;\n      var formNewAccount = newAccount.includes('nueva');\n      return React.createElement(\"form\", {\n        onSubmit: this.sendData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"accountsNumber accountsNumber--margin-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Se han registrado\", ' ', React.createElement(\"span\", {\n        className: \"has-text-weight-bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, Number(paymentAccountsLength), ' '), \"cuenta(s), con las terminaciones:\", ' ', React.createElement(\"span\", {\n        className: \"has-text-weight-bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"'\", accountNumbers.join(\"', '\"), \"'\")), (normalAccount || formNewAccount) && React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \" Tipo de Cuenta*\"), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"option-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"option-button__label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"credit\",\n        checked: paymentAccount[ACCOUNT_TYPE] === 'credit',\n        onChange: this.handleAccountType,\n        className: \"option-button__label__input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), ' ', React.createElement(\"span\", {\n        className: \"option-button__label__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Cr\\xE9dito\")))), React.createElement(\"div\", {\n        className: \"column is-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"option-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"option-button__label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"radio\",\n        value: \"debit\",\n        checked: paymentAccount[ACCOUNT_TYPE] === 'debit',\n        onChange: this.handleAccountType,\n        className: \"option-button__label__input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), ' ', React.createElement(\"span\", {\n        className: \"option-button__label__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, \"D\\xE9bito\")))))), (normalAccount || formNewAccount) && React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column has-text-black-bis\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        label: \"Banco*\",\n        placeholder: \"Selecciona un Banco\",\n        options: banksList,\n        value: paymentAccount[BANK_NAME],\n        onChange: this.onChange(BANK_NAME),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"\\xDAltimos 4 d\\xEDgitos*\",\n        value: paymentAccount[ACCOUNT_NUMBER],\n        onChange: this.onChange(ACCOUNT_NUMBER),\n        type: \"number\",\n        maxLength: 4,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-half\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Proporcionar Alias*\",\n        value: paymentAccount[NAME],\n        onChange: this.onChange(NAME),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"status\",\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"btn__status\",\n        onChange: function onChange() {\n          return _this2.handleAccountStatus(paymentAccount[ACTIVE]);\n        },\n        type: \"checkbox\",\n        id: \"status\",\n        checked: paymentAccount[ACTIVE],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"btn__switch btn--round\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"btn__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, \"Estatus:\")))), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(Advertisment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }))), (normalAccount || formNewAccount) && React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column flex-start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"password-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, \"Mis res\\xFAmenes de movimiento tienen contrase\\xF1a:\"), React.createElement(\"label\", {\n        htmlFor: \"password\",\n        className: \"btn btn--margin-left-less\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"btn__status\",\n        onChange: this.handlePasswordSwitch,\n        type: \"checkbox\",\n        id: \"password\",\n        checked: hasPassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"btn__switch btn--round\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"btn__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        icon: \"information-outline\",\n        tooltip: \"En ocasiones, algunos bancos emiten documentos protegidos para seguridad de sus clientes.\",\n        tooltipStyle: 'secundary',\n        className: \"icon-button--margin-left-8px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }))), hasPassword && React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        value: paymentAccount[PASSWORD],\n        onChange: this.onChange(PASSWORD),\n        placeholder: \"Contrase\\xF1a\",\n        type: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"flex-end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, React.createElement(Button, {\n        icon: \"cancel\",\n        onClick: this.props.onCancel || this.returnToListing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, \"Cancelar\"), React.createElement(Button, {\n        buttonStyle: \"primary\",\n        icon: \"content-save\",\n        type: \"submit\",\n        loading: this.state.requestInProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, \"Guardar\")));\n    }\n  }]);\n\n  return NewPaymentAccount;\n}(Component);\n\nvar Account = function Account(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/cuentas-de-pago\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398\n    },\n    __self: this\n  }, React.createElement(Button, {\n    buttonStyle: \"link\",\n    icon: \"chevron-double-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, \"Volver\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"subheader-green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405\n    },\n    __self: this\n  }, props.route.title), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406\n    },\n    __self: this\n  }, React.createElement(NewPaymentAccount, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407\n    },\n    __self: this\n  }))));\n};\n\nNewPaymentAccount.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string\n  }),\n  params: PropTypes.shape({\n    id: PropTypes.string\n  }),\n  route: PropTypes.shape({\n    title: PropTypes.string\n  })\n};\nexport default Account;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/paymentAccounts/editingForm/index.js"],"names":["React","Component","Fragment","PropTypes","Link","browserHistory","update","PaymentAccountsActions","NotificationActions","PaymentAccountsStore","Button","TextField","SelectField","Advertisment","IconButton","requiredFields","Set","getCurrentState","paymentAccount","getCurrent","accountNumbers","getAccountNumbers","paymentAccountsLength","getPaymentAccountLenght","lastNumbers","banksList","getBanksList","hasPassword","getHasPassword","NAME","BANK_NAME","ACCOUNT_NUMBER","ACCOUNT_TYPE","ACTIVE","PASSWORD","NewPaymentAccount","defaultState","requestInProgress","isUpdate","alertOpen","state","handleAccountType","changeEvent","Object","assign","target","value","setState","handlePasswordSwitch","handleAccountStatus","_onChange","validateAll","filter","Boolean","map","form","validate","every","e","validateEmptyTypeAccount","belvo","error","selectDataToSend","data","payment_account","sendData","event","preventDefault","apiCall","create","id","then","Error","success","props","onSave","returnToListing","catch","Array","isArray","join","onChange","field","$set","push","addChangeListener","getList","location","pathname","includes","params","getPaymentAccount","removeChangeListener","clearCurrent","clear","normalAccount","newAccount","formNewAccount","Number","r","add","onCancel","Account","route","title","propTypes","shape","string"],"mappings":"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","sourcesContent":["// Libraries\nimport React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, browserHistory } from 'react-router'\nimport update from 'immutability-helper'\n\n// Components\nimport PaymentAccountsActions from 'actions/paymentAccounts'\nimport NotificationActions from 'actions/notifications'\nimport PaymentAccountsStore from 'stores/paymentAccounts'\nimport Button from 'shared/button'\nimport TextField from 'shared/textField'\nimport SelectField from 'shared/selectField'\nimport Advertisment from '../aviso'\nimport IconButton from 'shared/iconButton'\n\n// Set where all the required field refs are going to be\n// stored so we can validate them all when submit\nconst requiredFields = new Set()\n\nfunction getCurrentState () {\n  return {\n    paymentAccount: PaymentAccountsStore.getCurrent(),\n    accountNumbers: PaymentAccountsStore.getAccountNumbers(),\n    paymentAccountsLength: PaymentAccountsStore.getPaymentAccountLenght(),\n    lastNumbers: [],\n    banksList: PaymentAccountsStore.getBanksList(),\n    hasPassword: PaymentAccountsStore.getHasPassword()\n  }\n}\n\nconst NAME = 'name'\nconst BANK_NAME = 'bank_name'\nconst ACCOUNT_NUMBER = 'account_number'\nconst ACCOUNT_TYPE = 'account_type'\nconst ACTIVE = 'active'\nconst PASSWORD = 'pdf_password'\n\nexport class NewPaymentAccount extends Component {\n  defaultState = {\n    requestInProgress: false,\n    isUpdate: false,\n    alertOpen: false,\n    paymentAccount: {\n      [NAME]: '',\n      [BANK_NAME]: '',\n      [ACCOUNT_NUMBER]: '',\n      [ACCOUNT_TYPE]: 'debit',\n      [ACTIVE]: true,\n      [PASSWORD]: ''\n    }\n  }\n\n  state = { ...getCurrentState(), ...this.defaultState }\n\n  componentDidMount () {\n    // Adds listener, when the Store changes, trigger the _onChange callback func\n    PaymentAccountsStore.addChangeListener(this._onChange)\n    PaymentAccountsActions.getList()\n    PaymentAccountsActions.getBanksList().catch(error => {\n      NotificationActions.error(error)\n    })\n    // If we are supposed to be editing a document, ask for document info\n    if (\n      this.props.location.pathname.includes('/cuenta-de-pago/') &&\n      this.props.params.id\n    ) {\n      this.setState({ isUpdate: true })\n      PaymentAccountsActions.getPaymentAccount(this.props.params.id)\n    }\n  }\n\n  componentWillUnmount () {\n    PaymentAccountsStore.removeChangeListener(this._onChange)\n    PaymentAccountsActions.clearCurrent()\n    // Clears the stored requiredFields\n    requiredFields.clear()\n  }\n\n  // render the button that is active (credit/debit)\n  handleAccountType = changeEvent => {\n    let paymentAccount = Object.assign({}, this.state.paymentAccount)\n    paymentAccount = {\n      ...paymentAccount,\n      [ACCOUNT_TYPE]: changeEvent.target.value\n    }\n\n    this.setState(state => ({\n      ...state,\n      paymentAccount: {\n        ...state.paymentAccount,\n        [ACCOUNT_TYPE]: paymentAccount[ACCOUNT_TYPE]\n      }\n    }))\n  }\n\n  handlePasswordSwitch = () => {\n    this.setState(state => ({ hasPassword: !state.hasPassword }))\n  }\n\n  handleAccountStatus = () => {\n    let paymentAccount = Object.assign({}, this.state.paymentAccount)\n\n    this.setState(state => ({\n      ...state,\n      paymentAccount: {\n        ...state.paymentAccount,\n        [ACTIVE]: !paymentAccount[ACTIVE]\n      }\n    }))\n  }\n\n  // When the store changes, the state goes to it and pulls the updated data\n  _onChange = () => {\n    this.setState(getCurrentState())\n  }\n\n  // Validate all inputs\n  validateAll = () => {\n    return [...requiredFields] // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(form => form.validate()) // Calls the validate() method on each form\n      .every(e => e) // Checks if all validations suceeded\n  }\n\n  validateEmptyTypeAccount = () => {\n    const { paymentAccount } = this.state\n    const { belvo } = paymentAccount\n\n    if (paymentAccount[ACCOUNT_TYPE] === null && !belvo) {\n      NotificationActions.error('Debes elegir tipo de cuenta')\n      this.setState({ requestInProgress: false })\n      return false\n    } else return true\n  }\n\n  selectDataToSend = () => {\n    const { paymentAccount } = this.state\n    const { belvo } = paymentAccount\n\n    let data = {}\n    if (!belvo) {\n      data = {\n        payment_account: {\n          [NAME]: paymentAccount[NAME],\n          [BANK_NAME]: paymentAccount[BANK_NAME],\n          [ACCOUNT_NUMBER]: paymentAccount[ACCOUNT_NUMBER],\n          [ACCOUNT_TYPE]: paymentAccount[ACCOUNT_TYPE],\n          [ACTIVE]: paymentAccount[ACTIVE],\n          [PASSWORD]: paymentAccount[PASSWORD]\n        }\n      }\n    } else {\n      data = {\n        payment_account: {\n          [NAME]: paymentAccount[NAME],\n          [ACTIVE]: paymentAccount[ACTIVE]\n        }\n      }\n    }\n    return data\n  }\n\n  sendData = event => {\n    event.preventDefault()\n    const { paymentAccount, requestInProgress, isUpdate } = this.state\n\n    if (\n      this.validateAll() &&\n      this.validateEmptyTypeAccount() &&\n      !requestInProgress\n    ) {\n      const apiCall = isUpdate\n        ? PaymentAccountsActions.update\n        : PaymentAccountsActions.create\n      const { id } = paymentAccount\n      apiCall({ data: this.selectDataToSend(), id })\n        .then(({ error }) => {\n          if (error) {\n            throw new Error(error)\n          }\n          NotificationActions.success('La cuenta ha sido editada correctamente')\n          if (this.props.onSave) {\n            this.props.onSave()\n          } else {\n            this.returnToListing()\n          }\n        })\n        .catch(error => {\n          NotificationActions.error(\n            `'${Array.isArray(error) ? error.join(\"', \\n '\") : error}'`\n          )\n          this.setState({ requestInProgress: false })\n        })\n    }\n  }\n\n  // Handle changes on paymentAccount\n  onChange = field => e => {\n    const { value } = e.target\n    this.setState(state => ({\n      paymentAccount: update(state.paymentAccount, {\n        [field]: { $set: value }\n      })\n    }))\n  }\n\n  returnToListing = () => {\n    browserHistory.push('/cuentas-de-pago')\n  }\n  // Render form only\n  render () {\n    const {\n      paymentAccount,\n      accountNumbers,\n      paymentAccountsLength,\n      banksList,\n      hasPassword\n    } = this.state\n\n    const { belvo } = paymentAccount\n    const normalAccount = belvo === null\n    const newAccount = this.props.location.pathname\n    const formNewAccount = newAccount.includes('nueva')\n\n    return (\n      <form onSubmit={this.sendData}>\n        <div className='accountsNumber accountsNumber--margin-bottom'>\n          Se han registrado{' '}\n          <span className='has-text-weight-bold'>\n            {Number(paymentAccountsLength)}{' '}\n          </span>\n          cuenta(s), con las terminaciones:{' '}\n          <span className='has-text-weight-bold'>\n            '{accountNumbers.join(\"', '\")}'\n          </span>\n        </div>\n        {(normalAccount || formNewAccount) && (\n          <Fragment>\n            <p className='caption'> Tipo de Cuenta*</p>\n            <div className='columns'>\n              <div className='column is-3'>\n                <div className='option-button'>\n                  <label className='option-button__label'>\n                    <input\n                      type='radio'\n                      value='credit'\n                      checked={paymentAccount[ACCOUNT_TYPE] === 'credit'}\n                      onChange={this.handleAccountType}\n                      className='option-button__label__input'\n                    />{' '}\n                    <span className='option-button__label__text'>Crédito</span>\n                  </label>\n                </div>\n              </div>\n              <div className='column is-3'>\n                <div className='option-button'>\n                  <label className='option-button__label'>\n                    <input\n                      type='radio'\n                      value='debit'\n                      checked={paymentAccount[ACCOUNT_TYPE] === 'debit'}\n                      onChange={this.handleAccountType}\n                      className='option-button__label__input'\n                    />{' '}\n                    <span className='option-button__label__text'>Débito</span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </Fragment>\n        )}\n\n        {(normalAccount || formNewAccount) && (\n          <div className='columns'>\n            <div className='column has-text-black-bis'>\n              <SelectField\n                label='Banco*'\n                placeholder='Selecciona un Banco'\n                options={banksList}\n                value={paymentAccount[BANK_NAME]}\n                onChange={this.onChange(BANK_NAME)}\n                ref={r => requiredFields.add(r)}\n              />\n            </div>\n\n            <div className='column'>\n              <TextField\n                label='Últimos 4 dígitos*'\n                value={paymentAccount[ACCOUNT_NUMBER]}\n                onChange={this.onChange(ACCOUNT_NUMBER)}\n                type='number'\n                maxLength={4}\n                ref={r => requiredFields.add(r)}\n              />\n            </div>\n          </div>\n        )}\n\n        <div className='columns'>\n          <div className='column is-half'>\n            <TextField\n              label='Proporcionar Alias*'\n              value={paymentAccount[NAME]}\n              onChange={this.onChange(NAME)}\n              ref={r => requiredFields.add(r)}\n            />\n          </div>\n        </div>\n        <div className='columns'>\n          <div className='column is-3'>\n            <label htmlFor='status' className='btn'>\n              <input\n                className='btn__status'\n                onChange={() =>\n                  this.handleAccountStatus(paymentAccount[ACTIVE])\n                }\n                type='checkbox'\n                id='status'\n                checked={paymentAccount[ACTIVE]}\n              />\n              <span className='btn__switch btn--round' />\n              <span className='btn__text'>Estatus:</span>\n            </label>\n          </div>\n        </div>\n        <div className='columns'>\n          <div className='column is-12'>\n            <Advertisment />\n          </div>\n        </div>\n\n        {(normalAccount || formNewAccount) && (\n          <Fragment>\n            <div className='columns'>\n              <div className='column flex-start'>\n                <p className='password-text'>\n                  Mis resúmenes de movimiento tienen contraseña:\n                </p>\n                <label htmlFor='password' className='btn btn--margin-left-less'>\n                  <input\n                    className='btn__status'\n                    onChange={this.handlePasswordSwitch}\n                    type='checkbox'\n                    id='password'\n                    checked={hasPassword}\n                  />\n                  <span className='btn__switch btn--round' />\n                  <span className='btn__text' />\n                </label>\n                <IconButton\n                  icon='information-outline'\n                  tooltip={`En ocasiones, algunos bancos emiten documentos protegidos para seguridad de sus clientes.`}\n                  tooltipStyle={'secundary'}\n                  className='icon-button--margin-left-8px'\n                />\n              </div>\n            </div>\n            {hasPassword && (\n              <div className='columns'>\n                <div className='column is-3'>\n                  <TextField\n                    value={paymentAccount[PASSWORD]}\n                    onChange={this.onChange(PASSWORD)}\n                    placeholder='Contraseña'\n                    type='password'\n                  />\n                </div>\n              </div>\n            )}\n          </Fragment>\n        )}\n\n        <div className='flex-end'>\n          <Button\n            icon='cancel'\n            onClick={this.props.onCancel || this.returnToListing}\n          >\n            Cancelar\n          </Button>\n\n          <Button\n            buttonStyle='primary'\n            icon='content-save'\n            type='submit'\n            loading={this.state.requestInProgress}\n          >\n            Guardar\n          </Button>\n        </div>\n      </form>\n    )\n  }\n}\n\nconst Account = props => (\n  <div>\n    <Link to='/cuentas-de-pago'>\n      <Button buttonStyle='link' icon='chevron-double-left'>\n        Volver\n      </Button>\n    </Link>\n    <br />\n    <br />\n    <h1 className='subheader-green'>{props.route.title}</h1>\n    <div>\n      <NewPaymentAccount {...props} />\n    </div>\n  </div>\n)\n\nNewPaymentAccount.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string\n  }),\n  params: PropTypes.shape({\n    id: PropTypes.string\n  }),\n  route: PropTypes.shape({\n    title: PropTypes.string\n  })\n}\n\nexport default Account\n"]},"metadata":{},"sourceType":"module"}