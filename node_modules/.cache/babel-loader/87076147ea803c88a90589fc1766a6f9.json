{"ast":null,"code":"import _regeneratorRuntime from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/appWideNotification/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router';\nimport { isWarningActivated } from 'utils';\nimport classNames from 'classnames';\nimport AppStorage from 'api/appStorage';\nimport API from 'api';\nimport SessionStore from 'stores/session';\nimport LogRocket from 'logrocket';\nimport Advertisment from 'shared/advertisment';\nimport pluralize from 'pluralize';\nimport DiagnosisStore from 'stores/diagnosis';\nimport SmartSyncStore from 'stores/smartsync';\nimport RegisterActions from 'actions/register';\nimport PlanActions from 'actions/plan';\nimport PlanStore from 'stores/plan';\nimport SmartSyncActions from 'actions/smartsync'; // Get app wide notifications every time the user opens the app\n// Conditions:\n// - Read from SessionStore if the user has a message\n// - If the user has a message, check when was updated\n// - If updated less than 6 hours ago, don't do anything\n// - If updated more than 6 hours ago, check if there are new messages or the message should be deactivated\n// - Expected message format:\n// user-notification: {\n//   message: 'Manda tu resumen de movimientos', // If this is null or empty string the message will be deactivated\n//   link: '', // Absolute link to a path inside the app, if null or empty string the message won't have a link\n//   type: 'alert'|'success'|'info'|'warning'\n// }\n\nvar getCurrentState = function getCurrentState() {\n  return {\n    diagnosis: DiagnosisStore.getDiagnosis(),\n    remainingDays: PlanStore.getRemainingDays(),\n    hasToIntroduceToken: SmartSyncStore.getInfoToken()\n  };\n};\n\nvar AppWideNotification =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AppWideNotification, _Component);\n\n  function AppWideNotification() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AppWideNotification);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AppWideNotification)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _objectSpread({\n      notifications: [],\n      showAdvertisement: false\n    }, getCurrentState());\n\n    _this._onChange = function () {\n      _this.setState(getCurrentState());\n    };\n\n    _this.getNotifications =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _ref2, notifications;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return API.User.GetNotifications();\n\n            case 2:\n              _ref2 = _context.sent;\n              notifications = _ref2.notifications;\n              if (!AppStorage.hasNotifications()) AppStorage.initNotifications();\n              AppStorage.setNotifications(_toConsumableArray(notifications));\n\n              _this.setState({\n                notifications: notifications\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.returnText = function () {\n      return React.createElement(\"p\", {\n        className: \"app-wide-notifications--notification__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"A partir del \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"1 de abril\"), \" Enconta cambia su n\\xFAmero telef\\xF3nico, ahora podr\\xE1s contactarnos marcando\", ' ', React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"800 479 5555\"), \".\");\n    };\n\n    _this.link = function (step) {\n      var currentEntity = SessionStore.getCurrentEntity();\n      var src = '';\n\n      switch (step) {\n        case 'registry':\n          src = \"/diagnostico/credenciales/\".concat(currentEntity.rfc);\n          break;\n\n        case 'in_progress':\n          src = '/diagnostico/en-proceso';\n          break;\n\n        case 'done':\n          src = '/diagnostico/listo';\n          break;\n      }\n\n      return src;\n    };\n\n    _this.diagnosisInProgress = function () {\n      var step = _this.state.diagnosis.step;\n      var nameStep = step === 'done' ? ' listo' : ' en proceso';\n      return React.createElement(\"p\", {\n        className: \"app-wide-notifications--notification__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Tu diagn\\xF3stico est\\xE1\", nameStep, \",\", ' ', React.createElement(Link, {\n        to: _this.link(step),\n        className: \"app-wide-notifications--notification__text__link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"da clic aqu\\xED\"), ' ', \"para ver el estatus.\");\n    };\n\n    _this.trialText = function () {\n      var remainingDays = _this.state.remainingDays;\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Te quedan \".concat(remainingDays, \" \").concat(pluralize('dÃ­as', remainingDays), \" de plan premium gratis\"));\n    };\n\n    _this.token = function () {\n      var bank = 'bancomer';\n      return React.createElement(\"p\", {\n        className: \"app-wide-notifications--notification__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Por favor actualiza tu token de \", bank, \" para poder descargar los movimientos bancarios del pr\\xF3ximo mes, dando\", ' ', React.createElement(Link, {\n        to: \"/\".concat(bank, \"/actualizar-token/\"),\n        className: \"app-wide-notifications--notification__text__link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"clic aqu\\xED\"), ' ');\n    };\n\n    _this.infoDiagnosis = function () {\n      return React.createElement(Advertisment, {\n        text: _this.diagnosisInProgress(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      });\n    };\n\n    _this.infoToken = function () {\n      return React.createElement(Advertisment, {\n        text: _this.token(),\n        diagnosis: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AppWideNotification, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var currentEntity = SessionStore.getCurrentEntity();\n      var status = currentEntity.status,\n          id = currentEntity.id,\n          plan = currentEntity.plan;\n      DiagnosisStore.addChangeListener(this._onChange);\n      PlanStore.addChangeListener(this._onChange);\n      SmartSyncStore.addChangeListener(this._onChange);\n      SmartSyncActions.tokenDefeated();\n      this.getNotifications();\n      this.logRocket();\n\n      if (status === 'demo') {\n        RegisterActions.askDiagnosisStatus(currentEntity.user_id);\n      }\n\n      if (plan === 'free_premium') {\n        PlanActions.getPlanRemainingDays(id);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      DiagnosisStore.removeChangeListener(this._onChange);\n      SmartSyncStore.removeChangeListener(this._onChange);\n      RegisterActions.clearCurrentDiagnosis();\n    }\n  }, {\n    key: \"logRocket\",\n    value: function logRocket() {\n      var user = SessionStore.getUser();\n      var userId = user.id.toString();\n      LogRocket.identify(userId, {\n        name: user.name,\n        email: user.email\n      });\n    }\n  }, {\n    key: \"renderNotification\",\n    value: function renderNotification(notification, i) {\n      var accountingPeriod = this.state.accountingPeriod;\n\n      if (!notification.link) {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"columns app-wide-notifications--notification--info \".concat(notification.type),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"column is-narrow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"mdi mdi-calendar-clock icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"column is-10\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, notification.message));\n      }\n\n      if (accountingPeriod) {\n        return React.createElement(\"div\", {\n          key: i,\n          className: \"app-wide-notifications--notification \".concat(notification.type),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/mi-contabilidad/\".concat(accountingPeriod.id, \"/ver\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, notification.message));\n      }\n    }\n  }, {\n    key: \"renderTrialAdvertisement\",\n    value: function renderTrialAdvertisement() {\n      var remainingDays = this.state.remainingDays;\n      var color = remainingDays > 1 ? 'warning' : 'red';\n      return React.createElement(Advertisment, {\n        text: this.trialText(),\n        color: color,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          notifications = _this$state.notifications,\n          hasToIntroduceToken = _this$state.hasToIntroduceToken;\n      var warnig = isWarningActivated();\n      var _this$state2 = this.state,\n          showAdvertisement = _this$state2.showAdvertisement,\n          remainingDays = _this$state2.remainingDays;\n      var currentEntity = SessionStore.getCurrentEntity();\n      var status = currentEntity.status,\n          plan = currentEntity.plan;\n      var step = this.state.diagnosis.step;\n      var isTrialAdvertisementShowed = plan === 'free_premium' && remainingDays <= 5;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, isTrialAdvertisementShowed && this.renderTrialAdvertisement(), hasToIntroduceToken && this.infoToken(), showAdvertisement && React.createElement(Advertisment, {\n        text: this.returnText(),\n        icon: 'alert-circle-outline',\n        color: 'yellow',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), status === 'demo' && (step === 'registry' || step === 'in_progress' || step === 'done') && this.infoDiagnosis(), notifications.length > 0 && React.createElement(\"div\", {\n        className: classNames('app-wide-notifications', {\n          'app-wide-notifications--warning-active': warnig\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, notifications.map(function (notification, i) {\n        return _this2.renderNotification(notification, i);\n      })));\n    }\n  }]);\n\n  return AppWideNotification;\n}(Component);\n\nexport default AppWideNotification;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/shared/appWideNotification/index.js"],"names":["React","Component","Fragment","Link","isWarningActivated","classNames","AppStorage","API","SessionStore","LogRocket","Advertisment","pluralize","DiagnosisStore","SmartSyncStore","RegisterActions","PlanActions","PlanStore","SmartSyncActions","getCurrentState","diagnosis","getDiagnosis","remainingDays","getRemainingDays","hasToIntroduceToken","getInfoToken","AppWideNotification","state","notifications","showAdvertisement","_onChange","setState","getNotifications","User","GetNotifications","hasNotifications","initNotifications","setNotifications","returnText","link","step","currentEntity","getCurrentEntity","src","rfc","diagnosisInProgress","nameStep","trialText","token","bank","infoDiagnosis","infoToken","status","id","plan","addChangeListener","tokenDefeated","logRocket","askDiagnosisStatus","user_id","getPlanRemainingDays","removeChangeListener","clearCurrentDiagnosis","user","getUser","userId","toString","identify","name","email","notification","i","accountingPeriod","type","message","color","warnig","isTrialAdvertisementShowed","renderTrialAdvertisement","length","map","renderNotification"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Link } from 'react-router'\nimport { isWarningActivated } from 'utils'\nimport classNames from 'classnames'\nimport AppStorage from 'api/appStorage'\nimport API from 'api'\nimport SessionStore from 'stores/session'\nimport LogRocket from 'logrocket'\nimport Advertisment from 'shared/advertisment'\nimport pluralize from 'pluralize'\n\nimport DiagnosisStore from 'stores/diagnosis'\nimport SmartSyncStore from 'stores/smartsync'\n\nimport RegisterActions from 'actions/register'\nimport PlanActions from 'actions/plan'\nimport PlanStore from 'stores/plan'\nimport SmartSyncActions from 'actions/smartsync'\n\n// Get app wide notifications every time the user opens the app\n\n// Conditions:\n// - Read from SessionStore if the user has a message\n// - If the user has a message, check when was updated\n// - If updated less than 6 hours ago, don't do anything\n// - If updated more than 6 hours ago, check if there are new messages or the message should be deactivated\n// - Expected message format:\n// user-notification: {\n//   message: 'Manda tu resumen de movimientos', // If this is null or empty string the message will be deactivated\n//   link: '', // Absolute link to a path inside the app, if null or empty string the message won't have a link\n//   type: 'alert'|'success'|'info'|'warning'\n// }\n\nconst getCurrentState = () => {\n  return {\n    diagnosis: DiagnosisStore.getDiagnosis(),\n    remainingDays: PlanStore.getRemainingDays(),\n    hasToIntroduceToken: SmartSyncStore.getInfoToken()\n  }\n}\n\nclass AppWideNotification extends Component {\n  state = {\n    notifications: [],\n    showAdvertisement: false,\n    ...getCurrentState()\n  }\n\n  componentDidMount () {\n    const currentEntity = SessionStore.getCurrentEntity()\n    const { status, id, plan } = currentEntity\n    DiagnosisStore.addChangeListener(this._onChange)\n    PlanStore.addChangeListener(this._onChange)\n    SmartSyncStore.addChangeListener(this._onChange)\n    SmartSyncActions.tokenDefeated()\n    this.getNotifications()\n    this.logRocket()\n    if (status === 'demo') {\n      RegisterActions.askDiagnosisStatus(currentEntity.user_id)\n    }\n    if (plan === 'free_premium') {\n      PlanActions.getPlanRemainingDays(id)\n    }\n  }\n\n  componentWillUnmount () {\n    DiagnosisStore.removeChangeListener(this._onChange)\n    SmartSyncStore.removeChangeListener(this._onChange)\n    RegisterActions.clearCurrentDiagnosis()\n  }\n\n  _onChange = () => {\n    this.setState(getCurrentState())\n  }\n\n  logRocket () {\n    const user = SessionStore.getUser()\n    const userId = user.id.toString()\n    LogRocket.identify(userId, {\n      name: user.name,\n      email: user.email\n    })\n  }\n\n  getNotifications = async () => {\n    const { notifications } = await API.User.GetNotifications()\n\n    if (!AppStorage.hasNotifications()) AppStorage.initNotifications()\n    AppStorage.setNotifications([...notifications])\n    this.setState({ notifications })\n  }\n\n  renderNotification (notification, i) {\n    const { accountingPeriod } = this.state\n\n    if (!notification.link) {\n      return (\n        <div\n          key={i}\n          className={`columns app-wide-notifications--notification--info ${notification.type}`}\n        >\n          <div className='column is-narrow'>\n            <i className='mdi mdi-calendar-clock icon' />\n          </div>\n          <div className='column is-10'>{notification.message}</div>\n        </div>\n      )\n    }\n\n    if (accountingPeriod) {\n      return (\n        <div\n          key={i}\n          className={`app-wide-notifications--notification ${notification.type}`}\n        >\n          <Link to={`/mi-contabilidad/${accountingPeriod.id}/ver`}>\n            {notification.message}\n          </Link>\n        </div>\n      )\n    }\n  }\n\n  returnText = () => {\n    return (\n      <p className='app-wide-notifications--notification__text'>\n        A partir del <strong>1 de abril</strong> Enconta cambia su nÃºmero\n        telefÃ³nico, ahora podrÃ¡s contactarnos marcando{' '}\n        <strong>800 479 5555</strong>.\n      </p>\n    )\n  }\n\n  link = step => {\n    const currentEntity = SessionStore.getCurrentEntity()\n    let src = ''\n    switch (step) {\n      case 'registry':\n        src = `/diagnostico/credenciales/${currentEntity.rfc}`\n        break\n      case 'in_progress':\n        src = '/diagnostico/en-proceso'\n        break\n      case 'done':\n        src = '/diagnostico/listo'\n        break\n    }\n    return src\n  }\n\n  diagnosisInProgress = () => {\n    const { step } = this.state.diagnosis\n    const nameStep = step === 'done' ? ' listo' : ' en proceso'\n    return (\n      <p className='app-wide-notifications--notification__text'>\n        Tu diagnÃ³stico estÃ¡{nameStep},{' '}\n        <Link\n          to={this.link(step)}\n          className='app-wide-notifications--notification__text__link'\n        >\n          da clic aquÃ­\n        </Link>{' '}\n        para ver el estatus.\n      </p>\n    )\n  }\n\n  trialText = () => {\n    const { remainingDays } = this.state\n    return (\n      <p>{`Te quedan ${remainingDays} ${pluralize(\n        'dÃ­as',\n        remainingDays\n      )} de plan premium gratis`}</p>\n    )\n  }\n\n  token = () => {\n    const bank = 'bancomer'\n    return (\n      <p className='app-wide-notifications--notification__text'>\n        Por favor actualiza tu token de {bank} para poder descargar los\n        movimientos bancarios del prÃ³ximo mes, dando{' '}\n        <Link\n          to={`/${bank}/actualizar-token/`}\n          className='app-wide-notifications--notification__text__link'\n        >\n          clic aquÃ­\n        </Link>{' '}\n      </p>\n    )\n  }\n\n  infoDiagnosis = () => {\n    return <Advertisment text={this.diagnosisInProgress()} />\n  }\n\n  infoToken = () => {\n    return <Advertisment text={this.token()} diagnosis />\n  }\n\n  renderTrialAdvertisement () {\n    const { remainingDays } = this.state\n    const color = remainingDays > 1 ? 'warning' : 'red'\n    return <Advertisment text={this.trialText()} color={color} />\n  }\n\n  render () {\n    const { notifications, hasToIntroduceToken } = this.state\n    const warnig = isWarningActivated()\n    const { showAdvertisement, remainingDays } = this.state\n    const currentEntity = SessionStore.getCurrentEntity()\n    const { status, plan } = currentEntity\n    const { step } = this.state.diagnosis\n    const isTrialAdvertisementShowed =\n      plan === 'free_premium' && remainingDays <= 5\n    return (\n      <Fragment>\n        {isTrialAdvertisementShowed && this.renderTrialAdvertisement()}\n        {hasToIntroduceToken && this.infoToken()}\n        {showAdvertisement && (\n          <Advertisment\n            text={this.returnText()}\n            icon={'alert-circle-outline'}\n            color={'yellow'}\n          />\n        )}\n        {status === 'demo' &&\n          (step === 'registry' || step === 'in_progress' || step === 'done') &&\n          this.infoDiagnosis()}\n        {notifications.length > 0 && (\n          <div\n            className={classNames('app-wide-notifications', {\n              'app-wide-notifications--warning-active': warnig\n            })}\n          >\n            {notifications.map((notification, i) =>\n              this.renderNotification(notification, i)\n            )}\n          </div>\n        )}\n      </Fragment>\n    )\n  }\n}\n\nexport default AppWideNotification\n"]},"metadata":{},"sourceType":"module"}