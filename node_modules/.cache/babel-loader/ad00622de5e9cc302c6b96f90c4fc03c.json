{"ast":null,"code":"import _regeneratorRuntime from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/accountingPeriods/review/index.js\";\n// Libraries\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport AppSignal from 'appsignal'; // Components\n\nimport NotificationsActions from 'actions/notifications';\nimport Calculation from './components/calculation';\nimport API from 'api';\nimport EmptyState from 'shared/emptyState'; // Stores\n\nimport AccountingPeriodsStore from 'stores/accountingPeriods'; // Acctions\n\nimport AccountingPeriodsActions from 'actions/accountingPeriods';\n\nfunction getCurrentState() {\n  return {\n    accountingPeriods: AccountingPeriodsStore.getAccountingPeriods()\n  };\n}\n\nvar Review =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Review, _Component);\n\n  function Review() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Review);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Review)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _objectSpread({\n      calculations: [],\n      openCalculation: '',\n      requestInProgress: false,\n      showButtons: false,\n      oldestPeriod: null\n    }, getCurrentState());\n\n    _this.toggleOpenCalculation = function (id) {\n      return function () {\n        _this.setState({\n          openCalculation: id === _this.state.openCalculation ? '' : id\n        });\n      };\n    };\n\n    _this._onChange = function () {\n      _this.setState(_objectSpread({}, getCurrentState()));\n    };\n\n    _this.setDisplayButtons = function (_ref) {\n      var year = _ref.year,\n          month = _ref.month;\n\n      if (month > 1) {\n        var previousMonth = month - 1;\n\n        var accountingPeriodsYear = _this.state.accountingPeriods.filter(function (period) {\n          return period.year === year;\n        });\n\n        var previousAccountingPeriod = accountingPeriodsYear.filter(function (period) {\n          return period.month === previousMonth;\n        });\n\n        if (previousAccountingPeriod.length > 0) {\n          _this.getPreviousCalculation(previousAccountingPeriod[0].id);\n\n          _this.getOldestPendingCalculation(accountingPeriodsYear.reverse());\n        }\n      }\n    };\n\n    _this.getDefaultOpen = function (calculations) {\n      var calculation = calculations.find(function (calculation) {\n        return calculation.status === 'reviewed_by_accountant';\n      });\n      return calculation ? calculation.id : '';\n    };\n\n    _this.sendCalculationResponse = function (period, calculationId, params, status) {\n      _this.setState(function (state) {\n        return {\n          requestInProgress: true,\n          calculations: state.calculations.map(function (calculation) {\n            return calculation.id === calculationId ? _objectSpread({}, calculation, {\n              status: status\n            }) : calculation;\n          })\n        };\n      });\n\n      API.Conciliation.SendCalculation(period.id, calculationId, params).then(function () {\n        params.calculation.status === 'accepted' ? NotificationsActions.success('Cálculos aceptados exitosamente') : NotificationsActions.success('Cálculos rechazados exitosamente');\n      }).catch(function (error) {\n        AppSignal.sendError(error);\n        NotificationsActions.error(error);\n      }).finally(function () {\n        _this.setState({\n          requestInProgress: false,\n          openCalculation: ''\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Review, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getCalculation(); // Adds listener, when the Store changes, trigger the _onChange callback func\n\n      AccountingPeriodsStore.addChangeListener(this._onChange);\n      AccountingPeriodsActions.getAccoutingPeriods().then(function () {\n        _this2.setDisplayButtons(_this2.props.period);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      AccountingPeriodsStore.removeChangeListener(this._onChange);\n    } // When the store changes, the state goes to it and pulls the updated data\n    // then sets it so the component renders\n\n  }, {\n    key: \"getPreviousCalculation\",\n\n    /**\n     * Gets previous accounting period's calculations and if there is not one accepted\n     * will show a message for the user, in other case show the buttons.\n     * @param {String} periodID\n     */\n    value: function () {\n      var _getPreviousCalculation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(periodID) {\n        var _ref2, calculations, showButtons;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return API.Conciliation.GetCalculations(periodID);\n\n              case 3:\n                _ref2 = _context.sent;\n                calculations = _ref2.calculations;\n                showButtons = calculations.some(function (calculation) {\n                  return calculation.status === 'accepted';\n                });\n                this.setState({\n                  showButtons: !showButtons\n                });\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                AppSignal.sendError(_context.t0);\n                NotificationsActions.error('Ha ocurrido un error cargando los cálculos');\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 9]]);\n      }));\n\n      function getPreviousCalculation(_x) {\n        return _getPreviousCalculation.apply(this, arguments);\n      }\n\n      return getPreviousCalculation;\n    }()\n    /**\n     * Recevied the reverse array to start from january check each pending calculation\n     * @param {Array} accountingPeriodsYear\n     */\n\n  }, {\n    key: \"getOldestPendingCalculation\",\n    value: function () {\n      var _getOldestPendingCalculation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(accountingPeriodsYear) {\n        var isPending, allRejected, index, id, _ref3, calculations, oldestPeriod;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isPending = false;\n                allRejected = false;\n                _context2.prev = 2;\n                index = 0;\n\n              case 4:\n                if (!(index < accountingPeriodsYear.length)) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                id = accountingPeriodsYear[index].id;\n                _context2.next = 8;\n                return API.Conciliation.GetCalculations(id);\n\n              case 8:\n                _ref3 = _context2.sent;\n                calculations = _ref3.calculations;\n                _context2.next = 12;\n                return this.arePendingCalculations(calculations);\n\n              case 12:\n                isPending = _context2.sent;\n\n                if (!(calculations.length > 0 && !isPending)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                _context2.next = 16;\n                return this.allPreviousCalculationsRejected(calculations);\n\n              case 16:\n                allRejected = _context2.sent;\n\n              case 17:\n                if (!(isPending || allRejected)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                oldestPeriod = accountingPeriodsYear[index];\n                this.setState({\n                  oldestPeriod: oldestPeriod\n                });\n                return _context2.abrupt(\"break\", 24);\n\n              case 21:\n                index++;\n                _context2.next = 4;\n                break;\n\n              case 24:\n                _context2.next = 29;\n                break;\n\n              case 26:\n                _context2.prev = 26;\n                _context2.t0 = _context2[\"catch\"](2);\n                NotificationsActions.error('Ha ocurrido un error cargando los cálculos');\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 26]]);\n      }));\n\n      function getOldestPendingCalculation(_x2) {\n        return _getOldestPendingCalculation.apply(this, arguments);\n      }\n\n      return getOldestPendingCalculation;\n    }()\n    /**\n     * @param  {Array} calculations\n     */\n\n  }, {\n    key: \"arePendingCalculations\",\n    value: function arePendingCalculations(calculations) {\n      return calculations.some(function (calculation) {\n        return calculation.status === 'reviewed_by_accountant';\n      });\n    }\n    /**\n     * @param  {Array} calculations\n     */\n\n  }, {\n    key: \"allPreviousCalculationsRejected\",\n    value: function allPreviousCalculationsRejected(calculations) {\n      return calculations.every(function (calculation) {\n        return calculation.status === 'rejected';\n      });\n    }\n  }, {\n    key: \"getCalculation\",\n    value: function () {\n      var _getCalculation = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _ref4, calculations;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                this.setState({\n                  requestInProgress: true\n                });\n                _context3.next = 4;\n                return API.Conciliation.GetCalculations(this.props.period.id);\n\n              case 4:\n                _ref4 = _context3.sent;\n                calculations = _ref4.calculations;\n                this.setState({\n                  calculations: calculations,\n                  requestInProgress: false,\n                  openCalculation: this.getDefaultOpen(calculations)\n                });\n                _context3.next = 14;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n                AppSignal.sendError(_context3.t0);\n                NotificationsActions.error('Ha ocurrido un error cargando los cálculos');\n                this.setState({\n                  requestInProgress: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n\n      function getCalculation() {\n        return _getCalculation.apply(this, arguments);\n      }\n\n      return getCalculation;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var period = this.props.period;\n      var _this$state = this.state,\n          openCalculation = _this$state.openCalculation,\n          calculations = _this$state.calculations,\n          showButtons = _this$state.showButtons,\n          oldestPeriod = _this$state.oldestPeriod;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, calculations.length === 0 ? React.createElement(EmptyState, {\n        icon: 'timetable',\n        mainText: 'Estamos trabajando en tus cálculos',\n        secondText: 'Te notificaremos vía correo cuando estén listos.',\n        style: 'accounting-style',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }) : React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, calculations.map(function (calculation) {\n        return React.createElement(Calculation, {\n          calculation: calculation,\n          period: period,\n          isOpen: openCalculation === calculation.id,\n          key: calculation.id,\n          toggleOpenCalculation: _this3.toggleOpenCalculation,\n          sendCalculation: _this3.sendCalculationResponse,\n          showButtons: showButtons,\n          oldestPeriod: oldestPeriod,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Review;\n}(Component);\n\nReview.propTypes = {\n  period: PropTypes.shape({\n    id: PropTypes.number.isRequired\n  }).isRequired\n};\nexport { Review as default };","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/accountingPeriods/review/index.js"],"names":["React","Component","Fragment","PropTypes","AppSignal","NotificationsActions","Calculation","API","EmptyState","AccountingPeriodsStore","AccountingPeriodsActions","getCurrentState","accountingPeriods","getAccountingPeriods","Review","state","calculations","openCalculation","requestInProgress","showButtons","oldestPeriod","toggleOpenCalculation","id","setState","_onChange","setDisplayButtons","year","month","previousMonth","accountingPeriodsYear","filter","period","previousAccountingPeriod","length","getPreviousCalculation","getOldestPendingCalculation","reverse","getDefaultOpen","calculation","find","status","sendCalculationResponse","calculationId","params","map","Conciliation","SendCalculation","then","success","catch","error","sendError","finally","getCalculation","addChangeListener","getAccoutingPeriods","props","removeChangeListener","periodID","GetCalculations","some","isPending","allRejected","index","arePendingCalculations","allPreviousCalculationsRejected","every","propTypes","shape","number","isRequired"],"mappings":"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","sourcesContent":["// Libraries\nimport React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport AppSignal from 'appsignal'\n\n// Components\nimport NotificationsActions from 'actions/notifications'\nimport Calculation from './components/calculation'\nimport API from 'api'\nimport EmptyState from 'shared/emptyState'\n\n// Stores\nimport AccountingPeriodsStore from 'stores/accountingPeriods'\n// Acctions\nimport AccountingPeriodsActions from 'actions/accountingPeriods'\n\nfunction getCurrentState () {\n  return {\n    accountingPeriods: AccountingPeriodsStore.getAccountingPeriods()\n  }\n}\n\nexport default class Review extends Component {\n  static propTypes = {\n    period: PropTypes.shape({\n      id: PropTypes.number.isRequired\n    }).isRequired\n  }\n\n  state = {\n    calculations: [],\n    openCalculation: '',\n    requestInProgress: false,\n    showButtons: false,\n    oldestPeriod: null,\n    ...getCurrentState()\n  }\n\n  toggleOpenCalculation = id => () => {\n    this.setState({\n      openCalculation: id === this.state.openCalculation ? '' : id\n    })\n  }\n\n  componentDidMount () {\n    this.getCalculation()\n    // Adds listener, when the Store changes, trigger the _onChange callback func\n    AccountingPeriodsStore.addChangeListener(this._onChange)\n    AccountingPeriodsActions.getAccoutingPeriods().then(() => {\n      this.setDisplayButtons(this.props.period)\n    })\n  }\n\n  componentWillUnmount () {\n    AccountingPeriodsStore.removeChangeListener(this._onChange)\n  }\n\n  // When the store changes, the state goes to it and pulls the updated data\n  // then sets it so the component renders\n  _onChange = () => {\n    this.setState({ ...getCurrentState() })\n  }\n\n  /**\n   * It validates if the buttons to accept or reject a calculation will be display,\n   * If is january (month = 1) it will be display, other case it will show a message.\n   * From month 2, this gets the previous accounting peiriod of the calculation's year that was selected.\n   */\n  setDisplayButtons = ({ year, month }) => {\n    if (month > 1) {\n      const previousMonth = month - 1\n      const accountingPeriodsYear = this.state.accountingPeriods.filter(\n        period => period.year === year\n      )\n      const previousAccountingPeriod = accountingPeriodsYear.filter(\n        period => period.month === previousMonth\n      )\n      if (previousAccountingPeriod.length > 0) {\n        this.getPreviousCalculation(previousAccountingPeriod[0].id)\n        this.getOldestPendingCalculation(accountingPeriodsYear.reverse())\n      }\n    }\n  }\n\n  /**\n   * Gets previous accounting period's calculations and if there is not one accepted\n   * will show a message for the user, in other case show the buttons.\n   * @param {String} periodID\n   */\n  async getPreviousCalculation (periodID) {\n    try {\n      const { calculations } = await API.Conciliation.GetCalculations(periodID)\n      const showButtons = calculations.some(\n        calculation => calculation.status === 'accepted'\n      )\n      this.setState({ showButtons: !showButtons })\n    } catch (error) {\n      AppSignal.sendError(error)\n      NotificationsActions.error('Ha ocurrido un error cargando los cálculos')\n    }\n  }\n\n  /**\n   * Recevied the reverse array to start from january check each pending calculation\n   * @param {Array} accountingPeriodsYear\n   */\n  async getOldestPendingCalculation (accountingPeriodsYear) {\n    let isPending = false\n    let allRejected = false\n\n    try {\n      for (let index = 0; index < accountingPeriodsYear.length; index++) {\n        let { id } = accountingPeriodsYear[index]\n        let { calculations } = await API.Conciliation.GetCalculations(id)\n\n        isPending = await this.arePendingCalculations(calculations)\n\n        if (calculations.length > 0 && !isPending) {\n          allRejected = await this.allPreviousCalculationsRejected(calculations)\n        }\n\n        if (isPending || allRejected) {\n          const oldestPeriod = accountingPeriodsYear[index]\n          this.setState({ oldestPeriod: oldestPeriod })\n          break\n        }\n      }\n    } catch (error) {\n      NotificationsActions.error('Ha ocurrido un error cargando los cálculos')\n    }\n  }\n  /**\n   * @param  {Array} calculations\n   */\n  arePendingCalculations (calculations) {\n    return calculations.some(\n      calculation => calculation.status === 'reviewed_by_accountant'\n    )\n  }\n  /**\n   * @param  {Array} calculations\n   */\n  allPreviousCalculationsRejected (calculations) {\n    return calculations.every(calculation => calculation.status === 'rejected')\n  }\n\n  async getCalculation () {\n    try {\n      this.setState({ requestInProgress: true })\n      const { calculations } = await API.Conciliation.GetCalculations(\n        this.props.period.id\n      )\n\n      this.setState({\n        calculations,\n        requestInProgress: false,\n        openCalculation: this.getDefaultOpen(calculations)\n      })\n    } catch (error) {\n      AppSignal.sendError(error)\n      NotificationsActions.error('Ha ocurrido un error cargando los cálculos')\n      this.setState({ requestInProgress: false })\n    }\n  }\n\n  getDefaultOpen = calculations => {\n    const calculation = calculations.find(\n      calculation => calculation.status === 'reviewed_by_accountant'\n    )\n\n    return calculation ? calculation.id : ''\n  }\n\n  // Send calculation accepted o rejected\n  sendCalculationResponse = (period, calculationId, params, status) => {\n    this.setState(state => ({\n      requestInProgress: true,\n      calculations: state.calculations.map(calculation => {\n        return calculation.id === calculationId\n          ? { ...calculation, status }\n          : calculation\n      })\n    }))\n    API.Conciliation.SendCalculation(period.id, calculationId, params)\n      .then(() => {\n        params.calculation.status === 'accepted'\n          ? NotificationsActions.success('Cálculos aceptados exitosamente')\n          : NotificationsActions.success('Cálculos rechazados exitosamente')\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        NotificationsActions.error(error)\n      })\n      .finally(() => {\n        this.setState({ requestInProgress: false, openCalculation: '' })\n      })\n  }\n\n  render () {\n    const { period } = this.props\n    const {\n      openCalculation,\n      calculations,\n      showButtons,\n      oldestPeriod\n    } = this.state\n\n    return (\n      <Fragment>\n        {calculations.length === 0 ? (\n          <EmptyState\n            icon={'timetable'}\n            mainText={'Estamos trabajando en tus cálculos'}\n            secondText={'Te notificaremos vía correo cuando estén listos.'}\n            style={'accounting-style'}\n          />\n        ) : (\n          <Fragment>\n            {calculations.map(calculation => (\n              <Calculation\n                calculation={calculation}\n                period={period}\n                isOpen={openCalculation === calculation.id}\n                key={calculation.id}\n                toggleOpenCalculation={this.toggleOpenCalculation}\n                sendCalculation={this.sendCalculationResponse}\n                showButtons={showButtons}\n                oldestPeriod={oldestPeriod}\n              />\n            ))}\n          </Fragment>\n        )}\n      </Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}