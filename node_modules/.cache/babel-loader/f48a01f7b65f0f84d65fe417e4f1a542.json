{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/synchronization/editSyncAccounts/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport { handleBack, replaceUnderScore } from 'utils';\nimport { checkFeatureFlag, saveSelectedAccount, cleanAccounts } from '../utils';\nimport Button from 'shared/button';\nimport CheckboxRounded from 'shared/checkboxRounded';\nimport BanksSynchronizationActions from 'actions/smartsync';\nimport BanksSynchronizationStores from 'stores/smartsync';\n\nfunction getCurrentState() {\n  return {\n    syncAccounts: BanksSynchronizationStores.getSynchronizedAccounts(),\n    unsyncAccounts: BanksSynchronizationStores.getUnsynchronizedAccounts()\n  };\n}\n\nvar EditSyncAccounts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditSyncAccounts, _Component);\n\n  function EditSyncAccounts() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditSyncAccounts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditSyncAccounts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _objectSpread({\n      accountsToSave: [],\n      requestInProgress: false\n    }, getCurrentState());\n\n    _this.componentDidMount = function () {\n      var bank = _this.props.params.bank;\n      BanksSynchronizationStores.addChangeListener(_this._onChange);\n      BanksSynchronizationActions.getBelvoBanks(bank);\n      checkFeatureFlag();\n    };\n\n    _this._onChange = function () {\n      _this.setState(getCurrentState());\n    };\n\n    _this.saveAccounts = function () {\n      var accountsToSave = _this.state.accountsToSave;\n      var pathname = _this.props.location.pathname;\n      var fromUrl = pathname;\n      var toUrl = '/cuentas-de-pago';\n      var bank = _this.props.params.bank;\n      saveSelectedAccount(cleanAccounts(accountsToSave), bank, _assertThisInitialized(_assertThisInitialized(_this)), fromUrl, toUrl);\n    };\n\n    _this.selectAccount = function (accountId, type) {\n      return function () {\n        var origin = 'unsyncAccounts';\n        var destination = 'accountsToSave';\n\n        if (type === 'sync') {\n          origin = 'accountsToSave';\n          destination = 'unsyncAccounts';\n        }\n\n        _this.setState(function (state) {\n          var accounts = _toConsumableArray(state[origin]);\n\n          var selectedAccount = accounts.find(function (account) {\n            if (account.belvo_id === accountId) {\n              account.account_number = account.account_number ? account.account_number.slice(account.account_number.length - 3) : account.name.slice(account.name.length - 3);\n              account.selected = !account.selected;\n              return account;\n            }\n          });\n          var index = accounts.findIndex(function (account) {\n            return account.belvo_id === accountId;\n          });\n          state[destination].push(selectedAccount);\n          state[origin].splice(index, 1);\n          return _objectSpread({}, state, {\n            accountsToSave: _toConsumableArray(state.accountsToSave),\n            unsyncAccounts: _toConsumableArray(state.unsyncAccounts)\n          });\n        });\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(EditSyncAccounts, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BanksSynchronizationStores.removeChangeListener(this._onChange);\n      BanksSynchronizationActions.clearBankAccounts();\n    }\n  }, {\n    key: \"renderSynchronizedAccounts\",\n    value: function renderSynchronizedAccounts() {\n      var _this$state = this.state,\n          syncAccounts = _this$state.syncAccounts,\n          accountsToSave = _this$state.accountsToSave;\n      return this.renderAccounts([].concat(_toConsumableArray(syncAccounts), _toConsumableArray(accountsToSave)), 'sync');\n    }\n  }, {\n    key: \"renderUnsynchronizedAccounts\",\n    value: function renderUnsynchronizedAccounts() {\n      var unsyncAccounts = this.state.unsyncAccounts;\n      return this.renderAccounts(unsyncAccounts, 'unsync');\n    }\n  }, {\n    key: \"renderAccounts\",\n    value: function renderAccounts(accounts, origin) {\n      var _this2 = this;\n\n      if (accounts.length > 0) {\n        return accounts.map(function (_ref) {\n          var name = _ref.name,\n              id = _ref.belvo_id,\n              selected = _ref.selected,\n              type = _ref.account_type,\n              synchronized = _ref.synchronized;\n          return React.createElement(CheckboxRounded, {\n            key: id,\n            name: name,\n            selected: selected,\n            onChange: _this2.selectAccount(id, origin),\n            type: type,\n            disableCheckbox: synchronized,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          });\n        });\n      } else {\n        return React.createElement(\"div\", {\n          className: \"column is-one-third\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"No hay cuentas\"));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var bank = this.props.params.bank;\n      var bankName = replaceUnderScore(bank);\n      var requestInProgress = this.state.requestInProgress;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Button, {\n        buttonStyle: \"link\",\n        icon: \"chevron-double-left\",\n        onClick: handleBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Volver\"), React.createElement(\"h4\", {\n        className: \"subheader-green margin-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, bankName), React.createElement(\"div\", {\n        className: \"synchronization-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"synchronization__text--bottom-spaced\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Selecciona la(s) cuenta(s) que deseas activar la sincronizaci\\xF3n autom\\xE1tica.\"), React.createElement(\"p\", {\n        className: \"synchronization__text--bold synchronization__text--bottom-spaced\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Cuentas con sincronizaci\\xF3n autom\\xE1tica\"), React.createElement(\"div\", {\n        className: \"columns is-multiline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, this.renderSynchronizedAccounts()), React.createElement(\"p\", {\n        className: \"synchronization__text--bold synchronization__text--bottom-spaced\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Cuentas que no tienen sincronizaci\\xF3n autom\\xE1tica\"), React.createElement(\"div\", {\n        className: \"columns is-multiline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.renderUnsynchronizedAccounts()), React.createElement(\"div\", {\n        className: \"synchronization__buttons-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: handleBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Cancelar\"), React.createElement(Button, {\n        buttonStyle: \"primary\",\n        onClick: this.saveAccounts,\n        disabled: requestInProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Guardar\"))));\n    }\n  }]);\n\n  return EditSyncAccounts;\n}(Component);\n\nexport { EditSyncAccounts as default };","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/synchronization/editSyncAccounts/index.js"],"names":["React","Component","Fragment","handleBack","replaceUnderScore","checkFeatureFlag","saveSelectedAccount","cleanAccounts","Button","CheckboxRounded","BanksSynchronizationActions","BanksSynchronizationStores","getCurrentState","syncAccounts","getSynchronizedAccounts","unsyncAccounts","getUnsynchronizedAccounts","EditSyncAccounts","state","accountsToSave","requestInProgress","componentDidMount","bank","props","params","addChangeListener","_onChange","getBelvoBanks","setState","saveAccounts","pathname","location","fromUrl","toUrl","selectAccount","accountId","type","origin","destination","accounts","selectedAccount","find","account","belvo_id","account_number","slice","length","name","selected","index","findIndex","push","splice","removeChangeListener","clearBankAccounts","renderAccounts","map","id","account_type","synchronized","bankName","renderSynchronizedAccounts","renderUnsynchronizedAccounts"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { handleBack, replaceUnderScore } from 'utils'\nimport { checkFeatureFlag, saveSelectedAccount, cleanAccounts } from '../utils'\n\nimport Button from 'shared/button'\nimport CheckboxRounded from 'shared/checkboxRounded'\n\nimport BanksSynchronizationActions from 'actions/smartsync'\n\nimport BanksSynchronizationStores from 'stores/smartsync'\n\nfunction getCurrentState () {\n  return {\n    syncAccounts: BanksSynchronizationStores.getSynchronizedAccounts(),\n    unsyncAccounts: BanksSynchronizationStores.getUnsynchronizedAccounts()\n  }\n}\nexport default class EditSyncAccounts extends Component {\n  state = { accountsToSave: [], requestInProgress: false, ...getCurrentState() }\n\n  componentDidMount = () => {\n    const { bank } = this.props.params\n    BanksSynchronizationStores.addChangeListener(this._onChange)\n    BanksSynchronizationActions.getBelvoBanks(bank)\n    checkFeatureFlag()\n  }\n\n  componentWillUnmount () {\n    BanksSynchronizationStores.removeChangeListener(this._onChange)\n    BanksSynchronizationActions.clearBankAccounts()\n  }\n\n  _onChange = () => {\n    this.setState(getCurrentState())\n  }\n\n  saveAccounts = () => {\n    const { accountsToSave } = this.state\n    const { pathname } = this.props.location\n    const fromUrl = pathname\n    const toUrl = '/cuentas-de-pago'\n    const { bank } = this.props.params\n\n    saveSelectedAccount(\n      cleanAccounts(accountsToSave),\n      bank,\n      this,\n      fromUrl,\n      toUrl\n    )\n  }\n\n  selectAccount = (accountId, type) => () => {\n    let origin = 'unsyncAccounts'\n    let destination = 'accountsToSave'\n    if (type === 'sync') {\n      origin = 'accountsToSave'\n      destination = 'unsyncAccounts'\n    }\n\n    this.setState(state => {\n      const accounts = [...state[origin]]\n      const selectedAccount = accounts.find(account => {\n        if (account.belvo_id === accountId) {\n          account.account_number = account.account_number\n            ? account.account_number.slice(account.account_number.length - 3)\n            : account.name.slice(account.name.length - 3)\n          account.selected = !account.selected\n          return account\n        }\n      })\n\n      const index = accounts.findIndex(\n        account => account.belvo_id === accountId\n      )\n      state[destination].push(selectedAccount)\n      state[origin].splice(index, 1)\n      return {\n        ...state,\n        accountsToSave: [...state.accountsToSave],\n        unsyncAccounts: [...state.unsyncAccounts]\n      }\n    })\n  }\n\n  renderSynchronizedAccounts () {\n    const { syncAccounts, accountsToSave } = this.state\n    return this.renderAccounts([...syncAccounts, ...accountsToSave], 'sync')\n  }\n  renderUnsynchronizedAccounts () {\n    const { unsyncAccounts } = this.state\n    return this.renderAccounts(unsyncAccounts, 'unsync')\n  }\n\n  renderAccounts (accounts, origin) {\n    if (accounts.length > 0) {\n      return accounts.map(\n        ({ name, belvo_id: id, selected, account_type: type, synchronized }) => (\n          <CheckboxRounded\n            key={id}\n            name={name}\n            selected={selected}\n            onChange={this.selectAccount(id, origin)}\n            type={type}\n            disableCheckbox={synchronized}\n          />\n        )\n      )\n    } else {\n      return (\n        <div className='column is-one-third'>\n          <p>No hay cuentas</p>\n        </div>\n      )\n    }\n  }\n\n  render () {\n    const { bank } = this.props.params\n    const bankName = replaceUnderScore(bank)\n    const { requestInProgress } = this.state\n\n    return (\n      <Fragment>\n        <Button\n          buttonStyle='link'\n          icon='chevron-double-left'\n          onClick={handleBack}\n        >\n          Volver\n        </Button>\n        <h4 className='subheader-green margin-top'>{bankName}</h4>\n        <div className='synchronization-container'>\n          <p className='synchronization__text--bottom-spaced'>\n            Selecciona la(s) cuenta(s) que deseas activar la sincronización\n            automática.\n          </p>\n          <p className='synchronization__text--bold synchronization__text--bottom-spaced'>\n            Cuentas con sincronización automática\n          </p>\n          <div className='columns is-multiline'>\n            {this.renderSynchronizedAccounts()}\n          </div>\n          <p className='synchronization__text--bold synchronization__text--bottom-spaced'>\n            Cuentas que no tienen sincronización automática\n          </p>\n          <div className='columns is-multiline'>\n            {this.renderUnsynchronizedAccounts()}\n          </div>\n          <div className='synchronization__buttons-wrapper'>\n            <Button onClick={handleBack}>Cancelar</Button>\n            <Button\n              buttonStyle='primary'\n              onClick={this.saveAccounts}\n              disabled={requestInProgress}\n            >\n              Guardar\n            </Button>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}