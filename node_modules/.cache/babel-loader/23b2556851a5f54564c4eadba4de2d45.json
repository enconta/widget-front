{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport API from '../api';\nimport AppSignal from 'appsignal'; // This action creator sends the type of action and the params (if any) to the dispatcher\n\nexport default {\n  getFilesList: function getFilesList(params) {\n    // Request the email list to the API, then triggers the change on the store if success\n    API.Downloads.List(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'DOWNLOADS_LIST_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  deleteFile: function deleteFile(id) {\n    // Request the email list to the API, then triggers the change on the store if success\n    return API.Downloads.DeleteFile(id).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/downloads.js"],"names":["AppDispatcher","API","AppSignal","getFilesList","params","Downloads","List","then","response","handleAction","actionType","data","catch","error","sendError","deleteFile","id","DeleteFile"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,eAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAEA;;AACA,eAAe;AACbC,EAAAA,YADa,wBACCC,MADD,EACS;AACpB;AACAH,IAAAA,GAAG,CAACI,SAAJ,CAAcC,IAAd,CAAmBF,MAAnB,EACGG,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBR,MAAAA,aAAa,CAACS,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,yBADa;AAEzBC,QAAAA,IAAI,EAAEH;AAFmB,OAA3B;AAID,KANH,EAOGI,KAPH,CAOS,UAAAC,KAAK,EAAI;AACdX,MAAAA,SAAS,CAACY,SAAV,CAAoBD,KAApB;AACD,KATH;AAUD,GAbY;AAebE,EAAAA,UAfa,sBAeDC,EAfC,EAeG;AACd;AACA,WAAOf,GAAG,CAACI,SAAJ,CAAcY,UAAd,CAAyBD,EAAzB,EAA6BJ,KAA7B,CAAmC,UAAAC,KAAK,EAAI;AACjDX,MAAAA,SAAS,CAACY,SAAV,CAAoBD,KAApB;AACA,YAAMA,KAAN;AACD,KAHM,CAAP;AAID;AArBY,CAAf","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\nimport AppSignal from 'appsignal'\n\n// This action creator sends the type of action and the params (if any) to the dispatcher\nexport default {\n  getFilesList (params) {\n    // Request the email list to the API, then triggers the change on the store if success\n    API.Downloads.List(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'DOWNLOADS_LIST_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  deleteFile (id) {\n    // Request the email list to the API, then triggers the change on the store if success\n    return API.Downloads.DeleteFile(id).catch(error => {\n      AppSignal.sendError(error)\n      throw error\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}