{"ast":null,"code":"import _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport accounting from 'accounting';\nimport _minBy from 'lodash/minBy';\nimport _maxBy from 'lodash/maxBy';\nimport _isEqual from 'lodash/isEqual';\nimport { SHORT_MONTHS } from 'shared/catalogs';\nimport moment from 'moment';\nvar STROKES = {\n  minExpense: '#A2C4FD',\n  maxExpense: '#003388'\n}; // Calculo el porcentaje de diferencia entre dos valores\n\nvar porcentajeDiff = function porcentajeDiff(newValue, oldValue) {\n  if (!newValue || !oldValue) return 0;\n  return accounting.toFixed((newValue - oldValue) / oldValue * 100, 2);\n};\n\nexport var calculateData = function calculateData(type) {\n  return function (totals, current, index, array) {\n    // Calcula el mínimo y máximo en el array, por el total\n    var min = _minBy(array, 'total');\n\n    var max = _maxBy(array, 'total'); // va sumando todos los totales\n\n\n    totals.total = totals.total + current.total;\n    totals.subtotal = totals.subtotal + current.subtotal; // Obtiene el último items para poder calcular la diferencia\n\n    var lastNumber = index !== 0 ? totals.data[index - 1].total : 0;\n\n    var item = _objectSpread({}, current, {\n      iva: current.total - current.subtotal,\n      month: \"\".concat(SHORT_MONTHS[current.month], \" \").concat(current.year),\n      difference: porcentajeDiff(current.total, lastNumber)\n    }); // Si no es un income, se debe mostrar un borde de acuerdo a si es el mínimo o máximo\n\n\n    if (type !== 'incomes') {\n      item.stroke = _isEqual(current, min) ? STROKES.minExpense : _isEqual(current, max) ? STROKES.maxExpense : null;\n    }\n\n    totals.data.push(item);\n    return totals;\n  };\n};\nexport var getEndMonth = function getEndMonth(date) {\n  var month = date.split(' ')[0];\n  var monthNumber = Object.keys(SHORT_MONTHS).find(function (key) {\n    return SHORT_MONTHS[key] === month;\n  });\n\n  if (monthNumber) {\n    return monthNumber.length === 1 ? \"0\".concat(monthNumber) : monthNumber;\n  } else {\n    return moment().subtract(1, 'months').format('MM');\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/reports/behaviors/utils/index.js"],"names":["accounting","_minBy","_maxBy","_isEqual","SHORT_MONTHS","moment","STROKES","minExpense","maxExpense","porcentajeDiff","newValue","oldValue","toFixed","calculateData","type","totals","current","index","array","min","max","total","subtotal","lastNumber","data","item","iva","month","year","difference","stroke","push","getEndMonth","date","split","monthNumber","Object","keys","find","key","length","subtract","format"],"mappings":"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","sourcesContent":["import accounting from 'accounting'\nimport _minBy from 'lodash/minBy'\nimport _maxBy from 'lodash/maxBy'\nimport _isEqual from 'lodash/isEqual'\n\nimport { SHORT_MONTHS } from 'shared/catalogs'\nimport moment from 'moment'\n\nconst STROKES = {\n  minExpense: '#A2C4FD',\n  maxExpense: '#003388'\n}\n\n// Calculo el porcentaje de diferencia entre dos valores\nconst porcentajeDiff = (newValue, oldValue) => {\n  if (!newValue || !oldValue) return 0\n\n  return accounting.toFixed(((newValue - oldValue) / oldValue) * 100, 2)\n}\n\nexport const calculateData = type => (totals, current, index, array) => {\n  // Calcula el mínimo y máximo en el array, por el total\n  const min = _minBy(array, 'total')\n  const max = _maxBy(array, 'total')\n\n  // va sumando todos los totales\n  totals.total = totals.total + current.total\n  totals.subtotal = totals.subtotal + current.subtotal\n\n  // Obtiene el último items para poder calcular la diferencia\n  const lastNumber = index !== 0 ? totals.data[index - 1].total : 0\n\n  const item = {\n    ...current,\n    iva: current.total - current.subtotal,\n    month: `${SHORT_MONTHS[current.month]} ${current.year}`,\n    difference: porcentajeDiff(current.total, lastNumber)\n  }\n\n  // Si no es un income, se debe mostrar un borde de acuerdo a si es el mínimo o máximo\n  if (type !== 'incomes') {\n    item.stroke = _isEqual(current, min)\n      ? STROKES.minExpense\n      : _isEqual(current, max)\n        ? STROKES.maxExpense\n        : null\n  }\n  totals.data.push(item)\n  return totals\n}\n\nexport const getEndMonth = date => {\n  const month = date.split(' ')[0]\n  const monthNumber = Object.keys(SHORT_MONTHS).find(\n    key => SHORT_MONTHS[key] === month\n  )\n  if (monthNumber) {\n    return monthNumber.length === 1 ? `0${monthNumber}` : monthNumber\n  } else {\n    return moment()\n      .subtract(1, 'months')\n      .format('MM')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}