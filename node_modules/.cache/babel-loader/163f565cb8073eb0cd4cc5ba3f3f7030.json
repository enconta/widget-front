{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/branches/editingForm/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { browserHistory } from 'react-router';\nimport EditClientActions from 'actions/editClient';\nimport NotificationActions from 'actions/notifications';\nimport BranchesStore from 'stores/branches';\nimport TextField from 'shared/textField';\nimport Button from 'shared/button';\nimport Alert from 'shared/alert';\nimport { avoidBlankSpace } from 'utils'; // Set where all the required field refs are going to be\n// stored so we can validate them all when submit\n\nvar requiredFields = new Set();\n\nfunction getCurrentState() {\n  return BranchesStore.getCurrentBranch();\n}\n\nvar EditClientBranch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditClientBranch, _Component);\n\n  function EditClientBranch() {\n    var _this;\n\n    _classCallCheck(this, EditClientBranch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditClientBranch).call(this));\n    _this.data = {\n      requestInProgress: false,\n      alertOpen: false\n    };\n    _this.state = Object.assign({}, _this.data, getCurrentState());\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EditClientBranch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Adds listener, when the Store changes, trigger the _onChange callback func\n      BranchesStore.addChangeListener(this._onChange); // If we are supposed to be editing a document, ask for document info\n\n      if (!this.props.location.pathname.includes('/sucursales/nueva') && typeof this.props.params.id !== 'undefined') {\n        this.setState({\n          isUpdate: true\n        });\n        EditClientActions.getBranchData(this.props.params.id);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clears branch data in the store\n      EditClientActions.clearBranch(); // Removes the listener to avoid memory leaks\n\n      BranchesStore.removeChangeListener(this._onChange); // Clears the stored requiredFields\n\n      requiredFields.clear();\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      // When the store changes, the state goes to it and pulls the updated data\n      // then sets it so the component rerenders\n      var state = getCurrentState();\n      this.setState(state);\n    }\n  }, {\n    key: \"toggleAlert\",\n    value: function toggleAlert() {\n      this.setState(function (prevState) {\n        return {\n          alertOpen: !prevState.alertOpen\n        };\n      });\n    }\n  }, {\n    key: \"onChangeField\",\n    value: function onChangeField(field, e) {\n      this.setState(_defineProperty({}, field, avoidBlankSpace(e.target.value)));\n    } // Iterates over required fields and validates every one of them\n    // Then it returns true if all validations succeedeed, else false.\n\n  }, {\n    key: \"validateAll\",\n    value: function validateAll() {\n      return _toConsumableArray(requiredFields) // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(function (form) {\n        return form.validate();\n      }) // Calls the validate() method on each form\n      .every(function (e) {\n        return e;\n      }); // Checks if all validations suceeded\n    } // Clears the current Document and redirects to the documents listing\n\n  }, {\n    key: \"returnToListing\",\n    value: function returnToListing() {\n      this.setState({\n        requestInProgress: false\n      });\n      browserHistory.push('/sucursales');\n    }\n  }, {\n    key: \"deleteBranch\",\n    value: function deleteBranch() {\n      var _this2 = this;\n\n      var id = this.props.params.id;\n      EditClientActions.deleteBranch(id).then(function () {\n        NotificationActions.success('La sucursal ha sido borrada correctamente');\n\n        _this2.returnToListing();\n      }).catch(function (err) {\n        return NotificationActions.error(err);\n      });\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData(e) {\n      var _this3 = this;\n\n      e.preventDefault(); // Validates all required fields, then builds the data object using the values stored in the state\n\n      if (this.validateAll() && !this.state.requestInProgress) {\n        var data = {\n          branch: {\n            name: this.state.name,\n            postal_code: this.state.postalCode\n          }\n        }; // If the request is for update an existing employee, sets the id and calls the corresponding Action\n        // Otherwise, calls the action to create a new one.\n\n        this.setState({\n          requestInProgress: true\n        }, function () {\n          if (_this3.state.isUpdate) {\n            var id = _this3.props.params.id;\n            EditClientActions.setBranchData(id, data).then(function () {\n              NotificationActions.success('la sucursal ha sido editada correctamente');\n\n              _this3.returnToListing();\n            }).catch(function (e) {\n              NotificationActions.error(e);\n\n              _this3.setState({\n                requestInProgress: false\n              });\n            });\n          } else {\n            EditClientActions.createBranch(data).then(function () {\n              NotificationActions.success('La sucursal ha sido creada correctamente');\n\n              _this3.returnToListing();\n            }).catch(function (e) {\n              NotificationActions.error(e);\n\n              _this3.setState({\n                requestInProgress: false\n              });\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          name = _this$state.name,\n          postalCode = _this$state.postalCode,\n          isUpdate = _this$state.isUpdate,\n          requestInProgress = _this$state.requestInProgress,\n          alertOpen = _this$state.alertOpen;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Button, {\n        buttonStyle: \"link\",\n        icon: \"chevron-double-left\",\n        onClick: this.returnToListing.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Volver\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"h4\", {\n        className: \"subheader-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, this.props.route.title), React.createElement(\"form\", {\n        onSubmit: this.sendData.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-half\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Nombre\",\n        value: name,\n        onChange: this.onChangeField.bind(this, 'name'),\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-one-quarter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"C.P.\",\n        value: postalCode,\n        onChange: this.onChangeField.bind(this, 'postalCode'),\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"caption required\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"* Campos obligatorios\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"flex-end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Button, {\n        icon: \"cancel\",\n        onClick: this.returnToListing.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Cancelar\"), isUpdate ? React.createElement(Button, {\n        buttonStyle: \"danger\",\n        icon: \"delete\",\n        type: \"button\",\n        onClick: this.toggleAlert.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Eliminar Sucursal\") : null, React.createElement(Button, {\n        buttonStyle: \"primary\",\n        icon: \"content-save\",\n        type: \"submit\",\n        loading: requestInProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Guardar\"))), React.createElement(Alert, {\n        isActive: alertOpen,\n        toggleAlert: this.toggleAlert.bind(this),\n        onSubmit: this.deleteBranch.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditClientBranch;\n}(Component);\n\nEditClientBranch.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string\n  }),\n  params: PropTypes.shape({\n    id: PropTypes.string\n  }),\n  route: PropTypes.shape({\n    title: PropTypes.string\n  })\n};\nexport default EditClientBranch;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/branches/editingForm/index.js"],"names":["React","Component","PropTypes","browserHistory","EditClientActions","NotificationActions","BranchesStore","TextField","Button","Alert","avoidBlankSpace","requiredFields","Set","getCurrentState","getCurrentBranch","EditClientBranch","data","requestInProgress","alertOpen","state","Object","assign","_onChange","bind","addChangeListener","props","location","pathname","includes","params","id","setState","isUpdate","getBranchData","clearBranch","removeChangeListener","clear","prevState","field","e","target","value","filter","Boolean","map","form","validate","every","push","deleteBranch","then","success","returnToListing","catch","err","error","preventDefault","validateAll","branch","name","postal_code","postalCode","setBranchData","createBranch","route","title","sendData","onChangeField","r","add","toggleAlert","propTypes","shape","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { browserHistory } from 'react-router'\n\nimport EditClientActions from 'actions/editClient'\nimport NotificationActions from 'actions/notifications'\nimport BranchesStore from 'stores/branches'\nimport TextField from 'shared/textField'\nimport Button from 'shared/button'\nimport Alert from 'shared/alert'\nimport { avoidBlankSpace } from 'utils'\n\n// Set where all the required field refs are going to be\n// stored so we can validate them all when submit\nconst requiredFields = new Set()\n\nfunction getCurrentState () {\n  return BranchesStore.getCurrentBranch()\n}\n\nclass EditClientBranch extends Component {\n  constructor () {\n    super()\n    this.data = {\n      requestInProgress: false,\n      alertOpen: false\n    }\n    this.state = Object.assign({}, this.data, getCurrentState())\n    this._onChange = this._onChange.bind(this)\n  }\n  componentDidMount () {\n    // Adds listener, when the Store changes, trigger the _onChange callback func\n    BranchesStore.addChangeListener(this._onChange)\n    // If we are supposed to be editing a document, ask for document info\n    if (\n      !this.props.location.pathname.includes('/sucursales/nueva') &&\n      typeof this.props.params.id !== 'undefined'\n    ) {\n      this.setState({ isUpdate: true })\n      EditClientActions.getBranchData(this.props.params.id)\n    }\n  }\n\n  componentWillUnmount () {\n    // Clears branch data in the store\n    EditClientActions.clearBranch()\n    // Removes the listener to avoid memory leaks\n    BranchesStore.removeChangeListener(this._onChange)\n    // Clears the stored requiredFields\n    requiredFields.clear()\n  }\n\n  _onChange () {\n    // When the store changes, the state goes to it and pulls the updated data\n    // then sets it so the component rerenders\n    const state = getCurrentState()\n    this.setState(state)\n  }\n\n  toggleAlert () {\n    this.setState(prevState => ({\n      alertOpen: !prevState.alertOpen\n    }))\n  }\n\n  onChangeField (field, e) {\n    this.setState({ [field]: avoidBlankSpace(e.target.value) })\n  }\n\n  // Iterates over required fields and validates every one of them\n  // Then it returns true if all validations succeedeed, else false.\n  validateAll () {\n    return [...requiredFields] // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(form => form.validate()) // Calls the validate() method on each form\n      .every(e => e) // Checks if all validations suceeded\n  }\n\n  // Clears the current Document and redirects to the documents listing\n  returnToListing () {\n    this.setState({ requestInProgress: false })\n    browserHistory.push('/sucursales')\n  }\n\n  deleteBranch () {\n    const { id } = this.props.params\n    EditClientActions.deleteBranch(id)\n      .then(() => {\n        NotificationActions.success('La sucursal ha sido borrada correctamente')\n        this.returnToListing()\n      })\n      .catch(err => NotificationActions.error(err))\n  }\n\n  sendData (e) {\n    e.preventDefault()\n    // Validates all required fields, then builds the data object using the values stored in the state\n    if (this.validateAll() && !this.state.requestInProgress) {\n      const data = {\n        branch: {\n          name: this.state.name,\n          postal_code: this.state.postalCode\n        }\n      }\n      // If the request is for update an existing employee, sets the id and calls the corresponding Action\n      // Otherwise, calls the action to create a new one.\n      this.setState({ requestInProgress: true }, () => {\n        if (this.state.isUpdate) {\n          let id = this.props.params.id\n          EditClientActions.setBranchData(id, data)\n            .then(() => {\n              NotificationActions.success(\n                'la sucursal ha sido editada correctamente'\n              )\n              this.returnToListing()\n            })\n            .catch(e => {\n              NotificationActions.error(e)\n              this.setState({ requestInProgress: false })\n            })\n        } else {\n          EditClientActions.createBranch(data)\n            .then(() => {\n              NotificationActions.success(\n                'La sucursal ha sido creada correctamente'\n              )\n              this.returnToListing()\n            })\n            .catch(e => {\n              NotificationActions.error(e)\n              this.setState({ requestInProgress: false })\n            })\n        }\n      })\n    }\n  }\n\n  render () {\n    const {\n      name,\n      postalCode,\n      isUpdate,\n      requestInProgress,\n      alertOpen\n    } = this.state\n    return (\n      <div>\n        <Button\n          buttonStyle='link'\n          icon='chevron-double-left'\n          onClick={this.returnToListing.bind(this)}\n        >\n          Volver\n        </Button>\n        <br />\n        <br />\n        <h4 className='subheader-green'>{this.props.route.title}</h4>\n        <form onSubmit={this.sendData.bind(this)}>\n          <div className='columns'>\n            <div className='column is-half'>\n              <TextField\n                label='Nombre'\n                value={name}\n                onChange={this.onChangeField.bind(this, 'name')}\n                required\n                ref={r => requiredFields.add(r)}\n              />\n            </div>\n            <div className='column is-one-quarter'>\n              <TextField\n                label='C.P.'\n                value={postalCode}\n                onChange={this.onChangeField.bind(this, 'postalCode')}\n                required\n                ref={r => requiredFields.add(r)}\n              />\n            </div>\n          </div>\n          <br />\n          <div className='caption required'>* Campos obligatorios</div>\n          <br />\n          <div className='flex-end'>\n            <Button icon='cancel' onClick={this.returnToListing.bind(this)}>\n              Cancelar\n            </Button>\n            {isUpdate ? (\n              <Button\n                buttonStyle='danger'\n                icon='delete'\n                type='button'\n                onClick={this.toggleAlert.bind(this)}\n              >\n                Eliminar Sucursal\n              </Button>\n            ) : null}\n            <Button\n              buttonStyle='primary'\n              icon='content-save'\n              type='submit'\n              loading={requestInProgress}\n            >\n              Guardar\n            </Button>\n          </div>\n        </form>\n        <Alert\n          isActive={alertOpen}\n          toggleAlert={this.toggleAlert.bind(this)}\n          onSubmit={this.deleteBranch.bind(this)}\n        />\n      </div>\n    )\n  }\n}\n\nEditClientBranch.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string\n  }),\n  params: PropTypes.shape({\n    id: PropTypes.string\n  }),\n  route: PropTypes.shape({\n    title: PropTypes.string\n  })\n}\n\nexport default EditClientBranch\n"]},"metadata":{},"sourceType":"module"}