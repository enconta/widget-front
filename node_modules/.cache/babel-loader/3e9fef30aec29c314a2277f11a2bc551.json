{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseStore from './baseStore';\n\nvar BranchesStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(BranchesStore, _BaseStore);\n\n  function BranchesStore() {\n    var _this;\n\n    _classCallCheck(this, BranchesStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BranchesStore).call(this)); // Current Branch defaults\n\n    _this.currentBranch = {\n      name: '',\n      taxableEntityId: 0,\n      postalCode: ''\n    };\n    _this.branchesList = [];\n    _this.totalPages = 1;\n    _this.currentPage = 1;\n    _this.actions = {\n      BRANCHES_LIST_RECEIVED: function BRANCHES_LIST_RECEIVED(action) {\n        _this.setBranchesList(action.data);\n      },\n      BRANCH_DATA_SAVED: function BRANCH_DATA_SAVED(action) {\n        _this.setCurrentBranch(action.data);\n      },\n      BRANCH_DATA_RECEIVED: function BRANCH_DATA_RECEIVED(action) {\n        _this.setCurrentBranch(action.data);\n      },\n      CLEAR_CURRENT_BRANCH: function CLEAR_CURRENT_BRANCH() {\n        _this.clearCurrentBranch();\n      }\n    };\n    return _this;\n  } // Pagination: Get total pages\n\n\n  _createClass(BranchesStore, [{\n    key: \"getTotalPages\",\n    value: function getTotalPages() {\n      return this.totalPages;\n    } // Pagination: Get total items\n\n  }, {\n    key: \"getTotalItems\",\n    value: function getTotalItems() {\n      return this.totalItems;\n    } // Pagination: Get current page\n\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      return this.currentPage;\n    } // Returns stored Branches List, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getBranchesList\",\n    value: function getBranchesList() {\n      return this.branchesList;\n    }\n  }, {\n    key: \"getCurrentBranch\",\n    value: function getCurrentBranch() {\n      return this.currentBranch;\n    }\n  }, {\n    key: \"setBranchesList\",\n    value: function setBranchesList(data) {\n      this.branchesList = data.branches;\n      this.totalPages = data.pagination.total_pages;\n      this.currentPage = data.pagination.current_page;\n      this.totalItems = data.pagination.total_items;\n    }\n  }, {\n    key: \"setCurrentBranch\",\n    value: function setCurrentBranch(data) {\n      if (data) {\n        this.currentBranch = {\n          id: data.branch.id,\n          name: data.branch.name,\n          postalCode: data.branch.postal_code\n        };\n      }\n    }\n  }, {\n    key: \"clearCurrentBranch\",\n    value: function clearCurrentBranch() {\n      this.currentBranch = {\n        name: '',\n        postalCode: ''\n      };\n    }\n  }]);\n\n  return BranchesStore;\n}(BaseStore);\n\nexport default BranchesStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/branches.js"],"names":["BaseStore","BranchesStore","currentBranch","name","taxableEntityId","postalCode","branchesList","totalPages","currentPage","actions","BRANCHES_LIST_RECEIVED","action","setBranchesList","data","BRANCH_DATA_SAVED","setCurrentBranch","BRANCH_DATA_RECEIVED","CLEAR_CURRENT_BRANCH","clearCurrentBranch","totalItems","branches","pagination","total_pages","current_page","total_items","id","branch","postal_code","getInstance"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;IAEMC,a;;;;;AACJ,2BAAe;AAAA;;AAAA;;AACb,wFADa,CAEb;;AACA,UAAKC,aAAL,GAAqB;AACnBC,MAAAA,IAAI,EAAE,EADa;AAEnBC,MAAAA,eAAe,EAAE,CAFE;AAGnBC,MAAAA,UAAU,EAAE;AAHO,KAArB;AAKA,UAAKC,YAAL,GAAoB,EAApB;AACA,UAAKC,UAAL,GAAkB,CAAlB;AACA,UAAKC,WAAL,GAAmB,CAAnB;AACA,UAAKC,OAAL,GAAe;AACbC,MAAAA,sBAAsB,EAAE,gCAAAC,MAAM,EAAI;AAChC,cAAKC,eAAL,CAAqBD,MAAM,CAACE,IAA5B;AACD,OAHY;AAIbC,MAAAA,iBAAiB,EAAE,2BAAAH,MAAM,EAAI;AAC3B,cAAKI,gBAAL,CAAsBJ,MAAM,CAACE,IAA7B;AACD,OANY;AAObG,MAAAA,oBAAoB,EAAE,8BAAAL,MAAM,EAAI;AAC9B,cAAKI,gBAAL,CAAsBJ,MAAM,CAACE,IAA7B;AACD,OATY;AAUbI,MAAAA,oBAAoB,EAAE,gCAAM;AAC1B,cAAKC,kBAAL;AACD;AAZY,KAAf;AAXa;AAyBd,G,CACD;;;;;oCACiB;AACf,aAAO,KAAKX,UAAZ;AACD,K,CACD;;;;oCACiB;AACf,aAAO,KAAKY,UAAZ;AACD,K,CACD;;;;qCACkB;AAChB,aAAO,KAAKX,WAAZ;AACD,K,CACD;;;;sCACmB;AACjB,aAAO,KAAKF,YAAZ;AACD;;;uCACmB;AAClB,aAAO,KAAKJ,aAAZ;AACD;;;oCAEgBW,I,EAAM;AACrB,WAAKP,YAAL,GAAoBO,IAAI,CAACO,QAAzB;AACA,WAAKb,UAAL,GAAkBM,IAAI,CAACQ,UAAL,CAAgBC,WAAlC;AACA,WAAKd,WAAL,GAAmBK,IAAI,CAACQ,UAAL,CAAgBE,YAAnC;AACA,WAAKJ,UAAL,GAAkBN,IAAI,CAACQ,UAAL,CAAgBG,WAAlC;AACD;;;qCAEiBX,I,EAAM;AACtB,UAAIA,IAAJ,EAAU;AACR,aAAKX,aAAL,GAAqB;AACnBuB,UAAAA,EAAE,EAAEZ,IAAI,CAACa,MAAL,CAAYD,EADG;AAEnBtB,UAAAA,IAAI,EAAEU,IAAI,CAACa,MAAL,CAAYvB,IAFC;AAGnBE,UAAAA,UAAU,EAAEQ,IAAI,CAACa,MAAL,CAAYC;AAHL,SAArB;AAKD;AACF;;;yCAEqB;AACpB,WAAKzB,aAAL,GAAqB;AACnBC,QAAAA,IAAI,EAAE,EADa;AAEnBE,QAAAA,UAAU,EAAE;AAFO,OAArB;AAID;;;;EArEyBL,S;;AAwE5B,eAAeC,aAAa,CAAC2B,WAAd,EAAf","sourcesContent":["import BaseStore from './baseStore'\n\nclass BranchesStore extends BaseStore {\n  constructor () {\n    super()\n    // Current Branch defaults\n    this.currentBranch = {\n      name: '',\n      taxableEntityId: 0,\n      postalCode: ''\n    }\n    this.branchesList = []\n    this.totalPages = 1\n    this.currentPage = 1\n    this.actions = {\n      BRANCHES_LIST_RECEIVED: action => {\n        this.setBranchesList(action.data)\n      },\n      BRANCH_DATA_SAVED: action => {\n        this.setCurrentBranch(action.data)\n      },\n      BRANCH_DATA_RECEIVED: action => {\n        this.setCurrentBranch(action.data)\n      },\n      CLEAR_CURRENT_BRANCH: () => {\n        this.clearCurrentBranch()\n      }\n    }\n  }\n  // Pagination: Get total pages\n  getTotalPages () {\n    return this.totalPages\n  }\n  // Pagination: Get total items\n  getTotalItems () {\n    return this.totalItems\n  }\n  // Pagination: Get current page\n  getCurrentPage () {\n    return this.currentPage\n  }\n  // Returns stored Branches List, this is used when explicitly you want to know it\n  getBranchesList () {\n    return this.branchesList\n  }\n  getCurrentBranch () {\n    return this.currentBranch\n  }\n\n  setBranchesList (data) {\n    this.branchesList = data.branches\n    this.totalPages = data.pagination.total_pages\n    this.currentPage = data.pagination.current_page\n    this.totalItems = data.pagination.total_items\n  }\n\n  setCurrentBranch (data) {\n    if (data) {\n      this.currentBranch = {\n        id: data.branch.id,\n        name: data.branch.name,\n        postalCode: data.branch.postal_code\n      }\n    }\n  }\n\n  clearCurrentBranch () {\n    this.currentBranch = {\n      name: '',\n      postalCode: ''\n    }\n  }\n}\n\nexport default BranchesStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}