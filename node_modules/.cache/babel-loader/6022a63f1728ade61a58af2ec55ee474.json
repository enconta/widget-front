{"ast":null,"code":"import _regeneratorRuntime from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AppDispatcher from '../dispatcher';\nimport API from '../api';\nimport AppSignal from 'appsignal'; // This action creator sends the type of action and the params (if any) to the dispatcher\n\nexport default {\n  getInvoices: function getInvoices(params) {\n    // Request the tax statements list to the API, then triggers the change on the store if success\n    API.Invoice.List(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'INVOICES_RECEIVED',\n        data: response,\n        invoiceType: params.invoice_type\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  exportInvoices: function exportInvoices(params, format) {\n    // Export invoices to desired format\n    switch (format) {\n      case 'invoice_excel':\n        return API.Invoice.ExportInvoiceToExcel(params).then(function (response) {\n          AppDispatcher.handleAction({\n            actionType: 'EXPORT_DOCUMENT',\n            data: response\n          });\n        }).catch(function (error) {\n          AppSignal.sendError(new Error(error));\n          throw error;\n        });\n\n      case 'payroll_excel':\n        return API.Invoice.ExportPayrollToExcel(params).catch(function (error) {\n          AppSignal.sendError(new Error(error));\n          throw error;\n        });\n\n      case 'payment_excel':\n        return API.Invoice.ExportPaymentToExcel(params).catch(function (error) {\n          AppSignal.sendError(new Error(error));\n          throw error;\n        });\n\n      case 'xml':\n        return API.Invoice.ExportToXml(params).catch(function (error) {\n          AppSignal.sendError(new Error(error));\n          throw error;\n        });\n    }\n  },\n  setFrequentlyUsedData: function setFrequentlyUsedData() {\n    return API.Invoice.GetUsedData().then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'USED_DATA_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      return console.error(error);\n    });\n  },\n  setProductsCode: function setProductsCode(params) {\n    return API.Invoice.GetProducts(params).then(function (response) {\n      return response;\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  setUnitsCode: function setUnitsCode(params) {\n    return API.Invoice.GetUnits(params).then(function (response) {\n      return response;\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  cancelInvoice: function cancelInvoice(invoiceId) {\n    return API.Invoice.Cancel(invoiceId);\n  },\n  askCancelationStatus: function () {\n    var _askCancelationStatus = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(invoiceId) {\n      var cancelationStatus, _ref, inProgress, cancelled;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cancelationStatus = {};\n              _context.prev = 1;\n              _context.next = 4;\n              return API.Invoice.AskStatus(invoiceId);\n\n            case 4:\n              _ref = _context.sent;\n              inProgress = _ref.in_progress;\n              cancelled = _ref.cancelled;\n              cancelationStatus.inProgress = inProgress;\n              cancelationStatus.cancelled = cancelled;\n              _context.next = 16;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              AppSignal.sendError(new Error('Ocurri√≥ un error al cancelar la factura.'));\n              cancelationStatus.progress = 'failed';\n              cancelationStatus.cancelled = false;\n\n            case 16:\n              return _context.abrupt(\"return\", cancelationStatus);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    function askCancelationStatus(_x) {\n      return _askCancelationStatus.apply(this, arguments);\n    }\n\n    return askCancelationStatus;\n  }(),\n  getInvoiceInformation: function getInvoiceInformation() {\n    return API.Invoice.GetSerieAndFolio().then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'INVOICE_DATA_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n    });\n  },\n  sendEmail: function sendEmail(invoiceId, data) {\n    return API.Invoice.SendByEmail(invoiceId, data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'EMAIL_SEND',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/invoices.js"],"names":["AppDispatcher","API","AppSignal","getInvoices","params","Invoice","List","then","response","handleAction","actionType","data","invoiceType","invoice_type","catch","error","sendError","exportInvoices","format","ExportInvoiceToExcel","Error","ExportPayrollToExcel","ExportPaymentToExcel","ExportToXml","setFrequentlyUsedData","GetUsedData","console","setProductsCode","GetProducts","setUnitsCode","GetUnits","cancelInvoice","invoiceId","Cancel","askCancelationStatus","cancelationStatus","AskStatus","inProgress","in_progress","cancelled","progress","getInvoiceInformation","GetSerieAndFolio","sendEmail","SendByEmail"],"mappings":"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","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\nimport AppSignal from 'appsignal'\n\n// This action creator sends the type of action and the params (if any) to the dispatcher\nexport default {\n  getInvoices (params) {\n    // Request the tax statements list to the API, then triggers the change on the store if success\n    API.Invoice.List(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'INVOICES_RECEIVED',\n          data: response,\n          invoiceType: params.invoice_type\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  exportInvoices (params, format) {\n    // Export invoices to desired format\n    switch (format) {\n      case 'invoice_excel':\n        return API.Invoice.ExportInvoiceToExcel(params)\n          .then(response => {\n            AppDispatcher.handleAction({\n              actionType: 'EXPORT_DOCUMENT',\n              data: response\n            })\n          })\n          .catch(error => {\n            AppSignal.sendError(new Error(error))\n            throw error\n          })\n      case 'payroll_excel':\n        return API.Invoice.ExportPayrollToExcel(params).catch(error => {\n          AppSignal.sendError(new Error(error))\n          throw error\n        })\n      case 'payment_excel':\n        return API.Invoice.ExportPaymentToExcel(params).catch(error => {\n          AppSignal.sendError(new Error(error))\n          throw error\n        })\n      case 'xml':\n        return API.Invoice.ExportToXml(params).catch(error => {\n          AppSignal.sendError(new Error(error))\n          throw error\n        })\n    }\n  },\n  setFrequentlyUsedData () {\n    return API.Invoice.GetUsedData()\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'USED_DATA_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => console.error(error))\n  },\n  setProductsCode (params) {\n    return API.Invoice.GetProducts(params)\n      .then(response => {\n        return response\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n  setUnitsCode (params) {\n    return API.Invoice.GetUnits(params)\n      .then(response => {\n        return response\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n  cancelInvoice (invoiceId) {\n    return API.Invoice.Cancel(invoiceId)\n  },\n  async askCancelationStatus (invoiceId) {\n    let cancelationStatus = {}\n\n    try {\n      let { in_progress: inProgress, cancelled } = await API.Invoice.AskStatus(\n        invoiceId\n      )\n      cancelationStatus.inProgress = inProgress\n      cancelationStatus.cancelled = cancelled\n    } catch (error) {\n      AppSignal.sendError(new Error('Ocurri√≥ un error al cancelar la factura.'))\n      cancelationStatus.progress = 'failed'\n      cancelationStatus.cancelled = false\n    }\n\n    return cancelationStatus\n  },\n  getInvoiceInformation () {\n    return API.Invoice.GetSerieAndFolio()\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'INVOICE_DATA_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n      })\n  },\n\n  sendEmail (invoiceId, data) {\n    return API.Invoice.SendByEmail(invoiceId, data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'EMAIL_SEND',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}