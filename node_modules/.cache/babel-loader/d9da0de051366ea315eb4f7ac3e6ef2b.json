{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseStore from './baseStore';\n\nvar DashboardStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(DashboardStore, _BaseStore);\n\n  function DashboardStore() {\n    var _this;\n\n    _classCallCheck(this, DashboardStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboardStore).call(this));\n    _this.chartData = [];\n    _this.recentIncomes = [];\n    _this.recentExpenses = [];\n    _this.actions = {\n      CHART_DATA_RECEIVED: function CHART_DATA_RECEIVED(action) {\n        _this.setChartData(action.data);\n      },\n      RECENT_INCOMES_RECEIVED: function RECENT_INCOMES_RECEIVED(action) {\n        _this.setRecentIncomes(action.data);\n      },\n      RECENT_EXPENSES_RECEIVED: function RECENT_EXPENSES_RECEIVED(action) {\n        _this.setRecentExpenses(action.data);\n      }\n    };\n    return _this;\n  } // Returns stored chart data list, this is used when explicitly you want to know it\n\n\n  _createClass(DashboardStore, [{\n    key: \"getChartData\",\n    value: function getChartData() {\n      return this.chartData;\n    }\n  }, {\n    key: \"getRecentIncomes\",\n    value: function getRecentIncomes() {\n      return this.recentIncomes;\n    }\n  }, {\n    key: \"getRecentExpenses\",\n    value: function getRecentExpenses() {\n      return this.recentExpenses;\n    } // Sets the chart data list from the data received from the api\n\n  }, {\n    key: \"setChartData\",\n    value: function setChartData(data) {\n      this.chartData = data.data;\n    }\n  }, {\n    key: \"setRecentIncomes\",\n    value: function setRecentIncomes(data) {\n      this.recentIncomes = data.invoices;\n    }\n  }, {\n    key: \"setRecentExpenses\",\n    value: function setRecentExpenses(data) {\n      this.recentExpenses = data.invoices;\n    }\n  }]);\n\n  return DashboardStore;\n}(BaseStore);\n\nexport default DashboardStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/dashboard.js"],"names":["BaseStore","DashboardStore","chartData","recentIncomes","recentExpenses","actions","CHART_DATA_RECEIVED","action","setChartData","data","RECENT_INCOMES_RECEIVED","setRecentIncomes","RECENT_EXPENSES_RECEIVED","setRecentExpenses","invoices","getInstance"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;IAEMC,c;;;;;AACJ,4BAAe;AAAA;;AAAA;;AACb;AACA,UAAKC,SAAL,GAAiB,EAAjB;AACA,UAAKC,aAAL,GAAqB,EAArB;AACA,UAAKC,cAAL,GAAsB,EAAtB;AAEA,UAAKC,OAAL,GAAe;AACbC,MAAAA,mBAAmB,EAAE,6BAAAC,MAAM,EAAI;AAC7B,cAAKC,YAAL,CAAkBD,MAAM,CAACE,IAAzB;AACD,OAHY;AAIbC,MAAAA,uBAAuB,EAAE,iCAAAH,MAAM,EAAI;AACjC,cAAKI,gBAAL,CAAsBJ,MAAM,CAACE,IAA7B;AACD,OANY;AAObG,MAAAA,wBAAwB,EAAE,kCAAAL,MAAM,EAAI;AAClC,cAAKM,iBAAL,CAAuBN,MAAM,CAACE,IAA9B;AACD;AATY,KAAf;AANa;AAiBd,G,CAED;;;;;mCACgB;AACd,aAAO,KAAKP,SAAZ;AACD;;;uCAEmB;AAClB,aAAO,KAAKC,aAAZ;AACD;;;wCAEoB;AACnB,aAAO,KAAKC,cAAZ;AACD,K,CAED;;;;iCACcK,I,EAAM;AAClB,WAAKP,SAAL,GAAiBO,IAAI,CAACA,IAAtB;AACD;;;qCAEiBA,I,EAAM;AACtB,WAAKN,aAAL,GAAqBM,IAAI,CAACK,QAA1B;AACD;;;sCAEkBL,I,EAAM;AACvB,WAAKL,cAAL,GAAsBK,IAAI,CAACK,QAA3B;AACD;;;;EA5C0Bd,S;;AA+C7B,eAAeC,cAAc,CAACc,WAAf,EAAf","sourcesContent":["import BaseStore from './baseStore'\n\nclass DashboardStore extends BaseStore {\n  constructor () {\n    super()\n    this.chartData = []\n    this.recentIncomes = []\n    this.recentExpenses = []\n\n    this.actions = {\n      CHART_DATA_RECEIVED: action => {\n        this.setChartData(action.data)\n      },\n      RECENT_INCOMES_RECEIVED: action => {\n        this.setRecentIncomes(action.data)\n      },\n      RECENT_EXPENSES_RECEIVED: action => {\n        this.setRecentExpenses(action.data)\n      }\n    }\n  }\n\n  // Returns stored chart data list, this is used when explicitly you want to know it\n  getChartData () {\n    return this.chartData\n  }\n\n  getRecentIncomes () {\n    return this.recentIncomes\n  }\n\n  getRecentExpenses () {\n    return this.recentExpenses\n  }\n\n  // Sets the chart data list from the data received from the api\n  setChartData (data) {\n    this.chartData = data.data\n  }\n\n  setRecentIncomes (data) {\n    this.recentIncomes = data.invoices\n  }\n\n  setRecentExpenses (data) {\n    this.recentExpenses = data.invoices\n  }\n}\n\nexport default DashboardStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}