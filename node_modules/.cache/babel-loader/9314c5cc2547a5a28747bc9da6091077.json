{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport API from '../api';\nimport AppSignal from 'appsignal';\nexport default {\n  // Requests the client's acquired services list to the API\n  getServicesList: function getServicesList() {\n    return API.Suscriptions.GetServices().then(function (services) {\n      AppDispatcher.handleAction({\n        actionType: 'SERVICES_LIST_RECEIVED',\n        data: services\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  // Gets all the payment cards of a given taxable entity\n  getPaymentSourcesList: function getPaymentSourcesList() {\n    return API.Suscriptions.GetPaymentSources().then(function (paymentSources) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_SOURCES_LIST_RECEIVED',\n        data: paymentSources\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  // Gets the payment log for a given taxable entity\n  getPaymentLogs: function getPaymentLogs() {\n    return API.Suscriptions.GetPaymentsLog().then(function (paymentLogs) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_LOG_RECEIVED',\n        data: paymentLogs\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  // Gets the payment log for a given taxable entity\n  getPendingPayments: function getPendingPayments() {\n    return API.Suscriptions.GetPendingPayments().then(function (paymentLogs) {\n      AppDispatcher.handleAction({\n        actionType: 'PENDING_PAYMENTS_RECEIVED',\n        data: paymentLogs\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  deletePaymentSource: function deletePaymentSource(idCard) {\n    return API.Suscriptions.DeletePaymentSource(idCard).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_SOURCE_DELETED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  // The selected card becomes the principal payment source\n  makePrincipalPaymentCard: function makePrincipalPaymentCard(idCard) {\n    return API.Suscriptions.MakePrincipalPaymentCard(idCard).then(function (principalPaymentsource) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_METHOD_UPDATED',\n        data: principalPaymentsource\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  // Adds a payment source\n  createPaymentSource: function createPaymentSource(cardInfo) {\n    return API.Suscriptions.CreatePaymentSource(cardInfo).then(function (paymentSource) {\n      AppDispatcher.handleAction({\n        actionType: 'PAYMENT_SOURCE_CREATED',\n        data: paymentSource\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  // Pay service\n  payOrders: function payOrders(ids) {\n    return API.Suscriptions.PayService(ids).then(function (service) {\n      AppDispatcher.handleAction({\n        actionType: 'SERVICE_PAID',\n        data: service\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  clearCurrentServiceList: function clearCurrentServiceList() {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_SERVICES'\n    });\n  },\n  createPremium: function createPremium(cardInfo) {\n    return API.Premium.CreatePremium(cardInfo).then(function (paymentSource) {\n      AppDispatcher.handleAction({\n        actionType: 'PREMIUM_ACQUIRED',\n        data: paymentSource\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  cancelPlan: function cancelPlan(data) {\n    return API.User.CreateCancelRequest(data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PLAN_CANCELED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/suscription.js"],"names":["AppDispatcher","API","AppSignal","getServicesList","Suscriptions","GetServices","then","services","handleAction","actionType","data","catch","error","sendError","Error","getPaymentSourcesList","GetPaymentSources","paymentSources","getPaymentLogs","GetPaymentsLog","paymentLogs","getPendingPayments","GetPendingPayments","deletePaymentSource","idCard","DeletePaymentSource","response","makePrincipalPaymentCard","MakePrincipalPaymentCard","principalPaymentsource","createPaymentSource","cardInfo","CreatePaymentSource","paymentSource","payOrders","ids","PayService","service","clearCurrentServiceList","createPremium","Premium","CreatePremium","cancelPlan","User","CreateCancelRequest"],"mappings":"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","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\nimport AppSignal from 'appsignal'\n\nexport default {\n  // Requests the client's acquired services list to the API\n  getServicesList () {\n    return API.Suscriptions.GetServices()\n      .then(services => {\n        AppDispatcher.handleAction({\n          actionType: 'SERVICES_LIST_RECEIVED',\n          data: services\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n  // Gets all the payment cards of a given taxable entity\n  getPaymentSourcesList () {\n    return API.Suscriptions.GetPaymentSources()\n      .then(paymentSources => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_SOURCES_LIST_RECEIVED',\n          data: paymentSources\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n  // Gets the payment log for a given taxable entity\n  getPaymentLogs () {\n    return API.Suscriptions.GetPaymentsLog()\n      .then(paymentLogs => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_LOG_RECEIVED',\n          data: paymentLogs\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n  // Gets the payment log for a given taxable entity\n  getPendingPayments () {\n    return API.Suscriptions.GetPendingPayments()\n      .then(paymentLogs => {\n        AppDispatcher.handleAction({\n          actionType: 'PENDING_PAYMENTS_RECEIVED',\n          data: paymentLogs\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n\n  deletePaymentSource (idCard) {\n    return API.Suscriptions.DeletePaymentSource(idCard)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_SOURCE_DELETED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n  // The selected card becomes the principal payment source\n  makePrincipalPaymentCard (idCard) {\n    return API.Suscriptions.MakePrincipalPaymentCard(idCard)\n      .then(principalPaymentsource => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_METHOD_UPDATED',\n          data: principalPaymentsource\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n  // Adds a payment source\n  createPaymentSource (cardInfo) {\n    return API.Suscriptions.CreatePaymentSource(cardInfo)\n      .then(paymentSource => {\n        AppDispatcher.handleAction({\n          actionType: 'PAYMENT_SOURCE_CREATED',\n          data: paymentSource\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n  // Pay service\n  payOrders (ids) {\n    return API.Suscriptions.PayService(ids)\n      .then(service => {\n        AppDispatcher.handleAction({\n          actionType: 'SERVICE_PAID',\n          data: service\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n  clearCurrentServiceList () {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_SERVICES'\n    })\n  },\n\n  createPremium (cardInfo) {\n    return API.Premium.CreatePremium(cardInfo)\n      .then(paymentSource => {\n        AppDispatcher.handleAction({\n          actionType: 'PREMIUM_ACQUIRED',\n          data: paymentSource\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n\n  cancelPlan (data) {\n    return API.User.CreateCancelRequest(data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PLAN_CANCELED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}