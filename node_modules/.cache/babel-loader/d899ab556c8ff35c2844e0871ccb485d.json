{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport API from '../api';\nexport default {\n  setProducts: function setProducts(params) {\n    return API.Inventories.GetProducts(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PRODUCTS_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      return console.error(error);\n    });\n  },\n\n  /**\n   * This functions send to analyze the Excel file and return the found errors.\n   * Also save in the store the file attached because it will use to save the valid records.\n   * It has the flag preview = true\n   * @param {Object} productsImport\n   */\n  analyzeProducts: function analyzeProducts(productsImport) {\n    return API.Inventories.MassivelyInsertProducts(productsImport).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PRODUCTS_ANALYZED',\n        data: response\n      });\n      AppDispatcher.handleAction({\n        actionType: 'FILE_UPLOADED',\n        data: productsImport\n      });\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n\n  /**\n   * This save the products without errors, it has the flag preview = false\n   * @param {Object} productsImport\n   */\n  massivelyInsertProducts: function massivelyInsertProducts(productsImport) {\n    return API.Inventories.MassivelyInsertProducts(productsImport).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PRODUCTS_SAVED',\n        data: response\n      });\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  createProduct: function createProduct(product) {\n    return API.Inventories.CreateProduct(product).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PRODUCT_CREATED',\n        data: response\n      });\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  deleteProduct: function deleteProduct(id) {\n    return API.Inventories.DeleteProduct(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PRODUCT_DELETED',\n        data: response,\n        idDeleted: id\n      });\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  updateProduct: function updateProduct(id, data) {\n    return API.Inventories.UpdateProduct(id, data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'PRODUCT_UPDATED',\n        data: response\n      });\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  getRecords: function getRecords(params) {\n    return API.Inventories.GetRecords(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'RECORDS_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      throw error;\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/inventories.js"],"names":["AppDispatcher","API","setProducts","params","Inventories","GetProducts","then","response","handleAction","actionType","data","catch","error","console","analyzeProducts","productsImport","MassivelyInsertProducts","massivelyInsertProducts","createProduct","product","CreateProduct","deleteProduct","id","DeleteProduct","idDeleted","updateProduct","UpdateProduct","getRecords","GetRecords"],"mappings":"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","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\n\nexport default {\n  setProducts (params) {\n    return API.Inventories.GetProducts(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PRODUCTS_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => console.error(error))\n  },\n\n  /**\n   * This functions send to analyze the Excel file and return the found errors.\n   * Also save in the store the file attached because it will use to save the valid records.\n   * It has the flag preview = true\n   * @param {Object} productsImport\n   */\n  analyzeProducts (productsImport) {\n    return API.Inventories.MassivelyInsertProducts(productsImport)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PRODUCTS_ANALYZED',\n          data: response\n        })\n        AppDispatcher.handleAction({\n          actionType: 'FILE_UPLOADED',\n          data: productsImport\n        })\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n  /**\n   * This save the products without errors, it has the flag preview = false\n   * @param {Object} productsImport\n   */\n  massivelyInsertProducts (productsImport) {\n    return API.Inventories.MassivelyInsertProducts(productsImport)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PRODUCTS_SAVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n  createProduct (product) {\n    return API.Inventories.CreateProduct(product)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PRODUCT_CREATED',\n          data: response\n        })\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n  deleteProduct (id) {\n    return API.Inventories.DeleteProduct(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PRODUCT_DELETED',\n          data: response,\n          idDeleted: id\n        })\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n  updateProduct (id, data) {\n    return API.Inventories.UpdateProduct(id, data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'PRODUCT_UPDATED',\n          data: response\n        })\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n  getRecords (params) {\n    return API.Inventories.GetRecords(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'RECORDS_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        throw error\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}