{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseStore from './baseStore';\n\nvar SuscriptionStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(SuscriptionStore, _BaseStore);\n\n  function SuscriptionStore() {\n    var _this;\n\n    _classCallCheck(this, SuscriptionStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SuscriptionStore).call(this));\n    _this.next_billing_date = '';\n    _this.services = [];\n    _this.total = 0;\n    _this.payment_sources = [];\n    _this.payments = [];\n    _this.pendingPayments = [];\n    _this.minimumPayments = [];\n    _this.totalPages = 1;\n    _this.totalItems = 0;\n    _this.currentPage = 1;\n    _this.actions = {\n      SERVICES_LIST_RECEIVED: function SERVICES_LIST_RECEIVED(action) {\n        _this.setServices(action.data);\n      },\n      PAYMENT_SOURCES_LIST_RECEIVED: function PAYMENT_SOURCES_LIST_RECEIVED(action) {\n        _this.setPaymentSources(action.data);\n      },\n      PAYMENT_LOG_RECEIVED: function PAYMENT_LOG_RECEIVED(action) {\n        _this.setPaymentsLog(action.data);\n      },\n      PENDING_PAYMENTS_RECEIVED: function PENDING_PAYMENTS_RECEIVED(action) {\n        _this.setPendingPayments(action.data);\n      },\n      PAYMENT_METHOD_UPDATED: function PAYMENT_METHOD_UPDATED(action) {\n        _this.updatePaymentSourceList(action.data);\n      },\n      CLEAR_CURRENT_SERVICES: function CLEAR_CURRENT_SERVICES(action) {\n        _this.clearCurrentServices();\n      },\n      PAYMENT_SOURCE_CREATED: function PAYMENT_SOURCE_CREATED(action) {\n        _this.setNewPaymentSource(action.data);\n      }\n    };\n    return _this;\n  }\n\n  _createClass(SuscriptionStore, [{\n    key: \"getNextBillingDate\",\n    value: function getNextBillingDate() {\n      return this.next_billing_date;\n    }\n  }, {\n    key: \"getListServices\",\n    value: function getListServices() {\n      return this.services;\n    }\n  }, {\n    key: \"getTotalAmount\",\n    value: function getTotalAmount() {\n      return this.total;\n    }\n  }, {\n    key: \"getPaymentSourcesList\",\n    value: function getPaymentSourcesList() {\n      return this.payment_sources;\n    } // Returns stored total pages, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getTotalPages\",\n    value: function getTotalPages() {\n      return this.totalPages;\n    } // Returns stored total pages, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getTotalItems\",\n    value: function getTotalItems() {\n      return this.totalItems;\n    } // Returns stored current page, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      return this.currentPage;\n    } // Returns the list of payments log\n\n  }, {\n    key: \"getPaymentsLog\",\n    value: function getPaymentsLog() {\n      return this.payments;\n    } // Returns the list of pending payments\n\n  }, {\n    key: \"getPendingPayments\",\n    value: function getPendingPayments() {\n      return this.pendingPayments;\n    } // Returns a list of ids of the payment order that should be paid to reactivate the platform access\n\n  }, {\n    key: \"getMinimumPayments\",\n    value: function getMinimumPayments() {\n      return this.minimumPayments;\n    } // Returns total of created payment sources\n\n  }, {\n    key: \"getTotalPaymentSources\",\n    value: function getTotalPaymentSources() {\n      return this.payment_sources.length;\n    }\n  }, {\n    key: \"getSumServices\",\n    value: function getSumServices() {\n      return this.payments.reduce(function (accumulator, service) {\n        return Number(accumulator) + Number(service.total);\n      }, 0);\n    } // Sets the client's acquired services information\n\n  }, {\n    key: \"setServices\",\n    value: function setServices(data) {\n      this.next_billing_date = data.next_billing_date;\n      this.services = data.services;\n      this.total = data.total;\n    } // Sets the client's payment sources list\n\n  }, {\n    key: \"setPaymentSources\",\n    value: function setPaymentSources(data) {\n      this.payment_sources = data.payment_sources;\n    }\n  }, {\n    key: \"setNewPaymentSource\",\n    value: function setNewPaymentSource(_ref) {\n      var paymentSources = _ref.payment_sources;\n      return this.payment_sources.push(paymentSources);\n    } // Sets the list of payment log\n\n  }, {\n    key: \"setPaymentsLog\",\n    value: function setPaymentsLog(data) {\n      this.payments = data.payments;\n      this.totalItems = data.pagination.total_items;\n      this.totalPages = data.pagination.total_pages;\n      this.currentPage = data.pagination.current_page;\n    } // Set the pending payments list, it is not paginated\n\n  }, {\n    key: \"setPendingPayments\",\n    value: function setPendingPayments(data) {\n      this.pendingPayments = data.payments;\n      this.minimumPayments = data.minimum_payments;\n    }\n  }, {\n    key: \"updatePaymentSourceList\",\n    value: function updatePaymentSourceList(data) {\n      var paymentSources = this.payment_sources;\n      paymentSources.forEach(function (source) {\n        if (source.id === data.payment_sources.id) {\n          source.main_card = data.payment_sources.main_card;\n        } else {\n          source.main_card = false;\n        }\n      });\n      this.payment_sources = paymentSources;\n    }\n  }, {\n    key: \"clearCurrentServices\",\n    value: function clearCurrentServices() {\n      this.services = [];\n      this.total = 0;\n    }\n  }]);\n\n  return SuscriptionStore;\n}(BaseStore);\n\nexport default SuscriptionStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/suscription.js"],"names":["BaseStore","SuscriptionStore","next_billing_date","services","total","payment_sources","payments","pendingPayments","minimumPayments","totalPages","totalItems","currentPage","actions","SERVICES_LIST_RECEIVED","action","setServices","data","PAYMENT_SOURCES_LIST_RECEIVED","setPaymentSources","PAYMENT_LOG_RECEIVED","setPaymentsLog","PENDING_PAYMENTS_RECEIVED","setPendingPayments","PAYMENT_METHOD_UPDATED","updatePaymentSourceList","CLEAR_CURRENT_SERVICES","clearCurrentServices","PAYMENT_SOURCE_CREATED","setNewPaymentSource","length","reduce","accumulator","service","Number","paymentSources","push","pagination","total_items","total_pages","current_page","minimum_payments","forEach","source","id","main_card","getInstance"],"mappings":"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","sourcesContent":["import BaseStore from './baseStore'\n\nclass SuscriptionStore extends BaseStore {\n  constructor () {\n    super()\n    this.next_billing_date = ''\n    this.services = []\n    this.total = 0\n    this.payment_sources = []\n    this.payments = []\n    this.pendingPayments = []\n    this.minimumPayments = []\n    this.totalPages = 1\n    this.totalItems = 0\n    this.currentPage = 1\n\n    this.actions = {\n      SERVICES_LIST_RECEIVED: action => {\n        this.setServices(action.data)\n      },\n      PAYMENT_SOURCES_LIST_RECEIVED: action => {\n        this.setPaymentSources(action.data)\n      },\n      PAYMENT_LOG_RECEIVED: action => {\n        this.setPaymentsLog(action.data)\n      },\n      PENDING_PAYMENTS_RECEIVED: action => {\n        this.setPendingPayments(action.data)\n      },\n      PAYMENT_METHOD_UPDATED: action => {\n        this.updatePaymentSourceList(action.data)\n      },\n      CLEAR_CURRENT_SERVICES: action => {\n        this.clearCurrentServices()\n      },\n      PAYMENT_SOURCE_CREATED: action => {\n        this.setNewPaymentSource(action.data)\n      }\n    }\n  }\n\n  getNextBillingDate () {\n    return this.next_billing_date\n  }\n\n  getListServices () {\n    return this.services\n  }\n\n  getTotalAmount () {\n    return this.total\n  }\n\n  getPaymentSourcesList () {\n    return this.payment_sources\n  }\n\n  // Returns stored total pages, this is used when explicitly you want to know it\n  getTotalPages () {\n    return this.totalPages\n  }\n\n  // Returns stored total pages, this is used when explicitly you want to know it\n  getTotalItems () {\n    return this.totalItems\n  }\n\n  // Returns stored current page, this is used when explicitly you want to know it\n  getCurrentPage () {\n    return this.currentPage\n  }\n\n  // Returns the list of payments log\n  getPaymentsLog () {\n    return this.payments\n  }\n\n  // Returns the list of pending payments\n  getPendingPayments () {\n    return this.pendingPayments\n  }\n\n  // Returns a list of ids of the payment order that should be paid to reactivate the platform access\n  getMinimumPayments () {\n    return this.minimumPayments\n  }\n\n  // Returns total of created payment sources\n  getTotalPaymentSources () {\n    return this.payment_sources.length\n  }\n\n  getSumServices () {\n    return this.payments.reduce((accumulator, service) => {\n      return Number(accumulator) + Number(service.total)\n    }, 0)\n  }\n\n  // Sets the client's acquired services information\n  setServices (data) {\n    this.next_billing_date = data.next_billing_date\n    this.services = data.services\n    this.total = data.total\n  }\n  // Sets the client's payment sources list\n  setPaymentSources (data) {\n    this.payment_sources = data.payment_sources\n  }\n\n  setNewPaymentSource ({ payment_sources: paymentSources }) {\n    return this.payment_sources.push(paymentSources)\n  }\n  // Sets the list of payment log\n  setPaymentsLog (data) {\n    this.payments = data.payments\n    this.totalItems = data.pagination.total_items\n    this.totalPages = data.pagination.total_pages\n    this.currentPage = data.pagination.current_page\n  }\n\n  // Set the pending payments list, it is not paginated\n  setPendingPayments (data) {\n    this.pendingPayments = data.payments\n    this.minimumPayments = data.minimum_payments\n  }\n\n  updatePaymentSourceList (data) {\n    let paymentSources = this.payment_sources\n\n    paymentSources.forEach(source => {\n      if (source.id === data.payment_sources.id) {\n        source.main_card = data.payment_sources.main_card\n      } else {\n        source.main_card = false\n      }\n    })\n    this.payment_sources = paymentSources\n  }\n\n  clearCurrentServices () {\n    this.services = []\n    this.total = 0\n  }\n}\n\nexport default SuscriptionStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}