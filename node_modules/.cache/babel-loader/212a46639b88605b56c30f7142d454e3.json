{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseStore from './baseStore';\nimport moment from 'moment';\n\nvar InvoicesStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(InvoicesStore, _BaseStore);\n\n  function InvoicesStore() {\n    var _this;\n\n    _classCallCheck(this, InvoicesStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InvoicesStore).call(this));\n    _this.incomes = {\n      invoices: [],\n      totalPages: 1,\n      currentPage: 1,\n      totalItems: 0\n    };\n    _this.expenses = {\n      invoices: [],\n      totalPages: 1,\n      currentPage: 1,\n      totalItems: 0\n    };\n    _this.payroll_expenses = {\n      invoices: [],\n      totalPages: 1,\n      currentPage: 1,\n      totalItems: 0\n    };\n    _this.products = [];\n    _this.units = [];\n    _this.cancelationStatus = false;\n    _this.dateTime = moment();\n    _this.remainingInvoices = 0;\n    _this.time = {\n      hour: '',\n      minute: ''\n    };\n    _this.originalDateTime = moment().utc();\n    _this.invoice = {};\n    _this.actions = {\n      INVOICES_RECEIVED: function INVOICES_RECEIVED(action) {\n        _this.setInvoices(action);\n      },\n      USED_DATA_RECEIVED: function USED_DATA_RECEIVED(action) {\n        _this.setProducts(action.data);\n\n        _this.setUnits(action.data);\n      },\n      INVOICE_DATA_RECEIVED: function INVOICE_DATA_RECEIVED(action) {\n        _this.setInvoiceInformation(action.data);\n      }\n    };\n    return _this;\n  } // Returns stored total pages, this is used when explicitly you want to know it\n\n\n  _createClass(InvoicesStore, [{\n    key: \"getTotalPages\",\n    value: function getTotalPages(invoiceType) {\n      return this[invoiceType].totalPages;\n    } // Returns stored total pages, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getTotalItems\",\n    value: function getTotalItems(invoiceType) {\n      return this[invoiceType].totalItems;\n    } // Returns stored current page, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage(invoiceType) {\n      return this[invoiceType].currentPage;\n    } // Returns stored invoice list, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getInvoices\",\n    value: function getInvoices(invoiceType) {\n      return this[invoiceType].invoices;\n    } // Sets the invoice list from the data received from the api\n\n  }, {\n    key: \"setInvoices\",\n    value: function setInvoices(action) {\n      var invoiceType = action.invoiceType,\n          data = action.data;\n      this[invoiceType] = {\n        invoices: data.invoices,\n        totalPages: data.pagination.total_pages,\n        currentPage: data.pagination.current_page,\n        totalItems: data.pagination.total_items\n      };\n    }\n  }, {\n    key: \"setProducts\",\n    value: function setProducts(_ref) {\n      var products = _ref.products;\n      this.products = products;\n    }\n  }, {\n    key: \"getProducts\",\n    value: function getProducts() {\n      return this.products;\n    }\n  }, {\n    key: \"setUnits\",\n    value: function setUnits(_ref2) {\n      var units = _ref2.units;\n      this.units = units;\n    }\n  }, {\n    key: \"getUnits\",\n    value: function getUnits() {\n      return this.units;\n    }\n  }, {\n    key: \"setInvoiceInformation\",\n    value: function setInvoiceInformation(_ref3) {\n      var newInvoice = _ref3.new_invoice;\n      var currentDateTime = newInvoice.current_datetime,\n          nextFolio = newInvoice.next_folio,\n          nextSerie = newInvoice.next_serie,\n          remainingInvoices = newInvoice.remaining_invoices;\n      this.dateTime = moment.utc(currentDateTime);\n      this.remainingInvoices = remainingInvoices;\n      this.time['hour'] = this.dateTime.format('HH');\n      this.time['minute'] = this.dateTime.format('mm');\n      this.invoice = {\n        folio: nextFolio !== '' ? nextFolio : '0001',\n        series: nextSerie !== '' ? nextSerie : 'A',\n        issue_date: moment.utc(currentDateTime),\n        comments: '',\n        exchange_rate: '1.0',\n        currency: 'MXN',\n        voucher_type: ''\n      };\n      this.originalDateTime = moment.utc(currentDateTime);\n    }\n  }, {\n    key: \"getDateTime\",\n    value: function getDateTime() {\n      return this.dateTime;\n    }\n  }, {\n    key: \"getRemainingInvoices\",\n    value: function getRemainingInvoices() {\n      return this.remainingInvoices;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return this.time;\n    }\n  }, {\n    key: \"getInvoice\",\n    value: function getInvoice() {\n      return this.invoice;\n    }\n  }, {\n    key: \"getOriginalDateTime\",\n    value: function getOriginalDateTime() {\n      return this.originalDateTime;\n    }\n  }]);\n\n  return InvoicesStore;\n}(BaseStore);\n\nexport default InvoicesStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/invoices.js"],"names":["BaseStore","moment","InvoicesStore","incomes","invoices","totalPages","currentPage","totalItems","expenses","payroll_expenses","products","units","cancelationStatus","dateTime","remainingInvoices","time","hour","minute","originalDateTime","utc","invoice","actions","INVOICES_RECEIVED","action","setInvoices","USED_DATA_RECEIVED","setProducts","data","setUnits","INVOICE_DATA_RECEIVED","setInvoiceInformation","invoiceType","pagination","total_pages","current_page","total_items","newInvoice","new_invoice","currentDateTime","current_datetime","nextFolio","next_folio","nextSerie","next_serie","remaining_invoices","format","folio","series","issue_date","comments","exchange_rate","currency","voucher_type","getInstance"],"mappings":"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","sourcesContent":["import BaseStore from './baseStore'\nimport moment from 'moment'\n\nclass InvoicesStore extends BaseStore {\n  constructor () {\n    super()\n    this.incomes = {\n      invoices: [],\n      totalPages: 1,\n      currentPage: 1,\n      totalItems: 0\n    }\n    this.expenses = {\n      invoices: [],\n      totalPages: 1,\n      currentPage: 1,\n      totalItems: 0\n    }\n    this.payroll_expenses = {\n      invoices: [],\n      totalPages: 1,\n      currentPage: 1,\n      totalItems: 0\n    }\n    this.products = []\n    this.units = []\n    this.cancelationStatus = false\n    this.dateTime = moment()\n    this.remainingInvoices = 0\n    this.time = {\n      hour: '',\n      minute: ''\n    }\n\n    this.originalDateTime = moment().utc()\n\n    this.invoice = {}\n    this.actions = {\n      INVOICES_RECEIVED: action => {\n        this.setInvoices(action)\n      },\n      USED_DATA_RECEIVED: action => {\n        this.setProducts(action.data)\n        this.setUnits(action.data)\n      },\n      INVOICE_DATA_RECEIVED: action => {\n        this.setInvoiceInformation(action.data)\n      }\n    }\n  }\n\n  // Returns stored total pages, this is used when explicitly you want to know it\n  getTotalPages (invoiceType) {\n    return this[invoiceType].totalPages\n  }\n\n  // Returns stored total pages, this is used when explicitly you want to know it\n  getTotalItems (invoiceType) {\n    return this[invoiceType].totalItems\n  }\n\n  // Returns stored current page, this is used when explicitly you want to know it\n  getCurrentPage (invoiceType) {\n    return this[invoiceType].currentPage\n  }\n\n  // Returns stored invoice list, this is used when explicitly you want to know it\n  getInvoices (invoiceType) {\n    return this[invoiceType].invoices\n  }\n\n  // Sets the invoice list from the data received from the api\n  setInvoices (action) {\n    let { invoiceType, data } = action\n    this[invoiceType] = {\n      invoices: data.invoices,\n      totalPages: data.pagination.total_pages,\n      currentPage: data.pagination.current_page,\n      totalItems: data.pagination.total_items\n    }\n  }\n  setProducts ({ products }) {\n    this.products = products\n  }\n  getProducts () {\n    return this.products\n  }\n  setUnits ({ units }) {\n    this.units = units\n  }\n  getUnits () {\n    return this.units\n  }\n  setInvoiceInformation ({ new_invoice: newInvoice }) {\n    const {\n      current_datetime: currentDateTime,\n      next_folio: nextFolio,\n      next_serie: nextSerie,\n      remaining_invoices: remainingInvoices\n    } = newInvoice\n    this.dateTime = moment.utc(currentDateTime)\n    this.remainingInvoices = remainingInvoices\n    this.time['hour'] = this.dateTime.format('HH')\n    this.time['minute'] = this.dateTime.format('mm')\n\n    this.invoice = {\n      folio: nextFolio !== '' ? nextFolio : '0001',\n      series: nextSerie !== '' ? nextSerie : 'A',\n      issue_date: moment.utc(currentDateTime),\n      comments: '',\n      exchange_rate: '1.0',\n      currency: 'MXN',\n      voucher_type: ''\n    }\n    this.originalDateTime = moment.utc(currentDateTime)\n  }\n  getDateTime () {\n    return this.dateTime\n  }\n  getRemainingInvoices () {\n    return this.remainingInvoices\n  }\n  getTime () {\n    return this.time\n  }\n  getInvoice () {\n    return this.invoice\n  }\n  getOriginalDateTime () {\n    return this.originalDateTime\n  }\n}\n\nexport default InvoicesStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}