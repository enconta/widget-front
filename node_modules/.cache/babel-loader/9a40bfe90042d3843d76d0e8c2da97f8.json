{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport API from 'api'; // This action creator sends the type of action and the params (if any) to the dispatcher\n\nexport default {\n  getClientsList: function getClientsList(params) {\n    // Gets the Employee List from the API, then triggers the change on the store if success\n    API.EditClient.GetClientsList(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'CLIENTS_LIST_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getEmployeesList: function getEmployeesList(params) {\n    // Gets the Employee List from the API, then triggers the change on the store if success\n    API.EditClient.GetEmployeesList(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'EMPLOYEES_LIST_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getBranchesList: function getBranchesList(params) {\n    // Gets the Branches List from the API, then triggers the change on the store if success\n    API.EditClient.GetBranchesList(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'BRANCHES_LIST_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getEntityData: function getEntityData(id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetEntityData(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'ENTITY_DATA_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getClientData: function getClientData(id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetClientData(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'CLIENT_DATA_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getEmployeeData: function getEmployeeData(id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetEmployeeData(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'EMPLOYEE_DATA_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getBranchData: function getBranchData(id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetBranchData(id).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'BRANCH_DATA_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  createClient: function createClient(data) {\n    // Send the Employee creation data to the API, then triggers the change on the store if success\n    return API.EditClient.CreateClient(data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'CLIENT_DATA_SAVED',\n        data: response\n      });\n      return response;\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  createEmployee: function createEmployee(data) {\n    // Send the Employee creation data to the API, then triggers the change on the store if success\n    return API.EditClient.CreateEmployee(data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'EMPLOYEE_DATA_SAVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  createBranch: function createBranch(data) {\n    // Send the Branch creation data to the API, then triggers the change on the store if success\n    return API.EditClient.CreateBranch(data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'BRANCH_DATA_SAVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  setEntityData: function setEntityData(id, data) {\n    // Send the Employee Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetEntitytData(id, data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'ENTITY_DATA_SAVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  setClientData: function setClientData(id, data) {\n    // Send the Employee Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetClientData(id, data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'CLIENT_DATA_SAVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  setEmployeeData: function setEmployeeData(id, data) {\n    // Send the Employee Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetEmployeeData(id, data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'EMPLOYEE_DATA_SAVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  setBranchData: function setBranchData(id, data) {\n    // Send the Branch Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetBranchData(id, data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'BRANCH_DATA_SAVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  toggleClientStatus: function toggleClientStatus(id, request) {\n    // Send the Employee Status change to the API, then triggers the change on the store if success\n    return API.EditClient.ChangeClientStatus(id, request).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'CLIENT_STATUS_CHANGED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  toggleEmployeeStatus: function toggleEmployeeStatus(id, request) {\n    // Send the Employee Status change to the API, then triggers the change on the store if success\n    return API.EditClient.ChangeEmployeeStatus(id, request).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'EMPLOYEE_STATUS_CHANGED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n      throw error;\n    });\n  },\n  deleteBranch: function deleteBranch(id) {\n    return API.EditClient.DeleteBranch(id);\n  },\n  deleteClient: function deleteClient(id) {\n    return API.EditClient.DeleteClient(id);\n  },\n  deleteEmployee: function deleteEmployee(id) {\n    return API.EditClient.DeleteEmployee(id);\n  },\n  clearEditingEntity: function clearEditingEntity() {\n    // Sets current Employee in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_EDITING_ENTITY'\n    });\n  },\n  clearClient: function clearClient() {\n    // Sets current Employee in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_CLIENT'\n    });\n  },\n  clearProvider: function clearProvider() {\n    // Sets current Provider in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_PROVIDER'\n    });\n  },\n  clearEmployee: function clearEmployee() {\n    // Sets current Employee in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_EMPLOYEE'\n    });\n  },\n  clearBranch: function clearBranch() {\n    // Sets current Branch in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_BRANCH'\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/editClient.js"],"names":["AppDispatcher","API","getClientsList","params","EditClient","GetClientsList","then","response","handleAction","actionType","data","catch","error","AppSignal","sendError","getEmployeesList","GetEmployeesList","getBranchesList","GetBranchesList","getEntityData","id","GetEntityData","getClientData","GetClientData","getEmployeeData","GetEmployeeData","getBranchData","GetBranchData","createClient","CreateClient","createEmployee","CreateEmployee","createBranch","CreateBranch","setEntityData","SetEntitytData","setClientData","SetClientData","setEmployeeData","SetEmployeeData","setBranchData","SetBranchData","toggleClientStatus","request","ChangeClientStatus","toggleEmployeeStatus","ChangeEmployeeStatus","deleteBranch","DeleteBranch","deleteClient","DeleteClient","deleteEmployee","DeleteEmployee","clearEditingEntity","clearClient","clearProvider","clearEmployee","clearBranch"],"mappings":"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","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from 'api'\n\n// This action creator sends the type of action and the params (if any) to the dispatcher\nexport default {\n  getClientsList (params) {\n    // Gets the Employee List from the API, then triggers the change on the store if success\n    API.EditClient.GetClientsList(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'CLIENTS_LIST_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  getEmployeesList (params) {\n    // Gets the Employee List from the API, then triggers the change on the store if success\n    API.EditClient.GetEmployeesList(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'EMPLOYEES_LIST_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  getBranchesList (params) {\n    // Gets the Branches List from the API, then triggers the change on the store if success\n    API.EditClient.GetBranchesList(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'BRANCHES_LIST_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  getEntityData (id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetEntityData(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'ENTITY_DATA_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  getClientData (id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetClientData(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'CLIENT_DATA_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  getEmployeeData (id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetEmployeeData(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'EMPLOYEE_DATA_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  getBranchData (id) {\n    // Gets the Employee Data from the API, then triggers the change on the store if success\n    API.EditClient.GetBranchData(id)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'BRANCH_DATA_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n\n  createClient (data) {\n    // Send the Employee creation data to the API, then triggers the change on the store if success\n    return API.EditClient.CreateClient(data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'CLIENT_DATA_SAVED',\n          data: response\n        })\n\n        return response\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  createEmployee (data) {\n    // Send the Employee creation data to the API, then triggers the change on the store if success\n    return API.EditClient.CreateEmployee(data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'EMPLOYEE_DATA_SAVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  createBranch (data) {\n    // Send the Branch creation data to the API, then triggers the change on the store if success\n    return API.EditClient.CreateBranch(data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'BRANCH_DATA_SAVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  setEntityData (id, data) {\n    // Send the Employee Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetEntitytData(id, data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'ENTITY_DATA_SAVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  setClientData (id, data) {\n    // Send the Employee Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetClientData(id, data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'CLIENT_DATA_SAVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  setEmployeeData (id, data) {\n    // Send the Employee Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetEmployeeData(id, data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'EMPLOYEE_DATA_SAVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  setBranchData (id, data) {\n    // Send the Branch Data change to the API, then triggers the change on the store if success\n    return API.EditClient.SetBranchData(id, data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'BRANCH_DATA_SAVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  toggleClientStatus (id, request) {\n    // Send the Employee Status change to the API, then triggers the change on the store if success\n    return API.EditClient.ChangeClientStatus(id, request)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'CLIENT_STATUS_CHANGED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  toggleEmployeeStatus (id, request) {\n    // Send the Employee Status change to the API, then triggers the change on the store if success\n    return API.EditClient.ChangeEmployeeStatus(id, request)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'EMPLOYEE_STATUS_CHANGED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  },\n\n  deleteBranch (id) {\n    return API.EditClient.DeleteBranch(id)\n  },\n\n  deleteClient (id) {\n    return API.EditClient.DeleteClient(id)\n  },\n\n  deleteEmployee (id) {\n    return API.EditClient.DeleteEmployee(id)\n  },\n\n  clearEditingEntity () {\n    // Sets current Employee in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_EDITING_ENTITY'\n    })\n  },\n\n  clearClient () {\n    // Sets current Employee in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_CLIENT'\n    })\n  },\n  clearProvider () {\n    // Sets current Provider in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_PROVIDER'\n    })\n  },\n\n  clearEmployee () {\n    // Sets current Employee in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_EMPLOYEE'\n    })\n  },\n\n  clearBranch () {\n    // Sets current Branch in the store to a blank one\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_BRANCH'\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}