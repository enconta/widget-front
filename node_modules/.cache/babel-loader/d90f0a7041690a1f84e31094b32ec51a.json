{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport API from '../api';\nimport AppSignal from 'appsignal';\nvar sorting = {\n  sort_by: 'issue_date',\n  sort_direction: 'desc'\n}; // This action creator sends the type of action and the params (if any) to the dispatcher\n\nexport default {\n  getChartData: function getChartData() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      period: 'semester'\n    };\n    API.Dashboard.GetChartData(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'CHART_DATA_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getRecentIncomes: function getRecentIncomes() {\n    API.Invoice.List(Object.assign({}, sorting, {\n      invoice_type: 'incomes',\n      stamped: true\n    })).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'RECENT_INCOMES_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  },\n  getRecentExpenses: function getRecentExpenses() {\n    API.Invoice.List(Object.assign({}, sorting, {\n      invoice_type: 'expenses',\n      stamped: true\n    })).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'RECENT_EXPENSES_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(error);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/dashboard.js"],"names":["AppDispatcher","API","AppSignal","sorting","sort_by","sort_direction","getChartData","params","period","Dashboard","GetChartData","then","response","handleAction","actionType","data","catch","error","sendError","getRecentIncomes","Invoice","List","Object","assign","invoice_type","stamped","getRecentExpenses"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,eAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAE,YADK;AAEdC,EAAAA,cAAc,EAAE;AAFF,CAAhB,C,CAKA;;AACA,eAAe;AACbC,EAAAA,YADa,0BACkC;AAAA,QAAjCC,MAAiC,uEAAxB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAwB;AAC7CP,IAAAA,GAAG,CAACQ,SAAJ,CAAcC,YAAd,CAA2BH,MAA3B,EACGI,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBZ,MAAAA,aAAa,CAACa,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,qBADa;AAEzBC,QAAAA,IAAI,EAAEH;AAFmB,OAA3B;AAID,KANH,EAOGI,KAPH,CAOS,UAAAC,KAAK,EAAI;AACdf,MAAAA,SAAS,CAACgB,SAAV,CAAoBD,KAApB;AACD,KATH;AAUD,GAZY;AAabE,EAAAA,gBAba,8BAaO;AAClBlB,IAAAA,GAAG,CAACmB,OAAJ,CAAYC,IAAZ,CACEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpB,OAAlB,EAA2B;AAAEqB,MAAAA,YAAY,EAAE,SAAhB;AAA2BC,MAAAA,OAAO,EAAE;AAApC,KAA3B,CADF,EAGGd,IAHH,CAGQ,UAAAC,QAAQ,EAAI;AAChBZ,MAAAA,aAAa,CAACa,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,yBADa;AAEzBC,QAAAA,IAAI,EAAEH;AAFmB,OAA3B;AAID,KARH,EASGI,KATH,CASS,UAAAC,KAAK,EAAI;AACdf,MAAAA,SAAS,CAACgB,SAAV,CAAoBD,KAApB;AACD,KAXH;AAYD,GA1BY;AA2BbS,EAAAA,iBA3Ba,+BA2BQ;AACnBzB,IAAAA,GAAG,CAACmB,OAAJ,CAAYC,IAAZ,CACEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpB,OAAlB,EAA2B;AAAEqB,MAAAA,YAAY,EAAE,UAAhB;AAA4BC,MAAAA,OAAO,EAAE;AAArC,KAA3B,CADF,EAGGd,IAHH,CAGQ,UAAAC,QAAQ,EAAI;AAChBZ,MAAAA,aAAa,CAACa,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,0BADa;AAEzBC,QAAAA,IAAI,EAAEH;AAFmB,OAA3B;AAID,KARH,EASGI,KATH,CASS,UAAAC,KAAK,EAAI;AACdf,MAAAA,SAAS,CAACgB,SAAV,CAAoBD,KAApB;AACD,KAXH;AAYD;AAxCY,CAAf","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\nimport AppSignal from 'appsignal'\n\nconst sorting = {\n  sort_by: 'issue_date',\n  sort_direction: 'desc'\n}\n\n// This action creator sends the type of action and the params (if any) to the dispatcher\nexport default {\n  getChartData (params = { period: 'semester' }) {\n    API.Dashboard.GetChartData(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'CHART_DATA_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n  getRecentIncomes () {\n    API.Invoice.List(\n      Object.assign({}, sorting, { invoice_type: 'incomes', stamped: true })\n    )\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'RECENT_INCOMES_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  },\n  getRecentExpenses () {\n    API.Invoice.List(\n      Object.assign({}, sorting, { invoice_type: 'expenses', stamped: true })\n    )\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'RECENT_EXPENSES_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}