{"ast":null,"code":"import _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/synchronization/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport { withRouter } from 'react-router';\nimport Button from 'shared/button';\nimport TextField from 'shared/textField';\nimport SelectField from 'shared/selectField';\nimport { handleBack, validateAll, replaceUnderScore, handleURL, handleModals, encryptData } from 'utils';\nimport loading from 'shared/animations/1672-spinner.json';\nimport failed from 'shared/animations/alert.json';\nimport WaitAdvertisment from 'shared/waitAdvertisment';\nimport { addBank, getLogo, checkFeatureFlag, filterCatalog, getStatusStepper, renderExplainCredentialsModal, renderKeysModal, tryAgain, renderTokenExplain } from './utils';\nimport StepperSmartSync from 'shared/stepperSmartSync';\nimport BanksSynchronizationActions from 'actions/smartsync';\nimport NotificationsActions from 'actions/notifications';\nimport BanksSynchronizationStores from 'stores/smartsync';\nimport PaymentAccountsStore from 'stores/paymentAccounts';\nvar interval = 1000;\nvar requiredFields = new Set();\n\nfunction getCurrentState() {\n  return {\n    bank: BanksSynchronizationStores.getCurrent(),\n    paymentAccounts: PaymentAccountsStore.getPaymentAccounts(),\n    activeBankList: PaymentAccountsStore.getActiveBankList(),\n    widgetToken: BanksSynchronizationStores.getWidgetToken()\n  };\n}\n\nexport var NewBank =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewBank, _Component);\n\n  function NewBank() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewBank);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewBank)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.defaultState = {\n      requestInProgress: false,\n      failedToRegister: false,\n      isModalAccountExplainOpen: false,\n      isModalKeysOpen: false,\n      error: '',\n      bank: {\n        username: '',\n        institution: '',\n        password: '',\n        token: ''\n      }\n    };\n    _this.state = _objectSpread({}, _this.defaultState, getCurrentState());\n    _this.timer = null;\n\n    _this._onChange = function () {\n      _this.setState(getCurrentState());\n    };\n\n    _this.onEventCallbackFunction = function (data) {// Do something with the event data\n    };\n\n    _this.onExitCallbackFunction = function (data) {// Do something with the exit data\n    };\n\n    _this.successCallbackFunction = function (link, institution) {// Do something with the link_id or institution name\n    };\n\n    _this.openBelvoWidget = function () {\n      var widgetToken = _this.state.widgetToken;\n      belvoSDK // eslint-disable-line\n      .createWidget(widgetToken, {\n        locale: 'es',\n        company_name: 'Enconta',\n        // institution: 'bancomer_mx_retail', // to start the widget directly on a specific institution credentials page\n        // institution_types: ['fiscal', 'retail', 'business', 'gig'], // to select the type of institution to show in the widget\n        access_mode: 'recurrent',\n        // to specify the type of link to be created from the widget\n        country_codes: ['MX'],\n        callback: function callback(link, institution) {\n          return _this.successCallbackFunction(link, institution);\n        },\n        onExit: function onExit(data) {\n          return _this.onExitCallbackFunction(data);\n        },\n        onEvent: function onEvent(data) {\n          return _this.onEventCallbackFunction(data);\n        }\n      }).build();\n    };\n\n    return _this;\n  }\n\n  _createClass(NewBank, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // this.getToken()\n      BanksSynchronizationActions.getWidgetToken();\n      BanksSynchronizationStores.addChangeListener(this._onChange);\n      BanksSynchronizationActions.getBankList();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.openBelvoWidget());\n    }\n  }]);\n\n  return NewBank;\n}(Component);\nexport default withRouter(NewBank);","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/synchronization/index.js"],"names":["React","Component","Fragment","withRouter","Button","TextField","SelectField","handleBack","validateAll","replaceUnderScore","handleURL","handleModals","encryptData","loading","failed","WaitAdvertisment","addBank","getLogo","checkFeatureFlag","filterCatalog","getStatusStepper","renderExplainCredentialsModal","renderKeysModal","tryAgain","renderTokenExplain","StepperSmartSync","BanksSynchronizationActions","NotificationsActions","BanksSynchronizationStores","PaymentAccountsStore","interval","requiredFields","Set","getCurrentState","bank","getCurrent","paymentAccounts","getPaymentAccounts","activeBankList","getActiveBankList","widgetToken","getWidgetToken","NewBank","defaultState","requestInProgress","failedToRegister","isModalAccountExplainOpen","isModalKeysOpen","error","username","institution","password","token","state","timer","_onChange","setState","onEventCallbackFunction","data","onExitCallbackFunction","successCallbackFunction","link","openBelvoWidget","belvoSDK","createWidget","locale","company_name","access_mode","country_codes","callback","onExit","onEvent","build","addChangeListener","getBankList"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { withRouter } from 'react-router'\n\nimport Button from 'shared/button'\nimport TextField from 'shared/textField'\nimport SelectField from 'shared/selectField'\nimport {\n  handleBack,\n  validateAll,\n  replaceUnderScore,\n  handleURL,\n  handleModals,\n  encryptData\n} from 'utils'\nimport loading from 'shared/animations/1672-spinner.json'\nimport failed from 'shared/animations/alert.json'\nimport WaitAdvertisment from 'shared/waitAdvertisment'\nimport {\n  addBank,\n  getLogo,\n  checkFeatureFlag,\n  filterCatalog,\n  getStatusStepper,\n  renderExplainCredentialsModal,\n  renderKeysModal,\n  tryAgain,\n  renderTokenExplain\n} from './utils'\nimport StepperSmartSync from 'shared/stepperSmartSync'\n\nimport BanksSynchronizationActions from 'actions/smartsync'\nimport NotificationsActions from 'actions/notifications'\n\nimport BanksSynchronizationStores from 'stores/smartsync'\nimport PaymentAccountsStore from 'stores/paymentAccounts'\nconst interval = 1000\nconst requiredFields = new Set()\n\nfunction getCurrentState () {\n  return {\n    bank: BanksSynchronizationStores.getCurrent(),\n    paymentAccounts: PaymentAccountsStore.getPaymentAccounts(),\n    activeBankList: PaymentAccountsStore.getActiveBankList(),\n    widgetToken: BanksSynchronizationStores.getWidgetToken()\n  }\n}\n\nexport class NewBank extends Component {\n  defaultState = {\n    requestInProgress: false,\n    failedToRegister: false,\n    isModalAccountExplainOpen: false,\n    isModalKeysOpen: false,\n    error: '',\n    bank: {\n      username: '',\n      institution: '',\n      password: '',\n      token: ''\n    }\n  }\n\n  state = { ...this.defaultState, ...getCurrentState() }\n  timer = null\n\n  componentDidMount () {\n    // this.getToken()\n    BanksSynchronizationActions.getWidgetToken()\n    BanksSynchronizationStores.addChangeListener(this._onChange)\n    BanksSynchronizationActions.getBankList()\n  }\n\n  componentWillUnmount () {\n   \n  }\n\n  _onChange = () => {\n    this.setState(getCurrentState())\n  }\n\n  onEventCallbackFunction = data => {\n    // Do something with the event data\n  }\n\n  onExitCallbackFunction = data => {\n    // Do something with the exit data\n  }\n\n  successCallbackFunction = (link, institution) => {\n    // Do something with the link_id or institution name\n  }\n\n  openBelvoWidget = () => {\n    const { widgetToken } = this.state\n    belvoSDK // eslint-disable-line\n      .createWidget(widgetToken, {\n        locale: 'es',\n        company_name: 'Enconta',\n        // institution: 'bancomer_mx_retail', // to start the widget directly on a specific institution credentials page\n        // institution_types: ['fiscal', 'retail', 'business', 'gig'], // to select the type of institution to show in the widget\n        access_mode: 'recurrent', // to specify the type of link to be created from the widget\n        country_codes: ['MX'],\n        callback: (link, institution) =>\n          this.successCallbackFunction(link, institution),\n        onExit: data => this.onExitCallbackFunction(data),\n        onEvent: data => this.onEventCallbackFunction(data)\n      })\n      .build()\n  }\n\n  \n\n  render () {\n   \n    return (\n      <Fragment>\n        {this.openBelvoWidget()}\n      </Fragment>\n    )\n  }\n}\n\nexport default withRouter(NewBank)\n"]},"metadata":{},"sourceType":"module"}