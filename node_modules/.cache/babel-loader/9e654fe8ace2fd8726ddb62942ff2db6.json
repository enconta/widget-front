{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/rfc/editingForm/index.js\";\n// Libraries\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport update from 'immutability-helper';\nimport { browserHistory } from 'react-router';\nimport validator from 'validator'; // Components\n\nimport EditClientActions from 'actions/editClient';\nimport NotificationActions from 'actions/notifications';\nimport EditClientStore from 'stores/editClient';\nimport SelectFile from 'shared/selectFile';\nimport Button from 'shared/button';\nimport SatCredentials from 'shared/satCredentials'; // Set where all the required field refs are going to be\n// stored so we can validate them all when submit\n\nvar requiredFields = new Set();\n\nfunction getCurrentState() {\n  var entity = EditClientStore.getEditingEntity();\n  return {\n    entity: entity\n  };\n}\n\nvar EditClientRFC =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditClientRFC, _Component);\n\n  function EditClientRFC() {\n    var _this;\n\n    _classCallCheck(this, EditClientRFC);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditClientRFC).call(this));\n    _this.data = {\n      requestInProgress: false,\n      modalOpen: false,\n      clickedButton: '',\n      logo: {\n        data: '',\n        filename: '',\n        contentType: ''\n      },\n      certificate: {\n        data: '',\n        filename: '',\n        contentType: ''\n      },\n      key: {\n        data: '',\n        filename: '',\n        contentType: ''\n      }\n    };\n    _this.state = Object.assign({}, _this.data, getCurrentState());\n    _this._handleEscape = _this._handleEscape.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(EditClientRFC, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Adds listener, when the Store changes, trigger the _onChange callback func\n      EditClientStore.addChangeListener(this._onChange); // If we are supposed to be editing an entity, ask for entity data\n\n      if (typeof this.props.params.id !== 'undefined') {\n        EditClientActions.getEntityData(this.props.params.id);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Removes the listener to avoid memory leaks\n      EditClientStore.removeChangeListener(this._onChange); // Clears the stored requiredFields\n\n      requiredFields.clear();\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      // When the store changes, the state goes to it and pulls the updated data\n      // then sets it so the component rerenders\n      var state = getCurrentState();\n      this.setState(state);\n    } // Listen for key presses, close the dialog if escape is true\n\n  }, {\n    key: \"_handleEscape\",\n    value: function _handleEscape(key, b) {\n      if (key.keyCode === 27) {\n        window.removeEventListener('keydown', this._handleEscape, true);\n        this.setState({\n          modalOpen: false\n        });\n      }\n    } // Toggles SelectFile component open/closed\n\n  }, {\n    key: \"toggleFileDialog\",\n    value: function toggleFileDialog() {\n      if (!this.state.modalOpen) {\n        window.addEventListener('keydown', this._handleEscape, true);\n      }\n\n      this.setState({\n        modalOpen: !this.state.modalOpen\n      });\n    } // Validates if a doc is uploaded\n\n  }, {\n    key: \"isValidDocument\",\n    value: function isValidDocument(file) {\n      return !validator.isEmpty(this.state[file].data);\n    } // Sets logo data and filename on the state\n\n  }, {\n    key: \"setLogo\",\n    value: function setLogo(data, filename, contentType) {\n      this.setState({\n        logo: update(this.state.logo, {\n          data: {\n            $set: data\n          },\n          filename: {\n            $set: filename\n          },\n          contentType: {\n            $set: contentType\n          }\n        })\n      });\n    } // Sets certificate data and filename on the state\n\n  }, {\n    key: \"setCertificate\",\n    value: function setCertificate(data, filename, contentType) {\n      this.setState({\n        cetificate: update(this.state.certificate, {\n          data: {\n            $set: data\n          },\n          filename: {\n            $set: filename\n          },\n          contentType: {\n            $set: contentType\n          }\n        })\n      });\n      console.log('Cer: ', this.state.certificate);\n    } // Sets key data and filename on the state\n\n  }, {\n    key: \"setKey\",\n    value: function setKey(data, filename, contentType) {\n      this.setState({\n        key: update(this.state.key, {\n          data: {\n            $set: data\n          },\n          filename: {\n            $set: filename\n          },\n          contentType: {\n            $set: contentType\n          }\n        })\n      });\n      console.log('Key: ', this.state.key);\n    } // Sets which of the upload buttons was clicked and opens the SelectFile modal\n\n  }, {\n    key: \"selectFilefunction\",\n    value: function selectFilefunction(func) {\n      this.setState({\n        clickedButton: func\n      }, this.toggleFileDialog);\n    } // Iterates over required fields and validates every one of them\n    // Then it returns true if all validations succeedeed, else false.\n\n  }, {\n    key: \"validateAll\",\n    value: function validateAll() {\n      var _this2 = this;\n\n      return _toConsumableArray(requiredFields) // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(function (form) {\n        return form.validate.call(_this2);\n      }) // Calls the validate() method on each form\n      .every(function (e) {\n        return e;\n      }); // Checks if all validations suceeded\n    } // Clears the current Document and redirects to the documents listing\n\n  }, {\n    key: \"returnToListing\",\n    value: function returnToListing() {\n      this.setState({\n        requestInProgress: false\n      });\n      EditClientActions.clearEditingEntity();\n      browserHistory.push('/entidades');\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          entity = _this$state.entity,\n          logo = _this$state.logo,\n          requestInProgress = _this$state.requestInProgress;\n\n      if (this.isValidDocument('logo') && !requestInProgress) {\n        var data = {\n          taxable_entity: {\n            logo: {\n              attached_file: logo.data,\n              original_filename: logo.filename,\n              content_type: logo.contentType\n            }\n          }\n        };\n        this.setState({\n          requestInProgress: true\n        }, function () {\n          EditClientActions.setEntityData(entity.id, data).then(function () {\n            NotificationActions.success('La entidad ha sido editada correctamente');\n\n            _this3.returnToListing();\n          }).catch(function (e) {\n            NotificationActions.error(e);\n\n            _this3.setState({\n              requestInProgress: false\n            });\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          clickedButton = _this$state2.clickedButton,\n          modalOpen = _this$state2.modalOpen,\n          entity = _this$state2.entity,\n          logo = _this$state2.logo; // Depending on the button clicked, passes a different callback function to the SelectFile modal\n\n      var setFileFunc = function setFileFunc() {};\n\n      switch (clickedButton) {\n        case 'logo':\n          setFileFunc = this.setLogo;\n          break;\n\n        case 'cer':\n          setFileFunc = this.setCertificate;\n          break;\n\n        case 'key':\n          setFileFunc = this.setKey;\n          break;\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Button, {\n        buttonStyle: \"link\",\n        icon: \"chevron-double-left\",\n        onClick: this.returnToListing.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Volver\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"subheader-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Editar Entidad Fiscal\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title is-marginless\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, entity.legalName), React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"RFC: \", entity.rfc), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          width: '100px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: entity.logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      })), React.createElement(Button, {\n        icon: \"upload\",\n        onClick: this.selectFilefunction.bind(this, 'logo'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Subir Archivo\"), React.createElement(Button, {\n        buttonStyle: \"primary\",\n        icon: \"content-save\",\n        onClick: this.sendData.bind(this),\n        disabled: !logo.data,\n        loading: this.state.requestInProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Guardar cambios\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        className: \"subheader-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"Direcci\\xF3n\"), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"textarea\",\n        disabled: true,\n        value: entity.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      })))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }), React.createElement(SatCredentials, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(SelectFile, {\n        isActive: modalOpen,\n        toggleModal: this.toggleFileDialog.bind(this),\n        title: \"Subir Archivo\",\n        fileTypePlaceholder: clickedButton,\n        accept: clickedButton === 'cer' || clickedButton === 'key' ? \".\".concat(clickedButton) : 'image/*',\n        setFile: setFileFunc.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditClientRFC;\n}(Component);\n\nEditClientRFC.propTypes = {\n  params: PropTypes.shape({\n    id: PropTypes.string\n  })\n};\nexport default EditClientRFC;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/rfc/editingForm/index.js"],"names":["React","Component","PropTypes","update","browserHistory","validator","EditClientActions","NotificationActions","EditClientStore","SelectFile","Button","SatCredentials","requiredFields","Set","getCurrentState","entity","getEditingEntity","EditClientRFC","data","requestInProgress","modalOpen","clickedButton","logo","filename","contentType","certificate","key","state","Object","assign","_handleEscape","bind","_onChange","addChangeListener","props","params","id","getEntityData","removeChangeListener","clear","setState","b","keyCode","window","removeEventListener","addEventListener","file","isEmpty","$set","cetificate","console","log","func","toggleFileDialog","filter","Boolean","map","form","validate","call","every","e","clearEditingEntity","push","isValidDocument","taxable_entity","attached_file","original_filename","content_type","setEntityData","then","success","returnToListing","catch","error","setFileFunc","setLogo","setCertificate","setKey","legalName","rfc","width","selectFilefunction","sendData","address","propTypes","shape","string"],"mappings":"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","sourcesContent":["// Libraries\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport update from 'immutability-helper'\nimport { browserHistory } from 'react-router'\nimport validator from 'validator'\n\n// Components\nimport EditClientActions from 'actions/editClient'\nimport NotificationActions from 'actions/notifications'\nimport EditClientStore from 'stores/editClient'\nimport SelectFile from 'shared/selectFile'\nimport Button from 'shared/button'\n\nimport SatCredentials from 'shared/satCredentials'\n\n// Set where all the required field refs are going to be\n// stored so we can validate them all when submit\nconst requiredFields = new Set()\n\nfunction getCurrentState () {\n  let entity = EditClientStore.getEditingEntity()\n  return { entity }\n}\n\nclass EditClientRFC extends Component {\n  constructor () {\n    super()\n    this.data = {\n      requestInProgress: false,\n      modalOpen: false,\n      clickedButton: '',\n      logo: {\n        data: '',\n        filename: '',\n        contentType: ''\n      },\n      certificate: {\n        data: '',\n        filename: '',\n        contentType: ''\n      },\n      key: {\n        data: '',\n        filename: '',\n        contentType: ''\n      }\n    }\n    this.state = Object.assign({}, this.data, getCurrentState())\n    this._handleEscape = this._handleEscape.bind(this)\n    this._onChange = this._onChange.bind(this)\n  }\n\n  componentDidMount () {\n    // Adds listener, when the Store changes, trigger the _onChange callback func\n    EditClientStore.addChangeListener(this._onChange)\n    // If we are supposed to be editing an entity, ask for entity data\n    if (typeof this.props.params.id !== 'undefined') {\n      EditClientActions.getEntityData(this.props.params.id)\n    }\n  }\n\n  componentWillUnmount () {\n    // Removes the listener to avoid memory leaks\n    EditClientStore.removeChangeListener(this._onChange)\n    // Clears the stored requiredFields\n    requiredFields.clear()\n  }\n\n  _onChange () {\n    // When the store changes, the state goes to it and pulls the updated data\n    // then sets it so the component rerenders\n    let state = getCurrentState()\n    this.setState(state)\n  }\n\n  // Listen for key presses, close the dialog if escape is true\n  _handleEscape (key, b) {\n    if (key.keyCode === 27) {\n      window.removeEventListener('keydown', this._handleEscape, true)\n      this.setState({ modalOpen: false })\n    }\n  }\n\n  // Toggles SelectFile component open/closed\n  toggleFileDialog () {\n    if (!this.state.modalOpen) {\n      window.addEventListener('keydown', this._handleEscape, true)\n    }\n    this.setState({ modalOpen: !this.state.modalOpen })\n  }\n\n  // Validates if a doc is uploaded\n  isValidDocument (file) {\n    return !validator.isEmpty(this.state[file].data)\n  }\n\n  // Sets logo data and filename on the state\n  setLogo (data, filename, contentType) {\n    this.setState({\n      logo: update(this.state.logo, {\n        data: { $set: data },\n        filename: { $set: filename },\n        contentType: { $set: contentType }\n      })\n    })\n  }\n\n  // Sets certificate data and filename on the state\n  setCertificate (data, filename, contentType) {\n    this.setState({\n      cetificate: update(this.state.certificate, {\n        data: { $set: data },\n        filename: { $set: filename },\n        contentType: { $set: contentType }\n      })\n    })\n    console.log('Cer: ', this.state.certificate)\n  }\n\n  // Sets key data and filename on the state\n  setKey (data, filename, contentType) {\n    this.setState({\n      key: update(this.state.key, {\n        data: { $set: data },\n        filename: { $set: filename },\n        contentType: { $set: contentType }\n      })\n    })\n    console.log('Key: ', this.state.key)\n  }\n\n  // Sets which of the upload buttons was clicked and opens the SelectFile modal\n  selectFilefunction (func) {\n    this.setState({ clickedButton: func }, this.toggleFileDialog)\n  }\n\n  // Iterates over required fields and validates every one of them\n  // Then it returns true if all validations succeedeed, else false.\n  validateAll () {\n    return [...requiredFields] // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(form => form.validate.call(this)) // Calls the validate() method on each form\n      .every(e => e) // Checks if all validations suceeded\n  }\n\n  // Clears the current Document and redirects to the documents listing\n  returnToListing () {\n    this.setState({ requestInProgress: false })\n    EditClientActions.clearEditingEntity()\n    browserHistory.push('/entidades')\n  }\n\n  sendData () {\n    let { entity, logo, requestInProgress } = this.state\n    if (this.isValidDocument('logo') && !requestInProgress) {\n      let data = {\n        taxable_entity: {\n          logo: {\n            attached_file: logo.data,\n            original_filename: logo.filename,\n            content_type: logo.contentType\n          }\n        }\n      }\n      this.setState({ requestInProgress: true }, () => {\n        EditClientActions.setEntityData(entity.id, data)\n          .then(() => {\n            NotificationActions.success(\n              'La entidad ha sido editada correctamente'\n            )\n            this.returnToListing()\n          })\n          .catch(e => {\n            NotificationActions.error(e)\n            this.setState({ requestInProgress: false })\n          })\n      })\n    }\n  }\n\n  render () {\n    let { clickedButton, modalOpen, entity, logo } = this.state\n    // Depending on the button clicked, passes a different callback function to the SelectFile modal\n    let setFileFunc = () => {}\n    switch (clickedButton) {\n      case 'logo':\n        setFileFunc = this.setLogo\n        break\n      case 'cer':\n        setFileFunc = this.setCertificate\n        break\n      case 'key':\n        setFileFunc = this.setKey\n        break\n    }\n\n    return (\n      <div>\n        <Button\n          buttonStyle='link'\n          icon='chevron-double-left'\n          onClick={this.returnToListing.bind(this)}\n        >\n          Volver\n        </Button>\n        <br />\n        <br />\n        <h1 className='subheader-green'>Editar Entidad Fiscal</h1>\n        <div>\n          <div className='title is-marginless'>{entity.legalName}</div>\n          <div className='body'>RFC: {entity.rfc}</div>\n          <br />\n          <div style={{ width: '100px' }}>\n            <img src={entity.logo} />\n          </div>\n          <Button\n            icon='upload'\n            onClick={this.selectFilefunction.bind(this, 'logo')}\n          >\n            Subir Archivo\n          </Button>\n          <Button\n            buttonStyle='primary'\n            icon='content-save'\n            onClick={this.sendData.bind(this)}\n            disabled={!logo.data}\n            loading={this.state.requestInProgress}\n          >\n            Guardar cambios\n          </Button>\n          <br />\n          <br />\n          <h5 className='subheader-green'>Dirección</h5>\n          <div className='columns'>\n            <div className='column'>\n              <textarea className='textarea' disabled value={entity.address} />\n            </div>\n          </div>\n        </div>\n        <br />\n        <SatCredentials />\n        <SelectFile\n          isActive={modalOpen}\n          toggleModal={this.toggleFileDialog.bind(this)}\n          title='Subir Archivo'\n          fileTypePlaceholder={clickedButton}\n          accept={\n            clickedButton === 'cer' || clickedButton === 'key'\n              ? `.${clickedButton}`\n              : 'image/*'\n          }\n          setFile={setFileFunc.bind(this)}\n        />\n      </div>\n    )\n  }\n}\n\nEditClientRFC.propTypes = {\n  params: PropTypes.shape({\n    id: PropTypes.string\n  })\n}\nexport default EditClientRFC\n"]},"metadata":{},"sourceType":"module"}