{"ast":null,"code":"import AppDispatcher from '../dispatcher';\nimport API from '../api';\nimport AppSignal from 'appsignal'; // This action creator sends the type of action and the params (if any) to the dispatcher\n\nexport default {\n  getAccoutingPeriods: function getAccoutingPeriods(params) {\n    // Request the accounting periods list to the API, then triggers the change on the store if success\n    return API.AccountingPeriods.GetAccoutingPeriods(params).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'ACCOUNTING_PERIODS_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n    });\n  },\n  createBankStatement: function createBankStatement(periodId, data) {\n    return API.AccountingPeriods.CreateBankStatement(periodId, data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'BANK_STATEMENT_CREATED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  },\n  updateAssigment: function updateAssigment(assignmentId) {\n    return API.AccountingPeriods.UpdateAssigment(assignmentId).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'ASSIGMENT_UPDATED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/accountingPeriods.js"],"names":["AppDispatcher","API","AppSignal","getAccoutingPeriods","params","AccountingPeriods","GetAccoutingPeriods","then","response","handleAction","actionType","data","catch","error","sendError","Error","createBankStatement","periodId","CreateBankStatement","updateAssigment","assignmentId","UpdateAssigment"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,eAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAEA;;AACA,eAAe;AACbC,EAAAA,mBADa,+BACQC,MADR,EACgB;AAC3B;AACA,WAAOH,GAAG,CAACI,iBAAJ,CAAsBC,mBAAtB,CAA0CF,MAA1C,EACJG,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBR,MAAAA,aAAa,CAACS,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,6BADa;AAEzBC,QAAAA,IAAI,EAAEH;AAFmB,OAA3B;AAID,KANI,EAOJI,KAPI,CAOE,UAAAC,KAAK,EAAI;AACdX,MAAAA,SAAS,CAACY,SAAV,CAAoB,IAAIC,KAAJ,CAAUF,KAAV,CAApB;AACD,KATI,CAAP;AAUD,GAbY;AAebG,EAAAA,mBAfa,+BAeQC,QAfR,EAekBN,IAflB,EAewB;AACnC,WAAOV,GAAG,CAACI,iBAAJ,CAAsBa,mBAAtB,CAA0CD,QAA1C,EAAoDN,IAApD,EACJJ,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBR,MAAAA,aAAa,CAACS,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,wBADa;AAEzBC,QAAAA,IAAI,EAAEH;AAFmB,OAA3B;AAID,KANI,EAOJI,KAPI,CAOE,UAAAC,KAAK,EAAI;AACdX,MAAAA,SAAS,CAACY,SAAV,CAAoB,IAAIC,KAAJ,CAAUF,KAAV,CAApB;AACA,YAAMA,KAAN;AACD,KAVI,CAAP;AAWD,GA3BY;AA6BbM,EAAAA,eA7Ba,2BA6BIC,YA7BJ,EA6BkB;AAC7B,WAAOnB,GAAG,CAACI,iBAAJ,CAAsBgB,eAAtB,CAAsCD,YAAtC,EACJb,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBR,MAAAA,aAAa,CAACS,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,mBADa;AAEzBC,QAAAA,IAAI,EAAEH;AAFmB,OAA3B;AAID,KANI,EAOJI,KAPI,CAOE,UAAAC,KAAK,EAAI;AACdX,MAAAA,SAAS,CAACY,SAAV,CAAoB,IAAIC,KAAJ,CAAUF,KAAV,CAApB;AACD,KATI,CAAP;AAUD;AAxCY,CAAf","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\nimport AppSignal from 'appsignal'\n\n// This action creator sends the type of action and the params (if any) to the dispatcher\nexport default {\n  getAccoutingPeriods (params) {\n    // Request the accounting periods list to the API, then triggers the change on the store if success\n    return API.AccountingPeriods.GetAccoutingPeriods(params)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'ACCOUNTING_PERIODS_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n      })\n  },\n\n  createBankStatement (periodId, data) {\n    return API.AccountingPeriods.CreateBankStatement(periodId, data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'BANK_STATEMENT_CREATED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  },\n\n  updateAssigment (assignmentId) {\n    return API.AccountingPeriods.UpdateAssigment(assignmentId)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'ASSIGMENT_UPDATED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}