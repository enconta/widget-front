{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport moment from 'moment';\nimport BaseStore from './baseStore';\n\nvar EmployeesStore =\n/*#__PURE__*/\nfunction (_BaseStore) {\n  _inherits(EmployeesStore, _BaseStore);\n\n  function EmployeesStore() {\n    var _this;\n\n    _classCallCheck(this, EmployeesStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EmployeesStore).call(this)); // Current Employee defaults\n\n    _this.currentEmployee = {\n      employeeFullName: '',\n      employeeEmployeeNumber: '',\n      employeeRfc: '',\n      employeeCurp: '',\n      employeeSsn: '',\n      employeeDepartment: '',\n      employeePosition: '',\n      employeeEmail: '',\n      employeeHiringDate: moment().format('YYYY-MM-DD'),\n      employeePaymentInterval: '',\n      employeeTaxClassification: '',\n      employeeContractType: '',\n      employeeWorkdayType: '',\n      employeeRiskCategory: '',\n      employeePayrollType: '',\n      employeeResourceSource: '',\n      employeeBaseSalary: '',\n      employeeDailyWage: '',\n      employeeClabe: '',\n      employeeBankCode: '',\n      employeeCountry: '',\n      employeeState: ''\n    };\n    _this.employeesList = [];\n    _this.totalPages = 1;\n    _this.currentPage = 1;\n    _this.actions = {\n      EMPLOYEES_LIST_RECEIVED: function EMPLOYEES_LIST_RECEIVED(action) {\n        _this.setEmployeesList(action.data);\n      },\n      EMPLOYEE_DATA_RECEIVED: function EMPLOYEE_DATA_RECEIVED(action) {\n        _this.setCurrentEmployee(action.data);\n      },\n      EMPLOYEE_DATA_SAVED: function EMPLOYEE_DATA_SAVED(action) {\n        _this.setCurrentEmployee(action.data);\n      },\n      EMPLOYEE_STATUS_CHANGED: function EMPLOYEE_STATUS_CHANGED(action) {\n        _this.updateEmployeeList(action.data);\n      },\n      CLEAR_CURRENT_EMPLOYEE: function CLEAR_CURRENT_EMPLOYEE() {\n        _this.clearCurrentEmployee();\n      }\n    };\n    return _this;\n  } // Pagination: Get total pages\n\n\n  _createClass(EmployeesStore, [{\n    key: \"getTotalPages\",\n    value: function getTotalPages() {\n      return this.totalPages;\n    } // Pagination: Get total items\n\n  }, {\n    key: \"getTotalItems\",\n    value: function getTotalItems() {\n      return this.totalItems;\n    } // Pagination: Get current page\n\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      return this.currentPage;\n    } // Returns stored Employee, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getCurrentEmployee\",\n    value: function getCurrentEmployee() {\n      return this.currentEmployee;\n    } // Returns stored Employees List, this is used when explicitly you want to know it\n\n  }, {\n    key: \"getEmployeesList\",\n    value: function getEmployeesList() {\n      return this.employeesList;\n    } // Iterates over the data received from the API and sets an array with the needed data for the Employees List\n\n  }, {\n    key: \"setEmployeesList\",\n    value: function setEmployeesList(data) {\n      this.employeesList = data ? data.employees.map(function (employee) {\n        return {\n          id: employee.id,\n          name: employee.full_name,\n          rfc: employee.rfc,\n          email: employee.email,\n          deactivated: employee.deactivated,\n          curp: employee.curp\n        };\n      }) : this.employeesList;\n      this.totalPages = data.pagination.total_pages;\n      this.totalItems = data.pagination.total_items;\n      this.currentPage = data.pagination.current_page;\n    }\n  }, {\n    key: \"updateEmployeeList\",\n    value: function updateEmployeeList(data) {\n      var employeesList = this.employeesList;\n      employeesList.map(function (employee) {\n        if (employee.id === data.employee.id) {\n          employee.deactivated = data.employee.deactivated;\n        }\n      });\n      this.employeesList = employeesList;\n    } // If data is received from server, stores it as currentEmployee, otherwise stores the defaults\n\n  }, {\n    key: \"setCurrentEmployee\",\n    value: function setCurrentEmployee(data) {\n      if (data) {\n        this.currentEmployee = {\n          employeeFullName: data.employee.full_name,\n          employeeEmployeeNumber: data.employee.employee_number,\n          employeeRfc: data.employee.rfc,\n          employeeCurp: data.employee.curp,\n          employeeSsn: data.employee.social_security_number,\n          employeeDepartment: data.employee.department,\n          employeePosition: data.employee.position,\n          employeeEmail: data.employee.email || '',\n          employeeHiringDate: data.employee.hiring_date,\n          employeePaymentInterval: data.employee.payment_interval,\n          employeeTaxClassification: data.employee.tax_classification,\n          employeeContractType: data.employee.contract_type,\n          employeeWorkdayType: data.employee.work_day_type,\n          employeeRiskCategory: data.employee.risk_category,\n          employeePayrollType: data.employee.payroll_type,\n          employeeResourceSource: data.employee.resource_source,\n          employeeBaseSalary: data.employee.base_salary || '',\n          employeeDailyWage: data.employee.daily_wage || '',\n          employeeClabe: data.employee.clabe || '',\n          employeeBankCode: data.employee.bank_code,\n          employeeCountry: data.employee.country,\n          employeeState: data.employee.state\n        };\n      }\n    }\n  }, {\n    key: \"clearCurrentEmployee\",\n    value: function clearCurrentEmployee() {\n      this.currentEmployee = {\n        employeeFullName: '',\n        employeeEmployeeNumber: '',\n        employeeRfc: '',\n        employeeCurp: '',\n        employeeSsn: '',\n        employeeDepartment: '',\n        employeePosition: '',\n        employeeEmail: '',\n        employeeAdressCountry: '',\n        employeeAdressState: '',\n        employeeHiringDate: moment().format('YYYY-MM-DD'),\n        employeePaymentInterval: '',\n        employeeTaxClassification: '',\n        employeeContractType: '',\n        employeeWorkdayType: '',\n        employeeRiskCategory: '',\n        employeePayrollType: '',\n        employeeResourceSource: '',\n        employeeBaseSalary: '',\n        employeeDailyWage: '',\n        employeeClabe: '',\n        employeeBankCode: '',\n        employeeCountry: '',\n        employeeState: ''\n      };\n    }\n  }]);\n\n  return EmployeesStore;\n}(BaseStore);\n\nexport default EmployeesStore.getInstance();","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/stores/employees.js"],"names":["moment","BaseStore","EmployeesStore","currentEmployee","employeeFullName","employeeEmployeeNumber","employeeRfc","employeeCurp","employeeSsn","employeeDepartment","employeePosition","employeeEmail","employeeHiringDate","format","employeePaymentInterval","employeeTaxClassification","employeeContractType","employeeWorkdayType","employeeRiskCategory","employeePayrollType","employeeResourceSource","employeeBaseSalary","employeeDailyWage","employeeClabe","employeeBankCode","employeeCountry","employeeState","employeesList","totalPages","currentPage","actions","EMPLOYEES_LIST_RECEIVED","action","setEmployeesList","data","EMPLOYEE_DATA_RECEIVED","setCurrentEmployee","EMPLOYEE_DATA_SAVED","EMPLOYEE_STATUS_CHANGED","updateEmployeeList","CLEAR_CURRENT_EMPLOYEE","clearCurrentEmployee","totalItems","employees","map","employee","id","name","full_name","rfc","email","deactivated","curp","pagination","total_pages","total_items","current_page","employee_number","social_security_number","department","position","hiring_date","payment_interval","tax_classification","contract_type","work_day_type","risk_category","payroll_type","resource_source","base_salary","daily_wage","clabe","bank_code","country","state","employeeAdressCountry","employeeAdressState","getInstance"],"mappings":"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","sourcesContent":["import moment from 'moment'\n\nimport BaseStore from './baseStore'\n\nclass EmployeesStore extends BaseStore {\n  constructor () {\n    super()\n    // Current Employee defaults\n    this.currentEmployee = {\n      employeeFullName: '',\n      employeeEmployeeNumber: '',\n      employeeRfc: '',\n      employeeCurp: '',\n      employeeSsn: '',\n      employeeDepartment: '',\n      employeePosition: '',\n      employeeEmail: '',\n      employeeHiringDate: moment().format('YYYY-MM-DD'),\n      employeePaymentInterval: '',\n      employeeTaxClassification: '',\n      employeeContractType: '',\n      employeeWorkdayType: '',\n      employeeRiskCategory: '',\n      employeePayrollType: '',\n      employeeResourceSource: '',\n      employeeBaseSalary: '',\n      employeeDailyWage: '',\n      employeeClabe: '',\n      employeeBankCode: '',\n      employeeCountry: '',\n      employeeState: ''\n    }\n    this.employeesList = []\n    this.totalPages = 1\n    this.currentPage = 1\n    this.actions = {\n      EMPLOYEES_LIST_RECEIVED: action => {\n        this.setEmployeesList(action.data)\n      },\n      EMPLOYEE_DATA_RECEIVED: action => {\n        this.setCurrentEmployee(action.data)\n      },\n      EMPLOYEE_DATA_SAVED: action => {\n        this.setCurrentEmployee(action.data)\n      },\n      EMPLOYEE_STATUS_CHANGED: action => {\n        this.updateEmployeeList(action.data)\n      },\n      CLEAR_CURRENT_EMPLOYEE: () => {\n        this.clearCurrentEmployee()\n      }\n    }\n  }\n\n  // Pagination: Get total pages\n  getTotalPages () {\n    return this.totalPages\n  }\n  // Pagination: Get total items\n  getTotalItems () {\n    return this.totalItems\n  }\n  // Pagination: Get current page\n  getCurrentPage () {\n    return this.currentPage\n  }\n  // Returns stored Employee, this is used when explicitly you want to know it\n  getCurrentEmployee () {\n    return this.currentEmployee\n  }\n  // Returns stored Employees List, this is used when explicitly you want to know it\n  getEmployeesList () {\n    return this.employeesList\n  }\n  // Iterates over the data received from the API and sets an array with the needed data for the Employees List\n  setEmployeesList (data) {\n    this.employeesList = data\n      ? data.employees.map(employee => {\n        return {\n          id: employee.id,\n          name: employee.full_name,\n          rfc: employee.rfc,\n          email: employee.email,\n          deactivated: employee.deactivated,\n          curp: employee.curp\n        }\n      })\n      : this.employeesList\n    this.totalPages = data.pagination.total_pages\n    this.totalItems = data.pagination.total_items\n    this.currentPage = data.pagination.current_page\n  }\n\n  updateEmployeeList (data) {\n    let employeesList = this.employeesList\n    employeesList.map(employee => {\n      if (employee.id === data.employee.id) {\n        employee.deactivated = data.employee.deactivated\n      }\n    })\n    this.employeesList = employeesList\n  }\n\n  // If data is received from server, stores it as currentEmployee, otherwise stores the defaults\n  setCurrentEmployee (data) {\n    if (data) {\n      this.currentEmployee = {\n        employeeFullName: data.employee.full_name,\n        employeeEmployeeNumber: data.employee.employee_number,\n        employeeRfc: data.employee.rfc,\n        employeeCurp: data.employee.curp,\n        employeeSsn: data.employee.social_security_number,\n        employeeDepartment: data.employee.department,\n        employeePosition: data.employee.position,\n        employeeEmail: data.employee.email || '',\n        employeeHiringDate: data.employee.hiring_date,\n        employeePaymentInterval: data.employee.payment_interval,\n        employeeTaxClassification: data.employee.tax_classification,\n        employeeContractType: data.employee.contract_type,\n        employeeWorkdayType: data.employee.work_day_type,\n        employeeRiskCategory: data.employee.risk_category,\n        employeePayrollType: data.employee.payroll_type,\n        employeeResourceSource: data.employee.resource_source,\n        employeeBaseSalary: data.employee.base_salary || '',\n        employeeDailyWage: data.employee.daily_wage || '',\n        employeeClabe: data.employee.clabe || '',\n        employeeBankCode: data.employee.bank_code,\n        employeeCountry: data.employee.country,\n        employeeState: data.employee.state\n      }\n    }\n  }\n  clearCurrentEmployee () {\n    this.currentEmployee = {\n      employeeFullName: '',\n      employeeEmployeeNumber: '',\n      employeeRfc: '',\n      employeeCurp: '',\n      employeeSsn: '',\n      employeeDepartment: '',\n      employeePosition: '',\n      employeeEmail: '',\n      employeeAdressCountry: '',\n      employeeAdressState: '',\n      employeeHiringDate: moment().format('YYYY-MM-DD'),\n      employeePaymentInterval: '',\n      employeeTaxClassification: '',\n      employeeContractType: '',\n      employeeWorkdayType: '',\n      employeeRiskCategory: '',\n      employeePayrollType: '',\n      employeeResourceSource: '',\n      employeeBaseSalary: '',\n      employeeDailyWage: '',\n      employeeClabe: '',\n      employeeBankCode: '',\n      employeeCountry: '',\n      employeeState: ''\n    }\n  }\n}\n\nexport default EmployeesStore.getInstance()\n"]},"metadata":{},"sourceType":"module"}