{"ast":null,"code":"import _defineProperty from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/branches/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router';\nimport Paginator from 'shared/paginator';\nimport BranchesStore from 'stores/branches';\nimport EditClientActions from 'actions/editClient';\nimport TextField from 'shared/textField';\nimport TableFilter from 'shared/tableFilter';\nimport IconButton from 'shared/iconButton';\nimport accounting from 'accounting';\n\nfunction getCurrentState() {\n  var branches = BranchesStore.getBranchesList();\n  var totalPages = BranchesStore.getTotalPages();\n  var totalItems = BranchesStore.getTotalItems();\n  return {\n    branches: branches,\n    totalItems: totalItems,\n    totalPages: totalPages\n  };\n}\n\nvar BranchesTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BranchesTable, _Component);\n\n  function BranchesTable() {\n    var _this;\n\n    _classCallCheck(this, BranchesTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BranchesTable).call(this));\n    _this.data = {\n      filters: {\n        description: ''\n      }\n    };\n    _this.state = Object.assign({}, _this.data, getCurrentState());\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(BranchesTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Adds listener, when the Store changes, trigger the _onChange callback func\n      BranchesStore.addChangeListener(this._onChange);\n      this.loadData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.location.search !== prevProps.location.search) {\n        this.loadData(this.props);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Removes the listener to avoid memory leaks\n      BranchesStore.removeChangeListener(this._onChange);\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      // When the store changes, the state goes to it and pulls the updated data\n      // then sets it so the component rerenders\n      var state = getCurrentState();\n      this.setState(state);\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var params = Object.assign({}, props.location.query);\n      EditClientActions.getBranchesList(params);\n      this.setState(function (prevState) {\n        return {\n          filters: Object.assign({}, prevState.filters, params)\n        };\n      });\n    }\n  }, {\n    key: \"onChangeFilter\",\n    value: function onChangeFilter(field, e) {\n      var filter = _defineProperty({}, field, e.target.value);\n\n      this.setState(function (prevState) {\n        return {\n          filters: Object.assign({}, prevState.filters, filter)\n        };\n      });\n    } // Reset all filters and data to default\n\n  }, {\n    key: \"clearFilters\",\n    value: function clearFilters() {\n      this.setState({\n        filters: this.data.filters\n      });\n    } // Render a wrapper for the filters element\n\n  }, {\n    key: \"renderFilters\",\n    value: function renderFilters() {\n      var filters = this.state.filters;\n      return React.createElement(TableFilter, {\n        baseUrl: \"/sucursales\",\n        filters: filters,\n        onClearFilters: this.clearFilters.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        placeholder: \"Nombre\",\n        value: this.state.filters.description,\n        onChange: this.onChangeFilter.bind(this, 'description'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    } // Renders each employee and adds them as a row in the table\n\n  }, {\n    key: \"renderTableBody\",\n    value: function renderTableBody() {\n      var rows = this.state.branches.map(function (branch, index) {\n        var postalCode = branch.postal_code ? \"C.P. \".concat(branch.postal_code) : '';\n        return React.createElement(\"tr\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          className: \"align-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, branch.name), React.createElement(\"td\", {\n          className: \"align-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, postalCode), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/sucursal/\".concat(branch.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          icon: \"pencil\",\n          tooltip: \"Editar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }))));\n      });\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, rows);\n    }\n  }, {\n    key: \"renderTable\",\n    value: function renderTable() {\n      var table = React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"block unselectable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"No hay sucursales\")));\n\n      if (this.state.branches.length > 0) {\n        table = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"table\", {\n          className: \"table\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(\"thead\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          className: \"align-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"Nombre\"), React.createElement(\"th\", {\n          className: \"align-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, \"C\\xF3digo Postal\"), React.createElement(\"th\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }))), this.renderTableBody()), React.createElement(Paginator, {\n          totalPages: this.state.totalPages,\n          location: this.props.location,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }));\n      }\n\n      return table;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, this.renderFilters(), React.createElement(\"div\", {\n        className: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, accounting.formatNumber(this.state.totalItems), \" elementos visibles\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), this.renderTable());\n    }\n  }]);\n\n  return BranchesTable;\n}(Component);\n\nBranchesTable.propTypes = {\n  location: PropTypes.object\n};\nexport default BranchesTable;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editClient/branches/index.js"],"names":["React","Component","PropTypes","Link","Paginator","BranchesStore","EditClientActions","TextField","TableFilter","IconButton","accounting","getCurrentState","branches","getBranchesList","totalPages","getTotalPages","totalItems","getTotalItems","BranchesTable","data","filters","description","state","Object","assign","_onChange","bind","addChangeListener","loadData","prevProps","props","location","search","removeChangeListener","setState","params","query","prevState","field","e","filter","target","value","clearFilters","onChangeFilter","rows","map","branch","index","postalCode","postal_code","name","id","table","length","renderTableBody","renderFilters","formatNumber","renderTable","propTypes","object"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,SAASC,eAAT,GAA4B;AAC1B,MAAMC,QAAQ,GAAGP,aAAa,CAACQ,eAAd,EAAjB;AACA,MAAMC,UAAU,GAAGT,aAAa,CAACU,aAAd,EAAnB;AACA,MAAMC,UAAU,GAAGX,aAAa,CAACY,aAAd,EAAnB;AACA,SAAO;AACLL,IAAAA,QAAQ,EAARA,QADK;AAELI,IAAAA,UAAU,EAAVA,UAFK;AAGLF,IAAAA,UAAU,EAAVA;AAHK,GAAP;AAKD;;IAEKI,a;;;;;AACJ,2BAAe;AAAA;;AAAA;;AACb;AACA,UAAKC,IAAL,GAAY;AACVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,WAAW,EAAE;AADN;AADC,KAAZ;AAKA,UAAKC,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,MAAKL,IAAvB,EAA6BR,eAAe,EAA5C,CAAb;AACA,UAAKc,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AARa;AASd;;;;wCAEoB;AACnB;AACArB,MAAAA,aAAa,CAACsB,iBAAd,CAAgC,KAAKF,SAArC;AACA,WAAKG,QAAL;AACD;;;uCAEmBC,S,EAAW;AAC7B,UAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,KAA+BH,SAAS,CAACE,QAAV,CAAmBC,MAAtD,EAA8D;AAC5D,aAAKJ,QAAL,CAAc,KAAKE,KAAnB;AACD;AACF;;;2CAEuB;AACtB;AACAzB,MAAAA,aAAa,CAAC4B,oBAAd,CAAmC,KAAKR,SAAxC;AACD;;;gCAEY;AACX;AACA;AACA,UAAMH,KAAK,GAAGX,eAAe,EAA7B;AACA,WAAKuB,QAAL,CAAcZ,KAAd;AACD;;;+BAE6B;AAAA,UAApBQ,KAAoB,uEAAZ,KAAKA,KAAO;AAC5B,UAAMK,MAAM,GAAGZ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBM,KAAK,CAACC,QAAN,CAAeK,KAAjC,CAAf;AACA9B,MAAAA,iBAAiB,CAACO,eAAlB,CAAkCsB,MAAlC;AACA,WAAKD,QAAL,CAAc,UAAAG,SAAS;AAAA,eAAK;AAC1BjB,UAAAA,OAAO,EAAEG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBa,SAAS,CAACjB,OAA5B,EAAqCe,MAArC;AADiB,SAAL;AAAA,OAAvB;AAGD;;;mCAEeG,K,EAAOC,C,EAAG;AACxB,UAAMC,MAAM,uBAAMF,KAAN,EAAcC,CAAC,CAACE,MAAF,CAASC,KAAvB,CAAZ;;AACA,WAAKR,QAAL,CAAc,UAAAG,SAAS;AAAA,eAAK;AAC1BjB,UAAAA,OAAO,EAAEG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBa,SAAS,CAACjB,OAA5B,EAAqCoB,MAArC;AADiB,SAAL;AAAA,OAAvB;AAGD,K,CAED;;;;mCACgB;AACd,WAAKN,QAAL,CAAc;AAAEd,QAAAA,OAAO,EAAE,KAAKD,IAAL,CAAUC;AAArB,OAAd;AACD,K,CAED;;;;oCACiB;AAAA,UACPA,OADO,GACK,KAAKE,KADV,CACPF,OADO;AAEf,aACE,oBAAC,WAAD;AACE,QAAA,OAAO,EAAC,aADV;AAEE,QAAA,OAAO,EAAEA,OAFX;AAGE,QAAA,cAAc,EAAE,KAAKuB,YAAL,CAAkBjB,IAAlB,CAAuB,IAAvB,CAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,SAAD;AACE,QAAA,WAAW,EAAC,QADd;AAEE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWF,OAAX,CAAmBC,WAF5B;AAGE,QAAA,QAAQ,EAAE,KAAKuB,cAAL,CAAoBlB,IAApB,CAAyB,IAAzB,EAA+B,aAA/B,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;AAaD,K,CAED;;;;sCACmB;AACjB,UAAImB,IAAI,GAAG,KAAKvB,KAAL,CAAWV,QAAX,CAAoBkC,GAApB,CAAwB,UAACC,MAAD,EAASC,KAAT,EAAmB;AACpD,YAAMC,UAAU,GAAGF,MAAM,CAACG,WAAP,kBAA6BH,MAAM,CAACG,WAApC,IAAoD,EAAvE;AACA,eACE;AAAI,UAAA,GAAG,EAAEF,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4BD,MAAM,CAACI,IAAnC,CADF,EAEE;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4BF,UAA5B,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,EAAE,sBAAeF,MAAM,CAACK,EAAtB,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,UAAD;AAAY,UAAA,IAAI,EAAC,QAAjB;AAA0B,UAAA,OAAO,EAAC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CAHF,CADF;AAWD,OAbU,CAAX;AAeA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQP,IAAR,CAAP;AACD;;;kCAEc;AACb,UAAIQ,KAAK,GACP;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF,CADF;;AAOA,UAAI,KAAK/B,KAAL,CAAWV,QAAX,CAAoB0C,MAApB,GAA6B,CAAjC,EAAoC;AAClCD,QAAAA,KAAK,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAO,UAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAI,UAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADF,CADF,EAQG,KAAKE,eAAL,EARH,CADF,EAWE,oBAAC,SAAD;AACE,UAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWR,UADzB;AAEE,UAAA,QAAQ,EAAE,KAAKgB,KAAL,CAAWC,QAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAXF,CADF;AAkBD;;AACD,aAAOsB,KAAP;AACD;;;6BAES;AACR,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKG,aAAL,EADH,EAEE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG9C,UAAU,CAAC+C,YAAX,CAAwB,KAAKnC,KAAL,CAAWN,UAAnC,CADH,wBAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAMG,KAAK0C,WAAL,EANH,CADF;AAUD;;;;EAxIyBzD,S;;AA2I5BiB,aAAa,CAACyC,SAAd,GAA0B;AACxB5B,EAAAA,QAAQ,EAAE7B,SAAS,CAAC0D;AADI,CAA1B;AAGA,eAAe1C,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router'\n\nimport Paginator from 'shared/paginator'\nimport BranchesStore from 'stores/branches'\nimport EditClientActions from 'actions/editClient'\nimport TextField from 'shared/textField'\nimport TableFilter from 'shared/tableFilter'\nimport IconButton from 'shared/iconButton'\nimport accounting from 'accounting'\n\nfunction getCurrentState () {\n  const branches = BranchesStore.getBranchesList()\n  const totalPages = BranchesStore.getTotalPages()\n  const totalItems = BranchesStore.getTotalItems()\n  return {\n    branches,\n    totalItems,\n    totalPages\n  }\n}\n\nclass BranchesTable extends Component {\n  constructor () {\n    super()\n    this.data = {\n      filters: {\n        description: ''\n      }\n    }\n    this.state = Object.assign({}, this.data, getCurrentState())\n    this._onChange = this._onChange.bind(this)\n  }\n\n  componentDidMount () {\n    // Adds listener, when the Store changes, trigger the _onChange callback func\n    BranchesStore.addChangeListener(this._onChange)\n    this.loadData()\n  }\n\n  componentDidUpdate (prevProps) {\n    if (this.props.location.search !== prevProps.location.search) {\n      this.loadData(this.props)\n    }\n  }\n\n  componentWillUnmount () {\n    // Removes the listener to avoid memory leaks\n    BranchesStore.removeChangeListener(this._onChange)\n  }\n\n  _onChange () {\n    // When the store changes, the state goes to it and pulls the updated data\n    // then sets it so the component rerenders\n    const state = getCurrentState()\n    this.setState(state)\n  }\n\n  loadData (props = this.props) {\n    const params = Object.assign({}, props.location.query)\n    EditClientActions.getBranchesList(params)\n    this.setState(prevState => ({\n      filters: Object.assign({}, prevState.filters, params)\n    }))\n  }\n\n  onChangeFilter (field, e) {\n    const filter = { [field]: e.target.value }\n    this.setState(prevState => ({\n      filters: Object.assign({}, prevState.filters, filter)\n    }))\n  }\n\n  // Reset all filters and data to default\n  clearFilters () {\n    this.setState({ filters: this.data.filters })\n  }\n\n  // Render a wrapper for the filters element\n  renderFilters () {\n    const { filters } = this.state\n    return (\n      <TableFilter\n        baseUrl='/sucursales'\n        filters={filters}\n        onClearFilters={this.clearFilters.bind(this)}\n      >\n        <TextField\n          placeholder='Nombre'\n          value={this.state.filters.description}\n          onChange={this.onChangeFilter.bind(this, 'description')}\n        />\n      </TableFilter>\n    )\n  }\n\n  // Renders each employee and adds them as a row in the table\n  renderTableBody () {\n    let rows = this.state.branches.map((branch, index) => {\n      const postalCode = branch.postal_code ? `C.P. ${branch.postal_code}` : ''\n      return (\n        <tr key={index}>\n          <td className='align-left'>{branch.name}</td>\n          <td className='align-left'>{postalCode}</td>\n          <td>\n            <Link to={`/sucursal/${branch.id}`}>\n              <IconButton icon='pencil' tooltip='Editar' />\n            </Link>\n          </td>\n        </tr>\n      )\n    })\n\n    return <tbody>{rows}</tbody>\n  }\n\n  renderTable () {\n    let table = (\n      <div className='content'>\n        <div className='block unselectable'>\n          <p>No hay sucursales</p>\n        </div>\n      </div>\n    )\n    if (this.state.branches.length > 0) {\n      table = (\n        <div>\n          <table className='table'>\n            <thead>\n              <tr>\n                <th className='align-left'>Nombre</th>\n                <th className='align-left'>Código Postal</th>\n                <th />\n              </tr>\n            </thead>\n            {this.renderTableBody()}\n          </table>\n          <Paginator\n            totalPages={this.state.totalPages}\n            location={this.props.location}\n          />\n        </div>\n      )\n    }\n    return table\n  }\n\n  render () {\n    return (\n      <div>\n        {this.renderFilters()}\n        <div className='caption'>\n          {accounting.formatNumber(this.state.totalItems)} elementos visibles\n        </div>\n        <br />\n        {this.renderTable()}\n      </div>\n    )\n  }\n}\n\nBranchesTable.propTypes = {\n  location: PropTypes.object\n}\nexport default BranchesTable\n"]},"metadata":{},"sourceType":"module"}