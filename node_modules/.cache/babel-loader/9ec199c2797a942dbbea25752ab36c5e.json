{"ast":null,"code":"import _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editUser/notifications/index.js\";\n// Libraries\nimport React, { Component } from 'react'; // Components\n\nimport EditUserActions from 'actions/editUser';\nimport EditUserStore from 'stores/editUser';\nimport Button from 'shared/button';\n\nfunction getCurrentState() {\n  return EditUserStore.getUserNotifications();\n}\n\nvar Notifications =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Notifications, _Component);\n\n  function Notifications() {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Notifications).call(this));\n    _this.state = Object.assign({}, getCurrentState());\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Notifications, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Adds listener, when the Store changes, trigger the _onChange callback func\n      EditUserStore.addChangeListener(this._onChange);\n      EditUserActions.getUserNotifications();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Removes the listener to avoid memory leaks\n      EditUserStore.removeChangeListener(this._onChange);\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      // If anything changes on the store, go fetch the updated data from it and setState to render the new values\n      var state = getCurrentState();\n      this.setState(state);\n    }\n  }, {\n    key: \"onToggleState\",\n    value: function onToggleState(notifType) {\n      // Toggles the passed notification type to its opposite, then sets the state to render the change\n      var state = this.state;\n      state[notifType] = !state[notifType];\n      this.setState(state);\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData() {\n      // Evaluates the checked items in the state, then pushes the cheked ones into an array\n      // And sends the data to the server to be stored\n      var notifications = [];\n      if (this.state.newInvoices) notifications.push('new_invoices');\n      if (this.state.downloadedInvoices) notifications.push('downloaded_invoices');\n      var data = {\n        notifications: notifications\n      };\n      EditUserActions.setUserNotifications(data);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        onChange: this.onToggleState.bind(this, 'newInvoices'),\n        checked: this.state.newInvoices,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), \"\\xA0Nuevas facturas\")), React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        onChange: this.onToggleState.bind(this, 'downloadedInvoices'),\n        checked: this.state.downloadedInvoices,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), \"\\xA0Facturas descargadas\"))), React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Button, {\n        buttonStyle: \"primary\",\n        icon: \"content-save\",\n        onClick: this.sendData.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Guardar\")));\n    }\n  }]);\n\n  return Notifications;\n}(Component);\n\nexport default Notifications;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/editUser/notifications/index.js"],"names":["React","Component","EditUserActions","EditUserStore","Button","getCurrentState","getUserNotifications","Notifications","state","Object","assign","_onChange","bind","addChangeListener","removeChangeListener","setState","notifType","notifications","newInvoices","push","downloadedInvoices","data","setUserNotifications","onToggleState","sendData"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,SAASC,eAAT,GAA4B;AAC1B,SAAOF,aAAa,CAACG,oBAAd,EAAP;AACD;;IAEKC,a;;;;;AACJ,2BAAe;AAAA;;AAAA;;AACb;AACA,UAAKC,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,eAAe,EAAjC,CAAb;AACA,UAAKM,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AAHa;AAId;;;;wCAEoB;AACnB;AACAT,MAAAA,aAAa,CAACU,iBAAd,CAAgC,KAAKF,SAArC;AACAT,MAAAA,eAAe,CAACI,oBAAhB;AACD;;;2CAEuB;AACtB;AACAH,MAAAA,aAAa,CAACW,oBAAd,CAAmC,KAAKH,SAAxC;AACD;;;gCAEY;AACX;AACA,UAAIH,KAAK,GAAGH,eAAe,EAA3B;AACA,WAAKU,QAAL,CAAcP,KAAd;AACD;;;kCAEcQ,S,EAAW;AACxB;AACA,UAAIR,KAAK,GAAG,KAAKA,KAAjB;AACAA,MAAAA,KAAK,CAACQ,SAAD,CAAL,GAAmB,CAACR,KAAK,CAACQ,SAAD,CAAzB;AACA,WAAKD,QAAL,CAAcP,KAAd;AACD;;;+BAEW;AACV;AACA;AACA,UAAIS,aAAa,GAAG,EAApB;AACA,UAAI,KAAKT,KAAL,CAAWU,WAAf,EAA4BD,aAAa,CAACE,IAAd,CAAmB,cAAnB;AAC5B,UAAI,KAAKX,KAAL,CAAWY,kBAAf,EAAmCH,aAAa,CAACE,IAAd,CAAmB,qBAAnB;AACnC,UAAIE,IAAI,GAAG;AAAEJ,QAAAA,aAAa,EAAbA;AAAF,OAAX;AACAf,MAAAA,eAAe,CAACoB,oBAAhB,CAAqCD,IAArC;AACD;;;6BAES;AACR,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,QAAQ,EAAE,KAAKE,aAAL,CAAmBX,IAAnB,CAAwB,IAAxB,EAA8B,aAA9B,CAFZ;AAGE,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWU,WAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,wBADF,CADF,EAWE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,QAAQ,EAAE,KAAKK,aAAL,CAAmBX,IAAnB,CAAwB,IAAxB,EAA8B,oBAA9B,CAFZ;AAGE,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWY,kBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,6BADF,CAXF,CADF,EAuBE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,WAAW,EAAC,SADd;AAEE,QAAA,IAAI,EAAC,cAFP;AAGE,QAAA,OAAO,EAAE,KAAKI,QAAL,CAAcZ,IAAd,CAAmB,IAAnB,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAvBF,CADF;AAmCD;;;;EA7EyBX,S;;AAgF5B,eAAeM,aAAf","sourcesContent":["// Libraries\nimport React, { Component } from 'react'\n\n// Components\nimport EditUserActions from 'actions/editUser'\nimport EditUserStore from 'stores/editUser'\nimport Button from 'shared/button'\n\nfunction getCurrentState () {\n  return EditUserStore.getUserNotifications()\n}\n\nclass Notifications extends Component {\n  constructor () {\n    super()\n    this.state = Object.assign({}, getCurrentState())\n    this._onChange = this._onChange.bind(this)\n  }\n\n  componentDidMount () {\n    // Adds listener, when the Store changes, trigger the _onChange callback func\n    EditUserStore.addChangeListener(this._onChange)\n    EditUserActions.getUserNotifications()\n  }\n\n  componentWillUnmount () {\n    // Removes the listener to avoid memory leaks\n    EditUserStore.removeChangeListener(this._onChange)\n  }\n\n  _onChange () {\n    // If anything changes on the store, go fetch the updated data from it and setState to render the new values\n    let state = getCurrentState()\n    this.setState(state)\n  }\n\n  onToggleState (notifType) {\n    // Toggles the passed notification type to its opposite, then sets the state to render the change\n    let state = this.state\n    state[notifType] = !state[notifType]\n    this.setState(state)\n  }\n\n  sendData () {\n    // Evaluates the checked items in the state, then pushes the cheked ones into an array\n    // And sends the data to the server to be stored\n    let notifications = []\n    if (this.state.newInvoices) notifications.push('new_invoices')\n    if (this.state.downloadedInvoices) notifications.push('downloaded_invoices')\n    let data = { notifications }\n    EditUserActions.setUserNotifications(data)\n  }\n\n  render () {\n    return (\n      <div>\n        <div className='flex-column'>\n          <div className='control'>\n            <label className='checkbox'>\n              <input\n                type='checkbox'\n                onChange={this.onToggleState.bind(this, 'newInvoices')}\n                checked={this.state.newInvoices}\n              />\n              &nbsp;Nuevas facturas\n            </label>\n          </div>\n          <div className='control'>\n            <label className='checkbox'>\n              <input\n                type='checkbox'\n                onChange={this.onToggleState.bind(this, 'downloadedInvoices')}\n                checked={this.state.downloadedInvoices}\n              />\n              &nbsp;Facturas descargadas\n            </label>\n          </div>\n        </div>\n        <div className='control'>\n          <Button\n            buttonStyle='primary'\n            icon='content-save'\n            onClick={this.sendData.bind(this)}\n          >\n            Guardar\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Notifications\n"]},"metadata":{},"sourceType":"module"}