{"ast":null,"code":"import _regeneratorRuntime from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AppDispatcher from '../dispatcher';\nimport API from '../api';\nexport default {\n  // Resets the current bank form to its defaults in the store\n  clearBank: function clearBank() {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_BANK'\n    });\n  },\n  clearBankAccounts: function clearBankAccounts() {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_BANK_ACCOUNTS'\n    });\n  },\n  getBelvoBanks: function getBelvoBanks(bank) {\n    return API.BanksSynchronization.BankAccounts(bank).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'BANKS_RECEIVED',\n        data: response\n      });\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error));\n      throw error;\n    });\n  },\n  addBank: function addBank(data) {\n    return API.BanksSynchronization.AddBank(data);\n  },\n  askStatus: function () {\n    var _askStatus = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(institution) {\n      var statusRegistration, _ref, status;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              statusRegistration = 'failed';\n              _context.prev = 1;\n              _context.next = 4;\n              return API.BanksSynchronization.AskStatus(institution);\n\n            case 4:\n              _ref = _context.sent;\n              status = _ref.status;\n              statusRegistration = status;\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              AppSignal.sendError(new Error(_context.t0));\n              statusRegistration = 'failed';\n\n            case 13:\n              return _context.abrupt(\"return\", statusRegistration);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    function askStatus(_x) {\n      return _askStatus.apply(this, arguments);\n    }\n\n    return askStatus;\n  }(),\n  getReponseRegister: function getReponseRegister(bank) {\n    return API.BanksSynchronization.GetResponse(bank).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'GET_RESPONSE',\n        data: response\n      });\n      return response;\n    }).catch(function (error) {\n      throw error;\n    });\n  },\n  saveSelectedAccount: function saveSelectedAccount(data) {\n    return API.BanksSynchronization.SaveSelectedAccount(data).then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'ACCOUNT_SELECTED',\n        data: response\n      });\n      return response;\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  getBankList: function getBankList() {\n    return API.BanksSynchronization.GetBankList().then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'SMART_BANK_LIST_RECEIVED',\n        data: response\n      });\n      return response;\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  },\n  tokenDefeated: function tokenDefeated() {\n    AppDispatcher.handleAction({\n      actionType: 'TOKEN_DEFEATED'\n    });\n  },\n  getWidgetToken: function getWidgetToken() {\n    return API.BanksSynchronization.WidgetToken().then(function (response) {\n      AppDispatcher.handleAction({\n        actionType: 'WIDGET_TOKEN_RECEIVED',\n        data: response\n      });\n      return response;\n    }).catch(function (error) {\n      AppSignal.sendError(new Error(error.error));\n      throw error;\n    });\n  }\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/actions/smartsync.js"],"names":["AppDispatcher","API","clearBank","handleAction","actionType","clearBankAccounts","getBelvoBanks","bank","BanksSynchronization","BankAccounts","then","response","data","catch","error","AppSignal","sendError","Error","addBank","AddBank","askStatus","institution","statusRegistration","AskStatus","status","getReponseRegister","GetResponse","saveSelectedAccount","SaveSelectedAccount","getBankList","GetBankList","tokenDefeated","getWidgetToken","WidgetToken"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,eAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,eAAe;AACb;AACAC,EAAAA,SAFa,uBAEA;AACXF,IAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,MAAAA,UAAU,EAAE;AADa,KAA3B;AAGD,GANY;AAQbC,EAAAA,iBARa,+BAQQ;AACnBL,IAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,MAAAA,UAAU,EAAE;AADa,KAA3B;AAGD,GAZY;AAcbE,EAAAA,aAda,yBAcEC,IAdF,EAcQ;AACnB,WAAON,GAAG,CAACO,oBAAJ,CAAyBC,YAAzB,CAAsCF,IAAtC,EACJG,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBX,MAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,gBADa;AAEzBQ,QAAAA,IAAI,EAAED;AAFmB,OAA3B;AAID,KANI,EAOJE,KAPI,CAOE,UAAAC,KAAK,EAAI;AACdC,MAAAA,SAAS,CAACC,SAAV,CAAoB,IAAIC,KAAJ,CAAUH,KAAV,CAApB;AACA,YAAMA,KAAN;AACD,KAVI,CAAP;AAWD,GA1BY;AA4BbI,EAAAA,OA5Ba,mBA4BJN,IA5BI,EA4BE;AACb,WAAOX,GAAG,CAACO,oBAAJ,CAAyBW,OAAzB,CAAiCP,IAAjC,CAAP;AACD,GA9BY;AAgCPQ,EAAAA,SAhCO;AAAA;AAAA;AAAA,8CAgCIC,WAhCJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiCPC,cAAAA,kBAjCO,GAiCc,QAjCd;AAAA;AAAA;AAAA,qBAoCgBrB,GAAG,CAACO,oBAAJ,CAAyBe,SAAzB,CAAmCF,WAAnC,CApChB;;AAAA;AAAA;AAoCDG,cAAAA,MApCC,QAoCDA,MApCC;AAqCTF,cAAAA,kBAAkB,GAAGE,MAArB;AArCS;AAAA;;AAAA;AAAA;AAAA;AAuCTT,cAAAA,SAAS,CAACC,SAAV,CAAoB,IAAIC,KAAJ,aAApB;AACAK,cAAAA,kBAAkB,GAAG,QAArB;;AAxCS;AAAA,+CA2CJA,kBA3CI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8CbG,EAAAA,kBA9Ca,8BA8COlB,IA9CP,EA8Ca;AACxB,WAAON,GAAG,CAACO,oBAAJ,CAAyBkB,WAAzB,CAAqCnB,IAArC,EACJG,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBX,MAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,cADa;AAEzBQ,QAAAA,IAAI,EAAED;AAFmB,OAA3B;AAIA,aAAOA,QAAP;AACD,KAPI,EAQJE,KARI,CAQE,UAAAC,KAAK,EAAI;AACd,YAAMA,KAAN;AACD,KAVI,CAAP;AAWD,GA1DY;AA4Dba,EAAAA,mBA5Da,+BA4DQf,IA5DR,EA4Dc;AACzB,WAAOX,GAAG,CAACO,oBAAJ,CAAyBoB,mBAAzB,CAA6ChB,IAA7C,EACJF,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBX,MAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,kBADa;AAEzBQ,QAAAA,IAAI,EAAED;AAFmB,OAA3B;AAIA,aAAOA,QAAP;AACD,KAPI,EAQJE,KARI,CAQE,UAAAC,KAAK,EAAI;AACdC,MAAAA,SAAS,CAACC,SAAV,CAAoB,IAAIC,KAAJ,CAAUH,KAAK,CAACA,KAAhB,CAApB;AACA,YAAMA,KAAN;AACD,KAXI,CAAP;AAYD,GAzEY;AA2Ebe,EAAAA,WA3Ea,yBA2EE;AACb,WAAO5B,GAAG,CAACO,oBAAJ,CAAyBsB,WAAzB,GACJpB,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBX,MAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,0BADa;AAEzBQ,QAAAA,IAAI,EAAED;AAFmB,OAA3B;AAIA,aAAOA,QAAP;AACD,KAPI,EAQJE,KARI,CAQE,UAAAC,KAAK,EAAI;AACdC,MAAAA,SAAS,CAACC,SAAV,CAAoB,IAAIC,KAAJ,CAAUH,KAAK,CAACA,KAAhB,CAApB;AACA,YAAMA,KAAN;AACD,KAXI,CAAP;AAYD,GAxFY;AA0FbiB,EAAAA,aA1Fa,2BA0FI;AACf/B,IAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,MAAAA,UAAU,EAAE;AADa,KAA3B;AAGD,GA9FY;AAgGb4B,EAAAA,cAhGa,4BAgGK;AAChB,WAAO/B,GAAG,CAACO,oBAAJ,CAAyByB,WAAzB,GACJvB,IADI,CACC,UAAAC,QAAQ,EAAI;AAChBX,MAAAA,aAAa,CAACG,YAAd,CAA2B;AACzBC,QAAAA,UAAU,EAAE,uBADa;AAEzBQ,QAAAA,IAAI,EAAED;AAFmB,OAA3B;AAIA,aAAOA,QAAP;AACD,KAPI,EAQJE,KARI,CAQE,UAAAC,KAAK,EAAI;AACdC,MAAAA,SAAS,CAACC,SAAV,CAAoB,IAAIC,KAAJ,CAAUH,KAAK,CAACA,KAAhB,CAApB;AACA,YAAMA,KAAN;AACD,KAXI,CAAP;AAYD;AA7GY,CAAf","sourcesContent":["import AppDispatcher from '../dispatcher'\nimport API from '../api'\n\nexport default {\n  // Resets the current bank form to its defaults in the store\n  clearBank () {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_BANK'\n    })\n  },\n\n  clearBankAccounts () {\n    AppDispatcher.handleAction({\n      actionType: 'CLEAR_CURRENT_BANK_ACCOUNTS'\n    })\n  },\n\n  getBelvoBanks (bank) {\n    return API.BanksSynchronization.BankAccounts(bank)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'BANKS_RECEIVED',\n          data: response\n        })\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error))\n        throw error\n      })\n  },\n\n  addBank (data) {\n    return API.BanksSynchronization.AddBank(data)\n  },\n\n  async askStatus (institution) {\n    let statusRegistration = 'failed'\n\n    try {\n      const { status } = await API.BanksSynchronization.AskStatus(institution)\n      statusRegistration = status\n    } catch (error) {\n      AppSignal.sendError(new Error(error))\n      statusRegistration = 'failed'\n    }\n\n    return statusRegistration\n  },\n\n  getReponseRegister (bank) {\n    return API.BanksSynchronization.GetResponse(bank)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'GET_RESPONSE',\n          data: response\n        })\n        return response\n      })\n      .catch(error => {\n        throw error\n      })\n  },\n\n  saveSelectedAccount (data) {\n    return API.BanksSynchronization.SaveSelectedAccount(data)\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'ACCOUNT_SELECTED',\n          data: response\n        })\n        return response\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n\n  getBankList () {\n    return API.BanksSynchronization.GetBankList()\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'SMART_BANK_LIST_RECEIVED',\n          data: response\n        })\n        return response\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  },\n\n  tokenDefeated () {\n    AppDispatcher.handleAction({\n      actionType: 'TOKEN_DEFEATED'\n    })\n  },\n\n  getWidgetToken () {\n    return API.BanksSynchronization.WidgetToken()\n      .then(response => {\n        AppDispatcher.handleAction({\n          actionType: 'WIDGET_TOKEN_RECEIVED',\n          data: response\n        })\n        return response\n      })\n      .catch(error => {\n        AppSignal.sendError(new Error(error.error))\n        throw error\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}