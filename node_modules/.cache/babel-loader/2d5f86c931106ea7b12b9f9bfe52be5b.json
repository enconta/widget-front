{"ast":null,"code":"import _defineProperty from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/viewInvoice/payments/paymentModal.js\";\n// Libraries\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport accounting from 'accounting';\nimport classNames from 'classnames';\nimport { Async } from 'react-select';\nimport AppSignal from 'appsignal';\nimport API from 'api';\nimport PaymentAccountsActions from 'actions/paymentAccounts';\nimport NotificationsActions from 'actions/notifications';\nimport PaymentAccountsStore from 'stores/paymentAccounts';\nimport Modal from 'shared/modal';\nimport TextField from 'shared/textField';\nimport SelectField from 'shared/selectField';\nimport Datepicker from 'shared/datepicker';\nimport { absolutify, amountToCents, prettyDate, formatDateInvoice, DATE_FORMAT } from 'utils';\nimport { PAYMENT_CATEGORIES, CURRENCY } from 'shared/catalogs';\nvar requiredFields = new Set();\n\nfunction getCurrentState() {\n  var paymentAccounts = PaymentAccountsStore.getPaymentAccounts();\n  return {\n    paymentAccounts: paymentAccounts.map(function (account) {\n      return {\n        id: \"\".concat(account.id),\n        label: \"\".concat(account.name, \" (\").concat(account.account_number, \")\")\n      };\n    })\n  };\n}\n\nvar PaymentModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PaymentModal, _Component);\n\n  function PaymentModal() {\n    var _this;\n\n    _classCallCheck(this, PaymentModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaymentModal).call(this));\n    _this.data = {\n      account: '',\n      description: '',\n      exchange_rate: 1.0,\n      date: moment(),\n      amount: '0',\n      includePaymentsComplement: false,\n      currency: 'MXN',\n      paymentForm: '',\n      series: '',\n      folio: '',\n      branch: {\n        value: ''\n      }\n    };\n    _this.state = Object.assign({}, _this.data, getCurrentState());\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PaymentModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Adds listener, when the Store changes, trigger the _onChange callback func\n      PaymentAccountsActions.getListWithCashAccounts();\n      PaymentAccountsStore.addChangeListener(this._onChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clears the stored requiredFields\n      requiredFields.clear();\n      PaymentAccountsStore.removeChangeListener(this._onChange);\n    } // Get clients for current taxable entity\n\n  }, {\n    key: \"getBranches\",\n    value: function getBranches(input) {\n      var _this2 = this;\n\n      return API.EditClient.GetBranchesList({\n        description: input\n      }).then(function (response) {\n        return {\n          options: _this2.parseBranches(response.branches)\n        };\n      }).catch(function (error) {\n        AppSignal.sendError(error);\n        throw error;\n      });\n    } // Convert an array of branches in a format that react-select will understand\n\n  }, {\n    key: \"parseBranches\",\n    value: function parseBranches(branches) {\n      return branches.map(function (branch) {\n        return {\n          value: branch.id,\n          label: branch.name\n        };\n      }).filter(function (branch) {\n        return branch.label;\n      });\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      // When the store changes, the state goes to it and pulls the updated data\n      // then sets it so the component rerenders\n      var state = getCurrentState();\n      this.setState(state);\n    } // Iterates over required fields and validates every one of them\n    // Then it returns true if all validations succeedeed, else false.\n\n  }, {\n    key: \"validateRequiredFields\",\n    value: function validateRequiredFields() {\n      return _toConsumableArray(requiredFields) // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(function (form) {\n        return form.validate();\n      }) // Calls the validate() method on each form\n      .every(function (e) {\n        return e;\n      }); // Checks if all validations suceeded\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(field, e) {\n      this.setState(_defineProperty({}, field, e.target.value));\n    }\n  }, {\n    key: \"onChangeDate\",\n    value: function onChangeDate(field, e) {\n      this.setState(_defineProperty({}, field, e));\n    }\n  }, {\n    key: \"togglePaymentsComplement\",\n    value: function togglePaymentsComplement() {\n      requiredFields.clear();\n      var invoice = this.props.invoice;\n      var amount = invoice.payments.reduce(function (acc, payment) {\n        return acc - payment.amount_cents;\n      }, invoice.total_cents);\n      this.setState(function (prevState) {\n        return {\n          includePaymentsComplement: !prevState.includePaymentsComplement,\n          amount: accounting.formatMoney(absolutify(amount / 100), '$ ')\n        };\n      });\n    }\n  }, {\n    key: \"setBranch\",\n    value: function setBranch(branch) {\n      this.setState({\n        branch: branch\n      });\n    } // Format price as $ 1,234.56\n\n  }, {\n    key: \"formatPrice\",\n    value: function formatPrice(field) {\n      var formatted = accounting.formatMoney(this.state[field], '$ ');\n      this.setState(_defineProperty({}, field, formatted));\n    } // Parse formatted price as '1234.56'\n\n  }, {\n    key: \"unformatPrice\",\n    value: function unformatPrice(field) {\n      var unformatted = absolutify(this.state[field]).toString();\n      this.setState(_defineProperty({}, field, unformatted));\n    } // Sends payment hash to the API\n\n  }, {\n    key: \"addPayment\",\n    value: function addPayment() {\n      if (this.validateRequiredFields()) {\n        var _this$props = this.props,\n            paymentId = _this$props.paymentId,\n            invoice = _this$props.invoice,\n            toggleModal = _this$props.toggleModal,\n            getInvoice = _this$props.getInvoice;\n        var _this$state = this.state,\n            date = _this$state.date,\n            description = _this$state.description,\n            amount = _this$state.amount,\n            account = _this$state.account,\n            includePaymentsComplement = _this$state.includePaymentsComplement,\n            paymentForm = _this$state.paymentForm,\n            currency = _this$state.currency,\n            exchangeRate = _this$state.exchangeRate,\n            branch = _this$state.branch,\n            series = _this$state.series,\n            folio = _this$state.folio;\n        var amountCents = absolutify(amountToCents(amount).toFixed(0)); // Rounds to integer\n\n        var restingAmount = absolutify(invoice.payments.reduce(function (acc, payment) {\n          return acc - payment.amount_cents;\n        }, invoice.total_cents));\n\n        if (amountCents > restingAmount && invoice.currency === 'MXN') {\n          return NotificationsActions.error('La suma de las parcialidades no debe exceder el total a pagar.');\n        }\n\n        var data = {\n          payment: {\n            paid_on: moment(date).format(DATE_FORMAT),\n            description: description,\n            amount_cents: amountCents,\n            payment_account_id: Number(account)\n          }\n        };\n\n        if (includePaymentsComplement) {\n          data = Object.assign({}, data, {\n            invoice: {\n              issue_date: invoice.issue_date,\n              voucher_type: invoice.voucher_type,\n              series: series,\n              folio: folio,\n              payment_detail_mg: {\n                payment_mgs: [{\n                  exchange_rate: exchangeRate,\n                  paid_at: formatDateInvoice(date),\n                  payment_form: paymentForm,\n                  currency: currency,\n                  amount_cents: amountCents\n                }]\n              }\n            }\n          });\n\n          if (branch && branch.value) {\n            data = Object.assign({}, data, {\n              branch: {\n                id: branch.value\n              }\n            });\n          }\n        }\n\n        toggleModal();\n\n        if (paymentId) {\n          API.Payments.Update(paymentId, data).then(function (r) {\n            getInvoice();\n            NotificationsActions.success('El pago fue actualizado correctamente');\n          }).catch(function (error) {\n            AppSignal.sendError(error);\n            NotificationsActions.error(error);\n          });\n        } else {\n          API.Payments.Create(invoice.id, data).then(function (r) {\n            getInvoice();\n            NotificationsActions.success('El pago fue creado correctamente');\n          }).catch(function (error) {\n            AppSignal.sendError(error);\n            NotificationsActions.error(error);\n          });\n        }\n      }\n    } // Render payment invoice check if invoice is not 3.3\n\n  }, {\n    key: \"renderAddPaymentInvoice\",\n    value: function renderAddPaymentInvoice() {\n      var invoice = this.props.invoice;\n      var includePaymentsComplement = this.state.includePaymentsComplement;\n      if (invoice.version !== '3.3') return null;\n\n      if (invoice['payment_method'] !== 'PPD' && invoice['payment_form'] !== '99') {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onClick: this.togglePaymentsComplement.bind(this),\n        type: \"checkbox\",\n        checked: includePaymentsComplement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }), \"\\xA0A\\xF1adir complemento de pago de factura\"));\n    } // Render payments complement fields if complement is enabled\n\n  }, {\n    key: \"renderPaymentsComplementFields\",\n    value: function renderPaymentsComplementFields() {\n      var _this$state2 = this.state,\n          includePaymentsComplement = _this$state2.includePaymentsComplement,\n          paymentForm = _this$state2.paymentForm,\n          currency = _this$state2.currency,\n          branch = _this$state2.branch,\n          series = _this$state2.series,\n          folio = _this$state2.folio;\n      if (!includePaymentsComplement) return null;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Serie\",\n        onChange: this.onChange.bind(this, 'series'),\n        value: series,\n        selectAllOnFocus: true,\n        required: true,\n        ref: function ref(r) {\n          if (includePaymentsComplement) requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Folio\",\n        onChange: this.onChange.bind(this, 'folio'),\n        value: folio,\n        selectAllOnFocus: true,\n        required: true,\n        ref: function ref(r) {\n          if (includePaymentsComplement) requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        label: \"Moneda\",\n        placeholder: \"Seleccione una moneda\",\n        options: CURRENCY,\n        onChange: this.onChange.bind(this, 'currency'),\n        value: currency,\n        required: true,\n        ref: function ref(r) {\n          if (includePaymentsComplement) requiredFields.add(r);\n        },\n        showId: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        label: \"Forma de pago\",\n        placeholder: \"Seleccione una forma de pago\",\n        options: PAYMENT_CATEGORIES,\n        onChange: this.onChange.bind(this, 'paymentForm'),\n        value: paymentForm,\n        required: true,\n        ref: function ref(r) {\n          if (includePaymentsComplement) requiredFields.add(r);\n        },\n        showId: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"caption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, \"Sucursal de emisi\\xF3n (opcional)\"), React.createElement(\"div\", {\n        className: \"control has-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(Async, {\n        value: branch,\n        loadOptions: this.getBranches.bind(this),\n        clearable: true,\n        placeholder: \"Selecciona una Sucursal\",\n        loadingPlaceholder: \"Buscando\",\n        searchPromptText: \"Teclear el nombre de la sucursal\",\n        noResultsText: \"No encontrada\",\n        onChange: this.setBranch.bind(this),\n        ignoreAccents: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"icon info-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"tooltip\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, \"Para agregar m\\xE1s sucursales ingresa a \\\"mi empresa\\\"\"), React.createElement(\"i\", {\n        className: \"mdi mdi-information-outline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      })))));\n    } // Main render\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isActive = _this$props2.isActive,\n          toggleModal = _this$props2.toggleModal,\n          invoice = _this$props2.invoice;\n      var _this$state3 = this.state,\n          account = _this$state3.account,\n          paymentAccounts = _this$state3.paymentAccounts,\n          description = _this$state3.description,\n          exchangeRate = _this$state3.exchangeRate,\n          date = _this$state3.date,\n          amount = _this$state3.amount;\n      var payedCents = invoice.payments ? invoice.payments.reduce(function (acc, payment) {\n        return acc + payment.amount_cents;\n      }, 0) : 0;\n      var restingCents = invoice.total_cents - payedCents;\n      return React.createElement(Modal, {\n        title: \"Registrar \".concat(invoice.type === 0 ? 'cobro' : 'pago'),\n        isActive: isActive,\n        toggleModal: toggleModal,\n        onSubmit: this.addPayment.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.addPayment.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"columns is-multiline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-12 flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"subtitle-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, \"Emisor: \", invoice.issuer ? invoice.issuer.name : ''), React.createElement(\"span\", {\n        className: \"subtitle-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, \"Receptor: \", invoice.recipient ? invoice.recipient.name : ''), React.createElement(\"span\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, \"Folio: \", invoice.folio), React.createElement(\"span\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, \"Fecha de emisi\\xF3n: \", prettyDate(invoice.issue_date)), React.createElement(\"span\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, \"Total: \", accounting.formatMoney(invoice.total_cents / 100, '$ ')), React.createElement(\"span\", {\n        className: classNames('body', {\n          'is-hidden': invoice.payment_status !== '1'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, \"Pagado: \", accounting.formatMoney(payedCents / 100, '$ ')), React.createElement(\"span\", {\n        className: classNames('body', {\n          'is-hidden': invoice.payment_status !== '1'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, \"Restante: \", accounting.formatMoney(restingCents / 100, '$ '))), this.renderAddPaymentInvoice(), React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(SelectField, {\n        label: \"Cuenta de dep\\xF3sito\",\n        placeholder: \"Seleccione una cuenta de pago\",\n        options: paymentAccounts,\n        onChange: this.onChange.bind(this, 'account'),\n        value: account,\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Descripci\\xF3n\",\n        onChange: this.onChange.bind(this, 'description'),\n        value: description,\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, React.createElement(Datepicker, {\n        label: \"Fecha de \".concat(invoice.type === 0 ? 'cobro' : 'pago'),\n        value: date,\n        onChange: this.onChangeDate.bind(this, 'date'),\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        maxDate: moment(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column is-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Importe\",\n        onChange: this.onChange.bind(this, 'amount'),\n        onBlur: this.formatPrice.bind(this, 'amount'),\n        onFocus: this.unformatPrice.bind(this, 'amount'),\n        value: amount,\n        selectAllOnFocus: true,\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      })), invoice.currency !== 'MXN' && React.createElement(\"div\", {\n        className: \"column is-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Tipo de cambio\",\n        onChange: this.onChange.bind(this, 'exchangeRate'),\n        value: exchangeRate,\n        selectAllOnFocus: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      })), this.renderPaymentsComplementFields())));\n    }\n  }]);\n\n  return PaymentModal;\n}(Component);\n\nexport default PaymentModal;\nPaymentModal.propTypes = {\n  invoice: PropTypes.object.isRequired,\n  isActive: PropTypes.bool,\n  toggleModal: PropTypes.func,\n  getInvoice: PropTypes.func,\n  paymentId: PropTypes.string\n};\nPaymentModal.defaultProps = {\n  isActive: false,\n  toggleModal: function toggleModal() {},\n  getInvoice: function getInvoice() {}\n};","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/viewInvoice/payments/paymentModal.js"],"names":["React","Component","PropTypes","moment","accounting","classNames","Async","AppSignal","API","PaymentAccountsActions","NotificationsActions","PaymentAccountsStore","Modal","TextField","SelectField","Datepicker","absolutify","amountToCents","prettyDate","formatDateInvoice","DATE_FORMAT","PAYMENT_CATEGORIES","CURRENCY","requiredFields","Set","getCurrentState","paymentAccounts","getPaymentAccounts","map","account","id","label","name","account_number","PaymentModal","data","description","exchange_rate","date","amount","includePaymentsComplement","currency","paymentForm","series","folio","branch","value","state","Object","assign","_onChange","bind","getListWithCashAccounts","addChangeListener","clear","removeChangeListener","input","EditClient","GetBranchesList","then","response","options","parseBranches","branches","catch","error","sendError","filter","setState","Boolean","form","validate","every","e","field","target","invoice","props","payments","reduce","acc","payment","amount_cents","total_cents","prevState","formatMoney","formatted","unformatted","toString","validateRequiredFields","paymentId","toggleModal","getInvoice","exchangeRate","amountCents","toFixed","restingAmount","paid_on","format","payment_account_id","Number","issue_date","voucher_type","payment_detail_mg","payment_mgs","paid_at","payment_form","Payments","Update","r","success","Create","version","togglePaymentsComplement","onChange","add","getBranches","setBranch","isActive","payedCents","restingCents","type","addPayment","issuer","recipient","payment_status","renderAddPaymentInvoice","onChangeDate","formatPrice","unformatPrice","renderPaymentsComplementFields","propTypes","object","isRequired","bool","func","string","defaultProps"],"mappings":"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","sourcesContent":["// Libraries\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport accounting from 'accounting'\nimport classNames from 'classnames'\nimport { Async } from 'react-select'\nimport AppSignal from 'appsignal'\n\nimport API from 'api'\nimport PaymentAccountsActions from 'actions/paymentAccounts'\nimport NotificationsActions from 'actions/notifications'\nimport PaymentAccountsStore from 'stores/paymentAccounts'\nimport Modal from 'shared/modal'\nimport TextField from 'shared/textField'\nimport SelectField from 'shared/selectField'\nimport Datepicker from 'shared/datepicker'\nimport {\n  absolutify,\n  amountToCents,\n  prettyDate,\n  formatDateInvoice,\n  DATE_FORMAT\n} from 'utils'\n\nimport { PAYMENT_CATEGORIES, CURRENCY } from 'shared/catalogs'\n\nconst requiredFields = new Set()\n\nfunction getCurrentState () {\n  const paymentAccounts = PaymentAccountsStore.getPaymentAccounts()\n  return {\n    paymentAccounts: paymentAccounts.map(account => ({\n      id: `${account.id}`,\n      label: `${account.name} (${account.account_number})`\n    }))\n  }\n}\n\nclass PaymentModal extends Component {\n  constructor () {\n    super()\n    this.data = {\n      account: '',\n      description: '',\n      exchange_rate: 1.0,\n      date: moment(),\n      amount: '0',\n      includePaymentsComplement: false,\n      currency: 'MXN',\n      paymentForm: '',\n      series: '',\n      folio: '',\n      branch: {\n        value: ''\n      }\n    }\n    this.state = Object.assign({}, this.data, getCurrentState())\n    this._onChange = this._onChange.bind(this)\n  }\n\n  componentDidMount () {\n    // Adds listener, when the Store changes, trigger the _onChange callback func\n    PaymentAccountsActions.getListWithCashAccounts()\n    PaymentAccountsStore.addChangeListener(this._onChange)\n  }\n\n  componentWillUnmount () {\n    // Clears the stored requiredFields\n    requiredFields.clear()\n    PaymentAccountsStore.removeChangeListener(this._onChange)\n  }\n\n  // Get clients for current taxable entity\n  getBranches (input) {\n    return API.EditClient.GetBranchesList({ description: input })\n      .then(response => {\n        return { options: this.parseBranches(response.branches) }\n      })\n      .catch(error => {\n        AppSignal.sendError(error)\n        throw error\n      })\n  }\n\n  // Convert an array of branches in a format that react-select will understand\n  parseBranches (branches) {\n    return branches\n      .map(branch => ({\n        value: branch.id,\n        label: branch.name\n      }))\n      .filter(branch => branch.label)\n  }\n\n  _onChange () {\n    // When the store changes, the state goes to it and pulls the updated data\n    // then sets it so the component rerenders\n    const state = getCurrentState()\n    this.setState(state)\n  }\n\n  // Iterates over required fields and validates every one of them\n  // Then it returns true if all validations succeedeed, else false.\n  validateRequiredFields () {\n    return [...requiredFields] // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(form => form.validate()) // Calls the validate() method on each form\n      .every(e => e) // Checks if all validations suceeded\n  }\n\n  onChange (field, e) {\n    this.setState({ [field]: e.target.value })\n  }\n\n  onChangeDate (field, e) {\n    this.setState({ [field]: e })\n  }\n\n  togglePaymentsComplement () {\n    requiredFields.clear()\n    const { invoice } = this.props\n    const amount = invoice.payments.reduce(\n      (acc, payment) => acc - payment.amount_cents,\n      invoice.total_cents\n    )\n    this.setState(prevState => ({\n      includePaymentsComplement: !prevState.includePaymentsComplement,\n      amount: accounting.formatMoney(absolutify(amount / 100), '$ ')\n    }))\n  }\n\n  setBranch (branch) {\n    this.setState({ branch })\n  }\n\n  // Format price as $ 1,234.56\n  formatPrice (field) {\n    const formatted = accounting.formatMoney(this.state[field], '$ ')\n    this.setState({ [field]: formatted })\n  }\n\n  // Parse formatted price as '1234.56'\n  unformatPrice (field) {\n    const unformatted = absolutify(this.state[field]).toString()\n    this.setState({ [field]: unformatted })\n  }\n\n  // Sends payment hash to the API\n  addPayment () {\n    if (this.validateRequiredFields()) {\n      const { paymentId, invoice, toggleModal, getInvoice } = this.props\n      const {\n        date,\n        description,\n        amount,\n        account,\n        includePaymentsComplement,\n        paymentForm,\n        currency,\n        exchangeRate,\n        branch,\n        series,\n        folio\n      } = this.state\n      const amountCents = absolutify(amountToCents(amount).toFixed(0)) // Rounds to integer\n      const restingAmount = absolutify(\n        invoice.payments.reduce(\n          (acc, payment) => acc - payment.amount_cents,\n          invoice.total_cents\n        )\n      )\n\n      if (amountCents > restingAmount && invoice.currency === 'MXN') {\n        return NotificationsActions.error(\n          'La suma de las parcialidades no debe exceder el total a pagar.'\n        )\n      }\n      let data = {\n        payment: {\n          paid_on: moment(date).format(DATE_FORMAT),\n          description,\n          amount_cents: amountCents,\n          payment_account_id: Number(account)\n        }\n      }\n      if (includePaymentsComplement) {\n        data = Object.assign({}, data, {\n          invoice: {\n            issue_date: invoice.issue_date,\n            voucher_type: invoice.voucher_type,\n            series,\n            folio,\n            payment_detail_mg: {\n              payment_mgs: [\n                {\n                  exchange_rate: exchangeRate,\n                  paid_at: formatDateInvoice(date),\n                  payment_form: paymentForm,\n                  currency,\n                  amount_cents: amountCents\n                }\n              ]\n            }\n          }\n        })\n        if (branch && branch.value) {\n          data = Object.assign({}, data, {\n            branch: { id: branch.value }\n          })\n        }\n      }\n      toggleModal()\n      if (paymentId) {\n        API.Payments.Update(paymentId, data)\n          .then(r => {\n            getInvoice()\n            NotificationsActions.success(\n              'El pago fue actualizado correctamente'\n            )\n          })\n          .catch(error => {\n            AppSignal.sendError(error)\n            NotificationsActions.error(error)\n          })\n      } else {\n        API.Payments.Create(invoice.id, data)\n          .then(r => {\n            getInvoice()\n            NotificationsActions.success('El pago fue creado correctamente')\n          })\n          .catch(error => {\n            AppSignal.sendError(error)\n            NotificationsActions.error(error)\n          })\n      }\n    }\n  }\n\n  // Render payment invoice check if invoice is not 3.3\n  renderAddPaymentInvoice () {\n    const { invoice } = this.props\n    const { includePaymentsComplement } = this.state\n    if (invoice.version !== '3.3') return null\n    if (\n      invoice['payment_method'] !== 'PPD' &&\n      invoice['payment_form'] !== '99'\n    ) {\n      return null\n    }\n    return (\n      <div className='column is-12'>\n        <label className='checkbox'>\n          <input\n            onClick={this.togglePaymentsComplement.bind(this)}\n            type='checkbox'\n            checked={includePaymentsComplement}\n          />\n          &nbsp;Añadir complemento de pago de factura\n        </label>\n      </div>\n    )\n  }\n\n  // Render payments complement fields if complement is enabled\n  renderPaymentsComplementFields () {\n    const {\n      includePaymentsComplement,\n      paymentForm,\n      currency,\n      branch,\n      series,\n      folio\n    } = this.state\n    if (!includePaymentsComplement) return null\n    return (\n      <div>\n        <div className='column is-12'>\n          <TextField\n            label='Serie'\n            onChange={this.onChange.bind(this, 'series')}\n            value={series}\n            selectAllOnFocus\n            required\n            ref={r => {\n              if (includePaymentsComplement) requiredFields.add(r)\n            }}\n          />\n        </div>\n        <div className='column is-12'>\n          <TextField\n            label='Folio'\n            onChange={this.onChange.bind(this, 'folio')}\n            value={folio}\n            selectAllOnFocus\n            required\n            ref={r => {\n              if (includePaymentsComplement) requiredFields.add(r)\n            }}\n          />\n        </div>\n        <div className='column is-12'>\n          <SelectField\n            label='Moneda'\n            placeholder='Seleccione una moneda'\n            options={CURRENCY}\n            onChange={this.onChange.bind(this, 'currency')}\n            value={currency}\n            required\n            ref={r => {\n              if (includePaymentsComplement) requiredFields.add(r)\n            }}\n            showId\n          />\n        </div>\n        <div className='column is-12'>\n          <SelectField\n            label='Forma de pago'\n            placeholder='Seleccione una forma de pago'\n            options={PAYMENT_CATEGORIES}\n            onChange={this.onChange.bind(this, 'paymentForm')}\n            value={paymentForm}\n            required\n            ref={r => {\n              if (includePaymentsComplement) requiredFields.add(r)\n            }}\n            showId\n          />\n        </div>\n        <div className='column is-12'>\n          <label className='caption'>Sucursal de emisión (opcional)</label>\n          <div className='control has-info'>\n            <Async\n              value={branch}\n              loadOptions={this.getBranches.bind(this)}\n              clearable\n              placeholder='Selecciona una Sucursal'\n              loadingPlaceholder='Buscando'\n              searchPromptText='Teclear el nombre de la sucursal'\n              noResultsText='No encontrada'\n              onChange={this.setBranch.bind(this)}\n              ignoreAccents={false}\n            />\n            <span className='icon info-icon'>\n              <span className='tooltip'>\n                Para agregar más sucursales ingresa a \"mi empresa\"\n              </span>\n              <i className='mdi mdi-information-outline' />\n            </span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Main render\n  render () {\n    const { isActive, toggleModal, invoice } = this.props\n    const {\n      account,\n      paymentAccounts,\n      description,\n      exchangeRate,\n      date,\n      amount\n    } = this.state\n    const payedCents = invoice.payments\n      ? invoice.payments.reduce((acc, payment) => acc + payment.amount_cents, 0)\n      : 0\n    const restingCents = invoice.total_cents - payedCents\n    return (\n      <Modal\n        title={`Registrar ${invoice.type === 0 ? 'cobro' : 'pago'}`}\n        isActive={isActive}\n        toggleModal={toggleModal}\n        onSubmit={this.addPayment.bind(this)}\n      >\n        <form onSubmit={this.addPayment.bind(this)}>\n          <div className='columns is-multiline'>\n            <div className='column is-12 flex-column'>\n              <span className='subtitle-body'>\n                Emisor: {invoice.issuer ? invoice.issuer.name : ''}\n              </span>\n              <span className='subtitle-body'>\n                Receptor: {invoice.recipient ? invoice.recipient.name : ''}\n              </span>\n              <span className='body'>Folio: {invoice.folio}</span>\n              <span className='body'>\n                Fecha de emisión: {prettyDate(invoice.issue_date)}\n              </span>\n              <span className='body'>\n                Total: {accounting.formatMoney(invoice.total_cents / 100, '$ ')}\n              </span>\n              <span\n                className={classNames('body', {\n                  'is-hidden': invoice.payment_status !== '1'\n                })}\n              >\n                Pagado: {accounting.formatMoney(payedCents / 100, '$ ')}\n              </span>\n              <span\n                className={classNames('body', {\n                  'is-hidden': invoice.payment_status !== '1'\n                })}\n              >\n                Restante: {accounting.formatMoney(restingCents / 100, '$ ')}\n              </span>\n            </div>\n            {this.renderAddPaymentInvoice()}\n            <div className='column is-12'>\n              <SelectField\n                label='Cuenta de depósito'\n                placeholder='Seleccione una cuenta de pago'\n                options={paymentAccounts}\n                onChange={this.onChange.bind(this, 'account')}\n                value={account}\n                required\n                ref={r => requiredFields.add(r)}\n              />\n            </div>\n            <div className='column is-12'>\n              <TextField\n                label='Descripción'\n                onChange={this.onChange.bind(this, 'description')}\n                value={description}\n                required\n                ref={r => requiredFields.add(r)}\n              />\n            </div>\n            <div className='column is-12'>\n              <Datepicker\n                label={`Fecha de ${invoice.type === 0 ? 'cobro' : 'pago'}`}\n                value={date}\n                onChange={this.onChangeDate.bind(this, 'date')}\n                required\n                ref={r => requiredFields.add(r)}\n                maxDate={moment()}\n              />\n            </div>\n            <div className='column is-8'>\n              <TextField\n                label='Importe'\n                onChange={this.onChange.bind(this, 'amount')}\n                onBlur={this.formatPrice.bind(this, 'amount')}\n                onFocus={this.unformatPrice.bind(this, 'amount')}\n                value={amount}\n                selectAllOnFocus\n                required\n                ref={r => requiredFields.add(r)}\n              />\n            </div>\n            {invoice.currency !== 'MXN' && (\n              <div className='column is-4'>\n                <TextField\n                  label='Tipo de cambio'\n                  onChange={this.onChange.bind(this, 'exchangeRate')}\n                  value={exchangeRate}\n                  selectAllOnFocus\n                  ref={r => requiredFields.add(r)}\n                />\n              </div>\n            )}\n            {this.renderPaymentsComplementFields()}\n          </div>\n        </form>\n      </Modal>\n    )\n  }\n}\n\nexport default PaymentModal\n\nPaymentModal.propTypes = {\n  invoice: PropTypes.object.isRequired,\n  isActive: PropTypes.bool,\n  toggleModal: PropTypes.func,\n  getInvoice: PropTypes.func,\n  paymentId: PropTypes.string\n}\n\nPaymentModal.defaultProps = {\n  isActive: false,\n  toggleModal: () => {},\n  getInvoice: () => {}\n}\n"]},"metadata":{},"sourceType":"module"}