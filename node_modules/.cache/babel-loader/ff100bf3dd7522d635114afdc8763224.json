{"ast":null,"code":"import _toConsumableArray from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/Users/usuario-rtd/Desktop/widget-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/newInvoice/complementos/foreignTrade/address/index.js\";\n// Libraries\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport accounting from 'accounting';\nimport classNames from 'classnames';\nimport _uniqBy from 'lodash/uniqBy';\nimport AppSignal from 'appsignal'; // Components\n\nimport TextField from 'shared/textField';\nimport Button from 'shared/button';\nimport API from 'api';\nimport { absolutify } from 'utils'; // Foreign trade issuer address section key\n\nvar POSTAL_CODE_KEY = 'postal_code';\nvar STREET_KEY = 'street';\nvar EXTERIOR_NUMBER_KEY = 'exterior_number';\nvar INTERIOR_NUMBER_KEY = 'interior_number';\nvar COLONY_KEY = 'colony';\nvar MUNICIPALITY_KEY = 'municipality';\nvar STATE_KEY = 'state';\nvar COUNTRY_KEY = 'country';\nvar REFERENCE_KEY = 'reference';\nvar LOCALITY_KEY = 'locality';\nvar requiredFields = new Set(); // Build collection for every address kind\n\nvar buildCollection = function buildCollection(options, label) {\n  var collection = options.map(function (option) {\n    var _ref;\n\n    return _ref = {}, _defineProperty(_ref, label, option[label]), _defineProperty(_ref, \"label\", option[label]), _ref;\n  });\n  return _uniqBy(collection, label);\n}; // Create object of options from postal code response\n\n\nvar parsePostalCode = function parsePostalCode(options) {\n  return {\n    addressCities: buildCollection(options, 'city'),\n    addressMunicipalities: buildCollection(options, 'municipality'),\n    addressSettlements: buildCollection(options, 'settlement'),\n    addressStates: buildCollection(options, 'state')\n  };\n};\n\nvar Address =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Address, _React$Component);\n\n  function Address() {\n    var _this$data;\n\n    var _this;\n\n    _classCallCheck(this, Address);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Address).call(this));\n    _this.data = (_this$data = {}, _defineProperty(_this$data, POSTAL_CODE_KEY, ''), _defineProperty(_this$data, STREET_KEY, ''), _defineProperty(_this$data, EXTERIOR_NUMBER_KEY, ''), _defineProperty(_this$data, INTERIOR_NUMBER_KEY, ''), _defineProperty(_this$data, COLONY_KEY, ''), _defineProperty(_this$data, MUNICIPALITY_KEY, ''), _defineProperty(_this$data, STATE_KEY, ''), _defineProperty(_this$data, COUNTRY_KEY, ''), _defineProperty(_this$data, REFERENCE_KEY, ''), _defineProperty(_this$data, LOCALITY_KEY, ''), _this$data);\n    _this.state = Object.assign({}, _this.data);\n    return _this;\n  }\n\n  _createClass(Address, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clears the stored requiredFields\n      requiredFields.clear();\n    } // Sets options to selects according postal code response\n\n  }, {\n    key: \"setSelectOptions\",\n    value: function setSelectOptions() {\n      var _this$setState;\n\n      this.setState((_this$setState = {}, _defineProperty(_this$setState, LOCALITY_KEY, this.state.addressCities[0].city), _defineProperty(_this$setState, MUNICIPALITY_KEY, this.state.addressMunicipalities[0].municipality), _defineProperty(_this$setState, COLONY_KEY, this.state.addressSettlements[0].settlement), _defineProperty(_this$setState, STATE_KEY, this.state.addressStates[0].state), _this$setState));\n    } // Retrieve postal code options from postal code @ code\n\n  }, {\n    key: \"getAddressFromPostalCode\",\n    value: function getAddressFromPostalCode() {\n      var _this2 = this;\n\n      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state[POSTAL_CODE_KEY];\n\n      if (code.length === 5) {\n        API.Services.PostalCode({\n          zip_code: code\n        }).then(function (r) {\n          if (r.status === 200 && r.data.status === 'success' && r.data.data.length > 0) {\n            _this2.setState(_objectSpread({}, parsePostalCode(r.data.data)), function () {\n              _this2.setSelectOptions();\n            });\n          }\n        }).catch(function (error) {\n          AppSignal.sendError(error);\n        });\n      }\n    } // Iterates over required fields and validates every one of them\n    // Then it returns true if all validations succeedeed, else false.\n\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      return _toConsumableArray(requiredFields) // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(function (form) {\n        return form.validate();\n      }) // Calls the validate() method on each form\n      .every(function (e) {\n        return e;\n      }); // Checks if all validations suceeded\n    } // Exports Address object\n\n  }, {\n    key: \"export\",\n    value: function _export() {\n      return this.state;\n    } // Sets a specific format depending of the kind\n\n  }, {\n    key: \"setFormat\",\n    value: function setFormat(value) {\n      var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'string';\n\n      switch (kind) {\n        case 'money':\n          return accounting.formatMoney(absolutify(value), '$ ');\n\n        case 'integer':\n          return absolutify(value).toString();\n\n        case 'percentage':\n          return accounting.formatMoney(absolutify(value), {\n            symbol: '%',\n            format: '%v %s'\n          });\n\n        case 'string':\n          return value;\n\n        default:\n          return value;\n      }\n    } // Updates an input's value when it changes\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(field, e) {\n      this.setState(_defineProperty({}, field, e.target.value));\n    } // Sets the correct format to the content field when it losses the focus\n\n  }, {\n    key: \"formatField\",\n    value: function formatField(field) {\n      var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'string';\n      var formatted = this.setFormat(this.state[field], kind);\n      this.setState(_defineProperty({}, field, formatted));\n    } // Formats the current field as number when it gets the focus\n\n  }, {\n    key: \"unformatField\",\n    value: function unformatField(field) {\n      var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'string';\n      var unformatted = kind === 'string' ? this.state[field] : accounting.unformat(this.state[field]);\n      this.setState(_defineProperty({}, field, unformatted));\n    } // Updates an async input value\n\n  }, {\n    key: \"onChangeAsync\",\n    value: function onChangeAsync(field, value) {\n      this.setState(_defineProperty({}, field, value));\n    }\n  }, {\n    key: \"renderAddress\",\n    value: function renderAddress() {\n      return React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Pa\\xEDs\",\n        placeholder: \"Pa\\xEDs\",\n        key: \"country\",\n        value: this.state[COUNTRY_KEY],\n        onChange: this.onChange.bind(this, COUNTRY_KEY),\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"C\\xF3digo postal\",\n        placeholder: \"C\\xF3digo postal\",\n        onBlur: this.getAddressFromPostalCode.bind(this),\n        value: this.state[POSTAL_CODE_KEY],\n        onChange: this.onChange.bind(this, POSTAL_CODE_KEY),\n        required: true,\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        label: \"Estado\",\n        key: \"STATE_LIST\",\n        placeholder: \"Estado (Se requiere el c\\xF3digo postal)\",\n        value: this.state[STATE_KEY],\n        onChange: this.onChange.bind(this, STATE_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        label: \"Municipio\",\n        key: \"MUNICIPALITY_LIST\",\n        placeholder: \"Municipio (Se requiere el c\\xF3digo postal)\",\n        value: this.state[MUNICIPALITY_KEY],\n        onChange: this.onChange.bind(this, MUNICIPALITY_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        label: \"Colonia\",\n        placeholder: \"Colonia (Se requiere el c\\xF3digo postal)\",\n        key: \"SETTLEMENTS_LIST\",\n        value: this.state[COLONY_KEY],\n        onChange: this.onChange.bind(this, COLONY_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        label: \"Localidad\",\n        placeholder: \"Localidad (Se requiere el c\\xF3digo postal)\",\n        key: \"CITY_LIST\",\n        value: this.state[LOCALITY_KEY],\n        onChange: this.onChange.bind(this, LOCALITY_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        label: \"Calle\",\n        placeholder: \"Calle\",\n        value: this.state[STREET_KEY],\n        onChange: this.onChange.bind(this, STREET_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        label: \"N\\xFAmero exterior\",\n        placeholder: \"N\\xFAmero exterior\",\n        value: this.state[EXTERIOR_NUMBER_KEY],\n        onChange: this.onChange.bind(this, EXTERIOR_NUMBER_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        label: \"N\\xFAmero interior\",\n        placeholder: \"N\\xFAmero interior\",\n        value: this.state[INTERIOR_NUMBER_KEY],\n        onChange: this.onChange.bind(this, INTERIOR_NUMBER_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        label: \"Referencia\",\n        placeholder: \"Referencia\",\n        value: this.state[REFERENCE_KEY],\n        onChange: this.onChange.bind(this, REFERENCE_KEY),\n        ref: function ref(r) {\n          return requiredFields.add(r);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      })));\n    } // Renders address component\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, this.renderAddress(), React.createElement(\"div\", {\n        className: classNames({\n          'is-hidden': !this.props.deletable\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(Button, {\n        buttonStyle: \"dangerLink\",\n        icon: \"delete\",\n        onClick: function onClick() {\n          _this3.props.deleteAddress(_this3.props.uuid);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Eliminar direcci\\xF3n\")));\n    }\n  }]);\n\n  return Address;\n}(React.Component);\n\nAddress.propTypes = {\n  uuid: PropTypes.string,\n  deletable: PropTypes.bool,\n  deleteAddress: PropTypes.func\n};\nexport default Address;","map":{"version":3,"sources":["/Users/usuario-rtd/Desktop/widget-front/src/components/app/views/newInvoice/complementos/foreignTrade/address/index.js"],"names":["React","PropTypes","accounting","classNames","_uniqBy","AppSignal","TextField","Button","API","absolutify","POSTAL_CODE_KEY","STREET_KEY","EXTERIOR_NUMBER_KEY","INTERIOR_NUMBER_KEY","COLONY_KEY","MUNICIPALITY_KEY","STATE_KEY","COUNTRY_KEY","REFERENCE_KEY","LOCALITY_KEY","requiredFields","Set","buildCollection","options","label","collection","map","option","parsePostalCode","addressCities","addressMunicipalities","addressSettlements","addressStates","Address","data","state","Object","assign","clear","setState","city","municipality","settlement","code","length","Services","PostalCode","zip_code","then","r","status","setSelectOptions","catch","error","sendError","filter","Boolean","form","validate","every","e","value","kind","formatMoney","toString","symbol","format","field","target","formatted","setFormat","unformatted","unformat","onChange","bind","add","getAddressFromPostalCode","renderAddress","props","deletable","deleteAddress","uuid","Component","propTypes","string","bool","func"],"mappings":"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","sourcesContent":["// Libraries\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport accounting from 'accounting'\nimport classNames from 'classnames'\nimport _uniqBy from 'lodash/uniqBy'\nimport AppSignal from 'appsignal'\n\n// Components\nimport TextField from 'shared/textField'\nimport Button from 'shared/button'\nimport API from 'api'\nimport { absolutify } from 'utils'\n\n// Foreign trade issuer address section key\nconst POSTAL_CODE_KEY = 'postal_code'\nconst STREET_KEY = 'street'\nconst EXTERIOR_NUMBER_KEY = 'exterior_number'\nconst INTERIOR_NUMBER_KEY = 'interior_number'\nconst COLONY_KEY = 'colony'\nconst MUNICIPALITY_KEY = 'municipality'\nconst STATE_KEY = 'state'\nconst COUNTRY_KEY = 'country'\nconst REFERENCE_KEY = 'reference'\nconst LOCALITY_KEY = 'locality'\n\nconst requiredFields = new Set()\n\n// Build collection for every address kind\nconst buildCollection = (options, label) => {\n  const collection = options.map(option => ({\n    [label]: option[label],\n    label: option[label]\n  }))\n  return _uniqBy(collection, label)\n}\n\n// Create object of options from postal code response\nconst parsePostalCode = options => {\n  return {\n    addressCities: buildCollection(options, 'city'),\n    addressMunicipalities: buildCollection(options, 'municipality'),\n    addressSettlements: buildCollection(options, 'settlement'),\n    addressStates: buildCollection(options, 'state')\n  }\n}\n\nclass Address extends React.Component {\n  constructor () {\n    super()\n    this.data = {\n      [POSTAL_CODE_KEY]: '',\n      [STREET_KEY]: '',\n      [EXTERIOR_NUMBER_KEY]: '',\n      [INTERIOR_NUMBER_KEY]: '',\n      [COLONY_KEY]: '',\n      [MUNICIPALITY_KEY]: '',\n      [STATE_KEY]: '',\n      [COUNTRY_KEY]: '',\n      [REFERENCE_KEY]: '',\n      [LOCALITY_KEY]: ''\n    }\n    this.state = Object.assign({}, this.data)\n  }\n\n  componentWillUnmount () {\n    // Clears the stored requiredFields\n    requiredFields.clear()\n  }\n\n  // Sets options to selects according postal code response\n  setSelectOptions () {\n    this.setState({\n      [LOCALITY_KEY]: this.state.addressCities[0].city,\n      [MUNICIPALITY_KEY]: this.state.addressMunicipalities[0].municipality,\n      [COLONY_KEY]: this.state.addressSettlements[0].settlement,\n      [STATE_KEY]: this.state.addressStates[0].state\n    })\n  }\n\n  // Retrieve postal code options from postal code @ code\n  getAddressFromPostalCode (code = this.state[POSTAL_CODE_KEY]) {\n    if (code.length === 5) {\n      API.Services.PostalCode({ zip_code: code })\n        .then(r => {\n          if (\n            r.status === 200 &&\n            r.data.status === 'success' &&\n            r.data.data.length > 0\n          ) {\n            this.setState({ ...parsePostalCode(r.data.data) }, () => {\n              this.setSelectOptions()\n            })\n          }\n        })\n        .catch(error => {\n          AppSignal.sendError(error)\n        })\n    }\n  }\n\n  // Iterates over required fields and validates every one of them\n  // Then it returns true if all validations succeedeed, else false.\n  validate () {\n    return [...requiredFields] // Converts the Set() into an array\n      .filter(Boolean) // Filters the array from any falsy value\n      .map(form => form.validate()) // Calls the validate() method on each form\n      .every(e => e) // Checks if all validations suceeded\n  }\n\n  // Exports Address object\n  export () {\n    return this.state\n  }\n\n  // Sets a specific format depending of the kind\n  setFormat (value, kind = 'string') {\n    switch (kind) {\n      case 'money':\n        return accounting.formatMoney(absolutify(value), '$ ')\n      case 'integer':\n        return absolutify(value).toString()\n      case 'percentage':\n        return accounting.formatMoney(absolutify(value), {\n          symbol: '%',\n          format: '%v %s'\n        })\n      case 'string':\n        return value\n      default:\n        return value\n    }\n  }\n\n  // Updates an input's value when it changes\n  onChange (field, e) {\n    this.setState({ [field]: e.target.value })\n  }\n\n  // Sets the correct format to the content field when it losses the focus\n  formatField (field, kind = 'string') {\n    const formatted = this.setFormat(this.state[field], kind)\n    this.setState({ [field]: formatted })\n  }\n\n  // Formats the current field as number when it gets the focus\n  unformatField (field, kind = 'string') {\n    const unformatted =\n      kind === 'string'\n        ? this.state[field]\n        : accounting.unformat(this.state[field])\n    this.setState({ [field]: unformatted })\n  }\n\n  // Updates an async input value\n  onChangeAsync (field, value) {\n    this.setState({ [field]: value })\n  }\n\n  renderAddress () {\n    return (\n      <div className='columns'>\n        <div className='column'>\n          <TextField\n            label='País'\n            placeholder='País'\n            key='country'\n            value={this.state[COUNTRY_KEY]}\n            onChange={this.onChange.bind(this, COUNTRY_KEY)}\n            required\n            ref={r => requiredFields.add(r)}\n          />\n          <br />\n          <div className='control'>\n            <TextField\n              label='Código postal'\n              placeholder='Código postal'\n              onBlur={this.getAddressFromPostalCode.bind(this)}\n              value={this.state[POSTAL_CODE_KEY]}\n              onChange={this.onChange.bind(this, POSTAL_CODE_KEY)}\n              required\n              ref={r => requiredFields.add(r)}\n            />\n          </div>\n          <br />\n          {/* state   llenar conforme al catálogo c_Estado. La columna c_Pais es 'MEX' */}\n          <TextField\n            label='Estado'\n            key='STATE_LIST'\n            placeholder='Estado (Se requiere el código postal)'\n            value={this.state[STATE_KEY]}\n            onChange={this.onChange.bind(this, STATE_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n          <br />\n          {/* state   llenar conforme al catálogo c_Estado. La columna c_Pais es 'MEX' */}\n          <TextField\n            label='Municipio'\n            key='MUNICIPALITY_LIST'\n            placeholder='Municipio (Se requiere el código postal)'\n            value={this.state[MUNICIPALITY_KEY]}\n            onChange={this.onChange.bind(this, MUNICIPALITY_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n          <br />\n          {/* state   llenar conforme al catálogo c_Estado. La columna c_Pais es 'MEX' */}\n          <TextField\n            label='Colonia'\n            placeholder='Colonia (Se requiere el código postal)'\n            key='SETTLEMENTS_LIST'\n            value={this.state[COLONY_KEY]}\n            onChange={this.onChange.bind(this, COLONY_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n        </div>\n        <div className='column'>\n          {/* state   llenar conforme al catálogo c_Estado. La columna c_Pais es 'MEX' */}\n          <TextField\n            label='Localidad'\n            placeholder='Localidad (Se requiere el código postal)'\n            key='CITY_LIST'\n            value={this.state[LOCALITY_KEY]}\n            onChange={this.onChange.bind(this, LOCALITY_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n          <br />\n          <TextField\n            label='Calle'\n            placeholder='Calle'\n            value={this.state[STREET_KEY]}\n            onChange={this.onChange.bind(this, STREET_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n          <br />\n          <TextField\n            label='Número exterior'\n            placeholder='Número exterior'\n            value={this.state[EXTERIOR_NUMBER_KEY]}\n            onChange={this.onChange.bind(this, EXTERIOR_NUMBER_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n          <br />\n          <TextField\n            label='Número interior'\n            placeholder='Número interior'\n            value={this.state[INTERIOR_NUMBER_KEY]}\n            onChange={this.onChange.bind(this, INTERIOR_NUMBER_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n          <br />\n          <TextField\n            label='Referencia'\n            placeholder='Referencia'\n            value={this.state[REFERENCE_KEY]}\n            onChange={this.onChange.bind(this, REFERENCE_KEY)}\n            ref={r => requiredFields.add(r)}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  // Renders address component\n  render () {\n    return (\n      <div>\n        {this.renderAddress()}\n        <div className={classNames({ 'is-hidden': !this.props.deletable })}>\n          <Button\n            buttonStyle='dangerLink'\n            icon='delete'\n            onClick={() => {\n              this.props.deleteAddress(this.props.uuid)\n            }}\n          >\n            Eliminar dirección\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nAddress.propTypes = {\n  uuid: PropTypes.string,\n  deletable: PropTypes.bool,\n  deleteAddress: PropTypes.func\n}\n\nexport default Address\n"]},"metadata":{},"sourceType":"module"}